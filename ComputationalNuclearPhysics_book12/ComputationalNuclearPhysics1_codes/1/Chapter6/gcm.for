C + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
C
C                 GGGG         CCCC      M      M
C                G            C          M M  M M
C               G            C           M  MM  M
C               G   GGG      C           M      M
C                G    G       C          M      M
C                 GGGGG        CCCC      M      M
C
C
C  AUTHORS: D.TROLTENIER, P.O.HESS, J.MARUHN, W.GREINER
C
C THIS PACKAGE ENABLES THE USER TO CALCULATE EXCITATION ENERGIES AND
C ELECTROMAGNETIC PROPERTIES OF EVEN-EVEN NUCLEI WITHIN THE GEOMETRIC
C COLLECTIVE MODEL. ADDITIONALLY IT PERFORMS AUTOMATED FITTING TO
C EXPERIMENTAL DATA. ONE NEEDS THE FOLLOWING STANDARD ROUTINES FROM A
C LIBRARY (NAG,IMSL) TO RUN THIS CODE.
C (WE USED THE IMSL ROUTINES VERSION 9.2, 1984).
C
C   -  DIAGONALIZATION SUBROUTINE IN THE SUBROUTINE ENERG
C        THE WELL KNOWN ROUTINE GIVENS WAS USED IN THE ORIGINAL CODE
C        BUT CAN BE REPLACED BY EVERY OTHER STANDARD ROUTINE AS WELL.
C
C   -  FITTING ROUTINE IN THE SUBROUTINE FIT:
C        THE IMSL ROUTINE ZXSSQ LOOKS FOR THE MINIMUM OF THE SUM OF
C        SQUARES OF M FUNCTIONS (I.E. THE DEVIATIONS OF EXPERIMENTAL
C        AND CALCULATED DATA) IN N VARIABLES (I.E. THE PARAMETERS OF
C        THE GCM: C2,C3,C4,C5,C6,D6,B2,P3) USING A FINITE DIFFERENCE
C        LEVENBERG-MARQUARDT ALGORITHM. AN IMPORTANT POINT IS THAT THIS
C        ROUTINE TAKES CARE OF THE SIGN OF EACH SINGLE  COMPONENT OF THE
C        QUALITY FUNCTION.
C
C   -  LINEAR EQUATION SYSTEM SOLVER IN THE SUBROUTINE POTMIN
C        WE USED THE IMSL ROUTINE LEQT2F, WHICH GIVES A HIGH ACCURACY
C        SOLUTION.
C   -  MINIMAX ROUTINE IN THE SUBROUTINE POTMIN
C        WE USED THE IMSL ROUTINE ZXMWD, WHICH GIVES THE GLOBAL MINIMUM
C        WITH CONSTRAINTS. FOR FURTHER EXPLANATION SEE THE SUBRUOUTINE
C        POTMIN.
C
C ADDITIONALLY ONE HAS TO PROVIDE THE FOLLOWING FILES, WHICH ARE ALL
C INCLUDED IN THE PACKAGE. ( REMOVE THE CCC IN THE LINES OF THE
C OPEN AND CLOSE STATEMENTS IN THIS ROUTINE HEAD BY THE COMMAND
C >FIND CCC< .
C
C   - STANDARD OUTPUT DATASET, UNIT=6, RL=132
C     (CONTAINS THE OUTPUT WHEN USING INPUT.DAT AS INPUT)
C   - STANDARD INPUT DATASET, UNIT=5, RL=80 (ORIGINALLY EMPTY)
C   - TWO FILES WITH ANGULAR MATRIXELEMENTS (SEE ARTICLE)
C      UNIT 20: QUADRUPOLE PART (RL=80) (CONTAINS NUMBERS)
C      UNIT 21: POTENTIAL PART (RL=80) (CONTAINS NUMBERS)
C
C   - FILE STORING DIAGONALIZATION COEFFICIENTS, UNIT=30, RL=80
C     (ORIGINALLY EMPTY)
C
C   - FILE STORING POTENTIAL AND MASS PARAMETERS, UNIT=40, RL=80
C     (CONTAINS THE INPUT PARAMETER FOR OS176)
C
C BELOW WE GIVE AN EXAMPLE INPUT FILE 5 FOR 186 OS (SEE ARTICLE):
C
C
C-----------------  TOP OF 186 OS EXAMPLE INPUT FILE -------------------
C 0                                                    IFPARA
C 0.,0.,0.,0.,0.,0.                           BETA0,GAMMA0,CB,CG,CBG,V0
C -564.76,733.01,13546.39,-8535.074,-41635.09,0.0     C2,C3,C4,C5,C6,D6
C 112.48,-0.0531                                      B2,P3
C 90.,100.,0                                          B2S,C2S,IFBASE
C 30                                                  NPH
C 1                                                   IFEB
C 0,6                                                 LMINE,LMAXE
C 3                                                   NENEIV
C 1.0                                                 RESCAL
C 3                                                   NBQ
C 0,6                                                 LMINB, LMAXB
C 186,76                                              NA,NZ
C 0.0                                                 BE202
C 10,3,1,2                                     NUMEN,NUMBE2,NUMQ,NUMDIF
C 0                                                   IFFIT
C 0                                                   IFPLOT
C 0,1,0.0                                    LEXEN( ),NEXEN( ),EXEN( )
C 2,1,0.137                                    ..
C 2,2,0.767                                    ..
C 3,1,0.910                                    ..
C 4,1,0.433                                    ..
C 4,2,1.070                                    ..
C 4,3,1.352                                    ..
C 5,1,1.275                                    ..
C 6,1,0.867                                    ..
C 6,2,1.492                                    ..
C 0,1,2,1,3.11 LEXBE2(I,1),NEXBE2(I,1),LEXBE2(I,2),NEXBE2(I,2),EXBE2(I)
C 2,1,2,2,0.082                               ..
C 2,1,4,1,1.51                                ..
C 2,1,-1.55                                   LEXQ(I), NEXQ(I),EXQ(I)
C 1,2,0.137                          NEXDIF(I,1), NEXDIF(I,2),EXDIF(I)
C 2,3,0.630                                   ..
C--------------- BOTTOM  OF 186 OS EXAMPLE INPUT FILE -----------------
C
C
C + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
C
      PROGRAM HEAD
C
C ---------------------------------------------------------------------
C THIS PROGRAM IS THE MASTER ROUTINE. IT SETS DEFAULTS, READS USER
C
C AVAILABLE PARAMETERS AND CALLS THE SUBROUTINES.
C ---------------------------------------------------------------------
C

      EXTERNAL ENERG,QBE2,FIT

      INTEGER LEXEN(30),               LEXBE2(30,2), LEXQ(30)
      INTEGER NEXEN(30), NEXDIF(30,2), NEXBE2(30,2), NEXQ(30)
      INTEGER IFAM(0:10), LRWS(0:10)
      REAL EXEN(30),EXDIF(30),EXBE2(30),EXQ(30),X(8),RESCAL

C FIELDS NEEDED FOR THE IMSL FIT ROUTINE ZXSSQ
C ( FOR VARIABLE DIMENSIONING ALL FIELDS HAVE BEEN CHOOSEN BIGGER THAN
C   USED IN THE SUBROUTINE FIT )
C
      REAL XJAC(100,100),XJTJ(200), WORK(200),F(100)
C
C XJAC(I1,I2): OUTPUT M BY N MATRIX CONTAINING THE APPROXIMATE
C              JACOBIAN AT X(N).
C   XJTJ(200): OUTPUT VECTOR OF LENGTH (N+1)*N/2 CONTAINING THE N BY
C              N MATRIX (XJAC-TRANSPOSED) * (XJAC) IN SYMMETRIC STORAGE
C              MODE.
C   WORK(200): WORK VECTOR OF LENGTH 5*N + 2*M + (N+1)*N/2. ON OUTPUT,
C              WORK(I) CONTAINS:
C              WORK(1): THE NORM OF THE GRADIENT AT X.
C              WORK(2): NUMBER OF FUNCTION EVALUATIONS REQUIRED.
C              WORK(3): THE ESTIMATED NUMBER OF THE SIGNIFICANT DIGITS
C                       IN X(N).
C              WORK(4): FINAL VALUE OF MARQUARDT PARAMETER.
C              WORK(5): NUMBER OF ITERATIONS.
C    F(M)   :  CONTAINS ON OUTPUT THE RESIDUALS FOR THE FINAL PARAMETER
C              SET X(N).
C
C-----------------------------------------------------------------------
C
C PARAMETER OF  COMMON-BLOCK BASIS
C
CB2S,C2S:THE MASS AND STIFFNESS PARAMETER OF THE EIGENFUNCTIONS OF THE
C        FIVE-DIMENSIONAL HARMONIC OSCILLTOR. IF THEY ARE NOT PRESCRIBED
C        BY THE USER AS INPUT DATA (SEE IFBASE), THEY ARE CALCULATED
C        IN THE SUBROUTINE SMIN. (SEE ARTICLE)
C
      COMMON /BASIS/ B2S,C2S
C
C-----------------------------------------------------------------------
C PARAMETER OF  COMMON-BLOCK FLAG
C
C  THIS COMMONBLOCK SETS DIFFERENT FLAGS AND SWITCHES.
C
C   IFAM(0:10) - IN CASE OF FITTING DATA IFAM(K) IS SET EQUAL 1 IF
C                ANY CALCULATIONS FOR THIS ANGULAR MOMENTUM K HAVE TO
C                BE PERFORMED. OTHERWISE IFAM(K)=0.
C   LRADAN     - A FLAG WHICH STORES IF THE FIELD RADAN WAS ALREADY
C                CALCULATED (LRADAN=1) OR NOT (LRADAN=0).
C   LRWS       - A FLAG WHICH STORES IF THE FIELD RWS WAS ALREADY
C                READ (LRWS=1) OR NOT (LRWS=0).
C   IFEB       - A SWITCH VARIABLE FOR THE THREE OPTIONS USING THIS
C                CODE.
C
C     IFEB=1: THE PROGRAM CALCULATES ENERGIES, B(E2)- AND Q-VALUES DUE
C             TO THE BOUNDARIES SET IN THE INPUT PARAMETERS.
C
C     IFEB=2: ONLY ENERGIES ARE CALCULATED.
C
C     IFEB=4: THE PROGRAM FITS ENERGIES, B(E2)- AND Q-VALUES DUE THE
C             EXPERIMENTAL INPUT DATA.
C
C   IFBASE     - A SWITCH VARIABLE:
C                IFBASE=0: THE BASISPARAMETERS ARE CALCULATED BY THE
C                          CODE.
C                IFBASE=1: THE CODE OVERTAKES THE INPUT DATA FOR B2S
C                          AND C2S.
C
C   IFPLOT     - A SWITCH VARIABLE ONLY FOR FITTING OPTION (IFEB=4).
C                IF IFPLOT=1, THE CUTS THROUGH THE PES ARE PLOTTED AFTER
C                EACH PARAMETER EVALUATION (OTHERWISE IFPLOT=0).
C
C   LRADQ      - A FLAG WHICH CONTROLLS IF THE RADIAL QUADRUPOLE
C                MATRIXELEMENTS ARE YET RESCALED (LRADQ=1) DUE TO THE
C                BASIS PARAMETERS B2S AND C2S IN SUBROUTINE QBE2 OR NOT
C                (LRADQ=0).
C
      COMMON /FLAG/  IFAM,LRADAN,LRWS,IFEB,IFBASE,IFPLOT,LRADQ
C
C-----------------------------------------------------------------------
C PARAMETER OF  COMMON-BLOCK INPUT
C
C  THIS COMMONBLOCK STORES SEVERAL INPUT DATA:
C
C   NPH  - NUMBER OF PHONONS USED FOR THE BASIS WAVEFUNCTIONS.
C          MAX(NPH)=30.
C NENEIV - NUMBER OF ENERGY EIGENVALUES WHICH ARE TO BE CALCULATED
C          (ALWAYS THE NENEIV LOWEST EIGENVALUES ARE CALCULATED).
C   NBQ  - NUMBER OF LOWEST STATES BETWEEN WHICH ALL B(E2)-VALUES
C          ARE CALCULATED (NENEIV.GE.NBQ !)
C    NA  - MASS NUMBER
C    NZ  - CHARGE NUMBER
C BE202  - YOU HAVE THE POSSIBILITY TO  ADJUST THE B(E2;0,1->2,1)-VALUE
C          EXACTLY DUE TO A CANONICAL TRANSFORMATION. THE SQUARE ROOT
C          OF THE EXPERIMENTAL VALUE IS BE202.
C
      COMMON /INPUT/ NPH,NENEIV,NBQ,NA,NZ,BE202
C
C-----------------------------------------------------------------------
C PARAMETER OF  COMMON-BLOCK EXPDAT
C
C THIS COMMONBLOCK STORES SEVERAL EXPERIMENTAL DATA AND IS USED FOR
C THE FITTING PROCEDURE (IFEB=4).
C GENERAL NAME RULE FOR ++EX**, WHERE EX MEANS EXPERIMENTAL, AND:
C
C               ++=L : ANGULAR MOMENTUM
C               ++=N : SEQUENTIAL NUMBER IN INPUT DATA
C               ++=  : EXPERIMENTAL VALUE ITSELF
C               **=EN: ENERGIE
C              **=BE2: B(E2)-VALUES
C               **=Q : QUADRUPOLE VALUES
C              **=DIF: DIFFERNCES OF ENERGIES
C
C   LEXEN - LEXEN(K) STORES THE ANGULAR MOMENTUM OF THE STATE WHICH
C           HAS THE SEQUENTIAL NUMBER K IN THE INPUT LIST FOR
C           EXPERIMENTAL ENERGIES.
C  LEXBE2 - STORES ANGULAR MOMENTA OF THE TRANSITION NUMBER I.
C           LEXBE2(I,1): ANGULAR MOMENTUM OF THE INITIAL
C                        STATE OF THE TRANSITION.
C           LEXBE2(I,2): ANGULAR MOMENTUM OF THE FINAL
C                        STATE OF THE TRANSITION.
C  LEXBE2 - LEXBE2(K) STORES THE ANGULAR MOMENTUM OF THE QUDRUPOLEMOMENT
C           WITH SEQUENTIAL INPUT NUMBER K.
C
C  NEXEN  - FOR THE SAME ANGULAR MOMENTUM A NUCLEUS HAS DIFFERENT STATES
C           WITH RESPECT TO THEIR ENERGIES. NEXEN(K) IS THE SEQUENTIAL
C           NUMBER OF A STATE WHEN THEY ARE ORDERED DUE TO THEIR ENERGY
C           FOR A GIVEN A.M. WITH INPUT SEQUENTIAL NUMBER K AND
C           ANGULAR MOMENTUM LEXEN(K).
C  NEXDIF - NEEDED FOR FITTING ENERGY DIFFERENCES:
C              NEXDIF(I,1): POSITION OF THE LOWER STATE
C                           IN THE EXP. ENERGY DATA LIST.
C              NEXDIF(I,2): POSITION OF THE HIGHER STATE
C                           IN THE EXP. ENERGY DATA LIST.
C
C  NEXBE2 - NEEDED FOR FITTING B(E2)-VALUES:
C              NEXBE2(I,1): POSITION OF THE INITIAL STATE DUE TO ITS
C                           ENERGY BETWEEN THOSE
C                           WITH THE SAME ANGULAR MOMENTUM.
C              NEXBE2(I,2): POSITION OF THE FINAL STATE DUE TO ITS
C                           ENERGY BETWEEN THOSE
C                           WITH THE SAME ANGULAR MOMENTUM.
C
C  NEXQ   - NEEDED FOR FITTING Q-VALUES:
C              NEXQ(I,2):   POSITION OF THE  STATE DUE TO ITS
C                           ENERGY BETWEEN THOSE
C                           WITH THE SAME ANGULAR MOMENTUM.
C
C  THE PREFIX EX STANDS FOR EXPERIMENTAL VALUES:
C
C    EXEN(I)   - EXPERIMENTAL ENERGY
C    EXDIF(I)  - EXPERIMENTAL ENERGY DIFFERENCE
C    EXBE2     - EXPERIMENTAL B(E2)-VALUE
C    EXQ       - EXPERIMENTAL Q-VALUE
C
C  THE PREFIX NUM STANDS FOR TOTAL NUMBER:
C
C    NUMEN   - TOTAL NUMBER OF EXPERIMENTAL ENERGY INPUT DATA
C    NUMDIF  - TOTAL NUMBER OF EXPERIMENTAL ENERGY DIFFERENCE INPUT DATA
C    NUMBE2  - TOTAL NUMBER OF EXPERIMENTAL B(E2)-VALUE INPUT DATA
C    NUMQ    - TOTAL NUMBER OF EXPERIMENTAL Q-VALUE INPUT DATA
C
C
C
      COMMON /EXPDAT/ LEXEN,         LEXBE2, LEXQ,
     &                NEXEN, NEXDIF, NEXBE2, NEXQ,
     &                 EXEN,  EXDIF,  EXBE2,  EXQ,
     &                NUMEN, NUMDIF, NUMBE2, NUMQ
C
C-----------------------------------------------------------------------
C PARAMETER OF  COMMON-BLOCK FACTOR
C
C  NUMFIT - THE NUMBER OF THE ENERGETICALLY LOWEST STATE WITH HIGHEST
C           ANGULAR MOMNETUM IN THE EXPERIMENTAL ENERGY DATA LIST.
C           ITS ENERGY CAN BE FITTET EXACTLY DUE TO A COMMON RESCALING
C           OF THE HAMILTONIAN.
C  LFIT   - ANGULAR MOMENTUM OF THE ENERGETICALLY HIGHEST STATE.
C  EFIT   - ENERGY OF THIS STATE.
C  IFFIT  - THE SWITCH THAT DECIDES IF THIS STATE SHOULD BE FITTED
C           (IFFIT=1) OR NOT (IFFIT=0).
C
      COMMON /FACTOR/ NUMFIT,LFIT,EFIT,IFFIT
C
C-----------------------------------------------------------------------
C PARAMETERS OF  COMMON-BLOCK FIXED
C
C IN THIS COMMON BLOCK ARE FREQUENTLY USED CONSTANTS STORED:
C    HBAR - HEISENBERG CONSTANT
C    PI   - AREA OF UNIT SPHERE

      COMMON /FIXED/ HBAR,PI

      HBAR = 0.6582183
      PI   = 3.1415927
C-----------------------------------------------------------------------
C
C DEFINITION OF FILE UNIT NUMBERS:
C
C THE STANDARD INPUT AND OUTPUT DATASET:
C (BOTH EMPTY WHEN RUNNING THE CODE FIRST)
C
CCC   OPEN(UNIT=5,STATUS='OLD',FILE='INPUT.DAT')
CCC   OPEN(UNIT=6,STATUS='OLD',FILE='OUTPUT.DAT')
C
C TWO FILES FOR ANGULAR MATRIXELEMENTS: 20=QUADRUPOLE,21=POTENTIAL PART
C
CCC   OPEN(UNIT=20,STATUS='OLD',FILE='ANGQ.DAT')
CCC   OPEN(UNIT=21,STATUS='OLD',FILE='ANGP.DAT')
C
C FILE FOR STORING DIAGONALIZATION COEFFICIENTS
C
CCC   OPEN(UNIT=30,STATUS='OLD',FILE='DIAG.DAT')
C
C FILE FOR POTENTIAL AND MASS PARAMETERS
C
CCC   OPEN(UNIT=40,STATUS='OLD',FILE='PARA.DAT')
C
C

 2000 FORMAT(2(4E14.7/))

C
C INITIALIZING FLAGS:
C
      LRADAN = 0
      DO 5 I=0,10
       IFAM(I) = 0
       LRWS(I) = 0
    5 CONTINUE
C
C-----------------------------------------------------------------------
C
C  IFPARA=0: PARAMETERS C2,C3...B2,P3 ARE READ FROM FILE 40.
C  IFPARA=1: PARAMETERS C2,C3...B2,P3 ARE TAKEN FROM FILE 5.
C  IFPARA=2: PHYSICAL PARAMETERS BETA0,GAMMA0,CB,CG,CBG,V0 ARE TAKEN
C            FROM FILE 5 AND THE POTENTIAL PARAMETER ARE CALCULATED.
C            KINETIC ENERGY PARAMETER ARE READ FROM FILE 5. ONE HAS
C            TO TAKE CARE BECAUSE OF POSSIBLE SINGULARITY OF THE LINEAR
C            EQUATION TO BE SOLVED IF E.G. GAMMA0 = 0., SEE POTMIN.
C
C
      READ(5,*) IFPARA
      READ(5,*) BETA0,GAMMA0,CB,CG,CBG,V0
      READ(5,*) C2,C3,C4,C5,C6,D6
      READ(5,*) B2,P3
      IF      (IFPARA.EQ.2) THEN
         CALL POTMIN(C2,C3,C4,C5,C6,D6,0,BETA0,GAMMA0,CB,CG,CBG,V0)
      ELSE IF (IFPARA.EQ.0) THEN
         READ(40,2000) C2,C3,C4,C5,C6,D6,B2,P3
      END IF
C
C ALL INPUT DATA ARE EXTENSIVELY EXPLAINED IN THE ARTICLE AND IN THE
C COMMENTS ON THE COMMON BLOCKS.
C
      READ(5,*) B2S,C2S,IFBASE
      READ(5,*) NPH
      READ(5,*) IFEB
C
C MINIMUM AND MAXIMUM ANGULAR MOMENTUM FOR CALCULATING ENERGIES IN ENERG
C
      READ(5,*) LMINE,LMAXE
      READ(5,*) NENEIV
      READ(5,*) RESCAL
      READ(5,*) NBQ
C
C MINIMUM AN MAXIMUM ANGULAR MOMENTUM FOR CACULATING B(E2) AND Q-VALUES
C IN QBE2
C
      READ(5,*) LMINB,LMAXB
      READ(5,*) NA,NZ
      READ(5,*) BE202
        BE202 = SQRT(BE202)
      READ(5,*) NUMEN,NUMBE2,NUMQ,NUMDIF
      READ(5,*) IFFIT
      READ(5,*) IFPLOT

      DO 10 I=1,NUMEN
      READ(5,*) LEXEN(I),NEXEN(I),EXEN(I)
   10 CONTINUE
C
C DETERMINATION OF THE ENERGETICALLY LOWEST STATE WITH HIGHEST ANGULAR
C MOMENTUM (GROUNDSTATE BAND 6+ STATE). ITS ENERGY IS WRITTEN IN EFIT,
C ITS INPUT DATA NUMBER IN NUMFIT, ITS INPUT DATA ANGULAR MOMNETUM
C LFIT.
C
      IF (IFFIT.EQ.0) GOTO 16
      LFIT = LEXEN(NUMEN)
      DO 15 I=1,NUMEN
         IF (LFIT.EQ.LEXEN(I)) THEN
            NUMFIT = I
            EFIT = EXEN(I)
            GOTO 17
         END IF
   15 CONTINUE
   16 CONTINUE

C
C* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C  WARNING: LEXBE2(I,1) MUST BE SMALLER THAN OR EQUAL TO LEXBE2(I,2).
C* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C
   17 DO 20 I=1,NUMBE2
      READ(5,*) LEXBE2(I,1),NEXBE2(I,1),LEXBE2(I,2),NEXBE2(I,2),EXBE2(I)
   20 CONTINUE
C
      DO 30 I=1,NUMQ
        READ(5,*) LEXQ(I),NEXQ(I),EXQ(I)
   30 CONTINUE

      DO 40 I=1,NUMDIF
        READ(5,*) NEXDIF(I,1),NEXDIF(I,2),EXDIF(I)
   40 CONTINUE

      X(1) = C2
      X(2) = C3
      X(3) = C4
      X(4) = C5
      X(5) = C6
      X(6) = D6
      X(7) = B2
      X(8) = P3
C
C RESCALING OF THE HAMILTONIAN FOR E.G. A BETTER ADJUSTMENT TO A CERTAIN
C ENERGY VALUE.
C
      DO 50 I=1,8
        X(I) = X(I) * RESCAL
   50 CONTINUE
      X(7) = X(7) / RESCAL**2

C
C CALL OF THE  SEVERAL SUBROUTINES DUE TO THE CHOICE OF IFEB.
C
      IF (IFEB.EQ.1) THEN
            CALL ENERG(X,LMINE,LMAXE,NPH,NENEIV)
            CALL PLOT(X,6)
            CALL POTMIN( X(1),X(2),X(3),X(4),X(5),X(6),
     &                   1,BETA0,GAMMA0,CB,CG,CBG,V0)
            CALL QBE2(LMINB,LMAXB,LMINE,NPH,NBQ,NENEIV,NA,NZ,BE202,X)
      ELSE IF (IFEB.EQ.2) THEN
            CALL ENERG(X,LMINE,LMAXE,NPH,NENEIV)
      ELSE IF (IFEB.EQ.4) THEN
C
C M: TOTAL NUMBER OF EXPERIMENTAL VALUES TO BE ADJUSTED.
C N: TOTAL NUMBER OF PARAMETERS.
C
            M = NUMEN + NUMBE2 + NUMQ + NUMDIF
            N = 8
            CALL FIT(N,M,F,X,XJAC,XJTJ,WORK)
      END IF

C CLOSING THE FILES:

CCC   CLOSE(UNIT=5 ,STATUS='KEEP')
CCC   CLOSE(UNIT=6 ,STATUS='KEEP')
CCC   CLOSE(UNIT=20,STATUS='KEEP')
CCC   CLOSE(UNIT=21,STATUS='KEEP')
CCC   CLOSE(UNIT=30,STATUS='KEEP')
CCC   CLOSE(UNIT=40,STATUS='KEEP')

      END

C***********************************************************************

      SUBROUTINE FIT(N,M,F,X,XJAC,XJTJ,WORK)
C
C PURPOSE:
C THIS SUBROUTINE CALLS THE FIT ROUTINE ZXSSQ FROM THE IMSL LIBRARY.
C IT SETS THE PARAMETERS AND THE VARIABLE DIMENSIONED FIELDS.
C

      EXTERNAL FUNC

      INTEGER LEXEN(30),               LEXBE2(30,2), LEXQ(30)
      INTEGER NEXEN(30), NEXDIF(30,2), NEXBE2(30,2), NEXQ(30)
      INTEGER IFAM(0:10), LRWS(0:10)
      REAL EXEN(30),EXDIF(30),EXBE2(30),EXQ(30),X(8),F(M)
C
C VARIABLE DIMENSIONED FIELDS NEEDED FOR ZXSSQ:
      REAL WORK(5*N + 2*M + (N+1)*N/2)
      REAL XJAC(M,N),XJTJ( (N+1)*N/2 ),PARM(4)
C
      COMMON /EXPDAT/ LEXEN,         LEXBE2, LEXQ,
     &                NEXEN, NEXDIF, NEXBE2, NEXQ,
     &                 EXEN,  EXDIF,  EXBE2,  EXQ,
     &                NUMEN, NUMDIF, NUMBE2, NUMQ
      COMMON /FLAG/  IFAM,LRADAN,LRWS,IFEB,IFBASE,IFPLOT,LRADQ

C
C PARAMETERS FOR FITTING ROUTINE ZXSSQ. FOR A COMPREHENSIVE DISCUSSION
C SEE THE EXPLANATIONS IN THE IMSL-LIBRARY.
C
      NSIG  = 3
      EPS   = 0.5
      DELTA = 1.0
      MAXFN = 100
      IOPT  = 2
      IXJAC = M

      PARM(1) = 0.01
      PARM(2) = 2.
      PARM(3) = 4500.
      PARM(4) = 0.10

C
C  IN CASE OF FITTING EXPERIMENTAL DATA  IFAM(I) CONTROLS IF
C  THE CALCULATION OF THEORETICAL DATA FOR ANGULAR MOMENTUM I
C  IS NEEDED. (E.G. YOU NEED ENERGIES FITTED DUE TO ANGULAR
C  MOMENTUM 6 BUT NOT 5, THEN IFAM(5)=0,IFAM(6) =1)
C
      DO 20 I=1,NUMEN
         IFAM(LEXEN(I)) = 1
   20 CONTINUE

      DO 30 I=1,NUMBE2
         IFAM(LEXBE2(I,1)) = 1
      IFAM(LEXBE2(I,2)) = 1
   30 CONTINUE

      DO 40 I=1,NUMQ
      IFAM(LEXQ(I)) = 1
   40 CONTINUE
C
C ZXSSQ IS THE IMSL ROUTINE FOR FINDING MINIMA IN LEAST SQUARE FITS.
C
      CALL ZXSSQ(FUNC,M,N,NSIG,EPS,DELTA,MAXFN,IOPT,PARM,X,SSQ,F,
     & XJAC,IXJAC,XJTJ,WORK,INFER,IER)

       CALL PLOT(X,6)

       CALL POTMIN( X(1),X(2),X(3),X(4),X(5),X(6),
     &              1,BETA0,GAMMA0,CB,CG,CBG,V0)

      WRITE(6,2000) (WORK(I),I=1,5), IER,INFER,SSQ

 2000 FORMAT( //
     &/ ' FINAL GRADIENT NORM: ',      E14.7
     &/ ' HOW OFTEN WAS X CHANGED ?: ',E14.7
     &/ ' SIGNIFICANT DIGITS IN X: '  ,E14.7
     &/ ' FINAL MARQUARDT PARAMETER: ',E14.7
     &/ ' NUMBER OF ITERATIONS: ',     E14.7
     &/ ' ERROR CODE: ',               I5
     &/ ' CONVERGENCE PARAMETER: ',    I5
     &/ ' FINAL SUM OF SQUARES: ',     E14.7 )

      END

C***********************************************************************

      SUBROUTINE FUNC(X,M,N,F)
C
C PURPOSE:
C THIS SUBROUTINE CALCULATES THE QUALITY FUNCTION NEEDED FOR THE
C LEAST SQUARE FIT ROUTINE ZXSSQ.
C
C ARGUMENTS:
C     X: THE ARRAY CONTAINING THE PARAMETERS C2,..C6,D6,B2,P3
C        AT X(1)...X(8)
C     M: TOTAL NUMBER OF EXPERIMENTAL DATA TO BE FITTED
C     N: TOTAL NUMBER OF VARIABLES, I.E. PARAMETERS
C     F: ARRAY CONTAINING THE VECTOR OF DEVIATIONS OF EXPERIMENTAL
C        DATA TO CALCULATED VALUES. NEEDED FOR COMPONENT DEPENDENT
C        LEAST SQUARE FIT.
C

      INTEGER LEXEN(30),               LEXBE2(30,2), LEXQ(30)
      INTEGER NEXEN(30), NEXDIF(30,2), NEXBE2(30,2), NEXQ(30)
      INTEGER IFAM(0:10),LRADAN,LRWS(0:10)
      REAL EXEN(30),EXDIF(30),EXBE2(30),EXQ(30),X(8)
      REAL THENE(30),DIFFIT(30),BE2FIT(30,10,30,10),QFIT(30,10)
      REAL F(M)


      COMMON /FLAG/  IFAM,LRADAN,LRWS,IFEB,IFBASE,IFPLOT,LRADQ
      COMMON /TRANST/ BE2FIT,QFIT
      COMMON /EXPDAT/ LEXEN,         LEXBE2, LEXQ,
     &                NEXEN, NEXDIF, NEXBE2, NEXQ,
     &                 EXEN,  EXDIF,  EXBE2,  EXQ,
     &                NUMEN, NUMDIF, NUMBE2, NUMQ
      COMMON /FACTOR/ NUMFIT,LFIT,EFIT,IFFIT
      COMMON /THDAT/  THENE
      COMMON /INPUT/ NPH,NENEIV,NBQ,NA,NZ,BE202

C
C  LMIN, LMAX ARE THE MINIMUM AND MAXIMUM ANGULAR MOMENTUM OF
C  CALCULATED DATA NEEDED FOR FITTING.
C
      LMIN = 0
      LMAX = 6
C
C INITIALIZING THE VECTOR NEEDED FOR LEAST SQUARE FIT.
C
      DO 4 I=1,M
        F(I) = 0.
    4 CONTINUE
C
      CALL ENERG(X,LMIN,LMAX,NPH,NENEIV)
      CALL QBE2(LMIN ,LMAX ,LMIN ,NPH,NBQ,NENEIV,NA,NZ,BE202,X)

C
C DETERMINATION OF THE SCALING FACTOR FACFIT FOR THE EXACT ADJUSTMENT
C OF THE LOWEST STATE WITH HIGHEST ANGULAR MOMENTUM. THE PARAMETER
C X(1), ..., X(8) AND THE CALCULATED ENERGIES ARE CHANGED
C CORRESPONDINGLY.
C
      IF (IFFIT.EQ.0) GOTO 8
        FACFIT = EFIT/THENE(NUMFIT)

      DO 5 I=1,8
        X(I) = X(I) * FACFIT
    5 CONTINUE
        X(7) = X(7) /FACFIT**2

      DO 7 I=1,NUMEN
        THENE(I) = THENE(I) * FACFIT
    7 CONTINUE
    8 CONTINUE

C
C THE WEIGHTING OF THE SEVERAL COMPONENTS F(I) SHOULD BE ADJUSTED TO
C THE SPECIAL PROPERTIES OF EACH NUCLEUS.
C
C FIT OF THE EXPERIMENTAL ENERGY DATA:
C
      DO 10 I=1,NUMEN
        IF ( ABS(EXEN(I)).LT.1E-05) GOTO 10
        F(I) =  40. * (EXEN(I)  - THENE(I)) / EXEN(I)
   10 CONTINUE
C
C FIT OF THE EXPERIMENTAL B(E2) DATA:
C
      DO 20 I= 1,NUMBE2

      IF (EXBE2(I).GE.0.3) THEN
           F(NUMEN  + I) =
     &100.*(EXBE2(I)  -
     &      BE2FIT(NEXBE2(I,1),LEXBE2(I,1),NEXBE2(I,2),LEXBE2(I,2))
     &     ) / EXBE2(I)
      ELSE IF (EXBE2(I).LT.0.05) THEN
           F(NUMEN + I ) =
     &100.*( EXBE2(I) -
     &       BE2FIT(NEXBE2(I,1),LEXBE2(I,1),NEXBE2(I,2),LEXBE2(I,2))
     &     )
      ELSE
          F(NUMEN + I ) =
     &20.*(LOG( EXBE2(I) ) -
     &     LOG(BE2FIT(NEXBE2(I,1),LEXBE2(I,1),NEXBE2(I,2),LEXBE2(I,2)))
     &    )
      END IF

   20 CONTINUE

C
C FIT OF THE EXPERIMENTAL QUADRUPOLE VALUES:
C
      DO 30 I=1 ,NUMQ
          F(NUMEN + NUMBE2 + I ) =
     &     (  ( EXQ(I)-QFIT(NEXQ(I),LEXQ(I)) ) /EXQ(I) )
   30 CONTINUE

C
C FIT OF THE EXPERIMENTAL QUADRUPOLE VALUES:
C
      DO 40 I=1,NUMDIF
        DIFFIT(I) =  THENE(NEXDIF(I,2)) - THENE(NEXDIF(I,1))
        F(NUMEN+NUMBE2+NUMQ+I) = 30. * (EXDIF(I)-DIFFIT(I)) / EXDIF(I)
   40 CONTINUE
C
      IF (IFPLOT.EQ.1) THEN
C
C CUTS THROUGH THE POTENTIAL ENERGY SURFACE ARE PLOTTED
C
       CALL PLOT(X,6)
      END IF

      RETURN
      END

C***********************************************************************

C***********************************************************************

      SUBROUTINE ENERG(X,LMIN,LMAX,NPH,NENEIV)
C
C
C  PURPOSE:
C
C THE SUBROUTINE ENERG CALCULATES THE HAMILTONMATRIX. A
C DIAGONALIZATION IS PERFORMED WITHIN A CALLED SUBROUTINE.
C INPUT ARE THE ARGUMENTS AND THE MATRICES OF RADIAL (RADAN) AND ANGULAR
C (RWS) MATRIXELEMENTS. OUTPUT ARE ENERGY EIGENVALUES AND
C DIAGONALIZATION COEFFICIENTS.
C
C   ARGUMENTS:
C              X           : POTENTIAL AND MASS PARAMETERS
C              LMIN        : MIMINUM ANGULAR MOMENTUM
C              LMAX        : MAXIMUM ANGULAR MOMENTUM
C              NPH         : PHONON NUMBER
C              NENEIV      : NUMBER OF (LOWEST) ENERGY EIGENVALUES
C
C  FIELDS READ:
C              RWS         : FIELD OF ANGULAR MATRIXELEMENTS
C                            (VIA CALL OF SUBROUTINE READA)
C
C  FIELDS WRITTEN:
C         DIAGCO    : DIAGONALIZATION COEFFICIENTS TO FILE 30
C              W    : LOWEST NENEIV ENERGY EIGENVALUES TO FILE 06
C


      INTEGER IA(400),IR(400),IRO
      INTEGER LEXEN(30),               LEXBE2(30,2), LEXQ(30)
      INTEGER NEXEN(30), NEXDIF(30,2), NEXBE2(30,2), NEXQ(30)
      INTEGER IFAM(0:10),LRWS(0:10)

      REAL EXEN(30),EXDIF(30),EXBE2(30),EXQ(30),X(8),THENE(30)
      REAL RADAN(256,256,8),RWS(0:90,0:90,0:2,0:10),V(2:8,0:2)
      REAL H(90000),W(90000),DIAGCO(400,20)

      COMMON /EXPDAT/ LEXEN,         LEXBE2, LEXQ,
     &                NEXEN, NEXDIF, NEXBE2, NEXQ,
     &                 EXEN,  EXDIF,  EXBE2,  EXQ,
     &                NUMEN, NUMDIF, NUMBE2, NUMQ

      COMMON /THDAT/ THENE

      COMMON /BASIS/ B2S,C2S
      COMMON /FLAG/  IFAM,LRADAN,LRWS,IFEB,IFBASE,IFPLOT,LRADQ
      COMMON /FIXED/ HBAR,PI
C
C-----------------------------------------------------------------------
C PARAMETER OF COMMON-BLOCK ME
C
C RADAN(#1,#2,RHO): BETA MATRIXELEMENTS BETWEEN STATE #1 AND #2 FOR
C                   BETA**RHO
C RWS(#1,#2,MUE,L): POTENTIAL MATRIXELEMENTS OF THE GAMMA AND EULER
C                   ANGLE DEPENDENT PART BETWEEN STATES #1 AND #2 FOR
C                   (COS(3*GAMMA))**MUE AND ANGULAR MOMENTUM L.
C-----------------------------------------------------------------------
C
      COMMON /ME/ RADAN, RWS

C-----------------------------------------------------------------------
C IMPORTANT VARIABLES:
C
C      V(I1,I2): STORES THE COEFFIENTS OF THE POTENTIAL TERM WHICH HAS
C                HAS THE FORM  BETA**I1 * (COS(3*GAMMA))**I2
C      H (   ) : STORING THE HAMILTON MATRIX IN SYMMETRIC STORAGE MODE.
C      W (   ) : STORING THE ENERGY EIGENVALUES
C DIAGCO(I1,I2): DIAGONALIZATION COEFFICIENT #I1 OF STATE #I2.
C
C
C SETTING  V TO ZERO:
      DO 25 I1=0,2
        DO 25 I2=2,6
           V(I2,I1)=0.
   25 CONTINUE
C
C
C IF IFBASE=0 NEW BASIS PARAMETERS ARE TO BE CALCULATED
C
      IF (  ((IFBASE.EQ.0).AND.(IFEB.NE.4)) .OR. (IFEB.EQ.4)  ) THEN
        CALL SMIN(NPH,X)
      END IF
C
C DETERMINATION OF POTENTIAL COEFFICIENTS (SEE ARTICLE):
C
      V(2,0) = X(1)/SQRT(5.)
      V(3,1) = -SQRT(2./35.)*X(2)
      V(4,0) = X(3)/5.
      V(5,1) = -SQRT(2./175.) * X(4)
      V(6,2) = 2./35.* X(5)
      V(6,0) = X(6)/5./SQRT(5.)
      B2     = 2./SQRT(5.)*X(7)
      P2    = HBAR*SQRT(B2S*C2S)/B2
      P3    = -SQRT(2./35.) * SQRT(HBAR**3 * SQRT(B2S*C2S)) * X(8)/3.
C
C IF THE FITTING OPTION IS SELECTED THE OUTPUT IS OMITTED:
C
      IF (IFEB.EQ.4) GOTO 30
C
        WRITE(6,*) ('*',I=1,90)
        WRITE(6,*)
        WRITE(6,*) ('*',I=1,90)
        WRITE(6,2000) LMIN, LMAX ,NPH,NENEIV,X(7),X(8)
 2000 FORMAT(//
     &'  THE PARAMETER OF THIS DIAGONALIZATION RUN ARE:'///
     &'  ANGULAR MOMENTUM MINIMUM:',I3//
     &'  ANGULAR MOMENTUM MAXIMUM:',I3//
     &'  PHONON NUMBER:',I3//
     &'  NUMBER OF THE LOWEST ENERGY EIGENVALUES PER A.M. PRINTED:',I3/
     &/'  MASS PARAMETER:  B2 = ',E14.7,'  P3 = ',E14.7///
     &'  POTENTIAL PARAMETERS:'/)
      WRITE(6,2010) X(1),X(2),X(3),X(4),X(5),X(6)
 2010 FORMAT('  C2 = ',E14.7,'    C3 = ',E14.7,'    C4 =',E14.7/
     &       '  C5 = ',E14.7,'    C6 = ',E14.7,'    D6 =',E14.7/)
      WRITE(6,2020) B2S,C2S
 2020 FORMAT('  THE BASIS PARAMETERS ARE:'//
     & '  B2S =',E14.7,' C2S = ',E14.7/)
C
   30 CONTINUE
C
C RESCALING OF POTENTIALPARAMETERS DUE TO THE BASIS PARAMETERS
C B2S (MASS) AND C2S (STIFFNESS).
C
      DO 35 K1=0,2
      DO 35 K2=2,6
        V(K2,K1)=V(K2,K1) * SQRT(HBAR/SQRT(B2S*C2S))**K2
   35 CONTINUE
C
C LRADAN IS THE FLAG CONTROLLING IF RADAN IS YET CALCULATED.
C
      IF (LRADAN.EQ.0) THEN
        CALL RADME(1,6)
      END IF
C
C IN CASE OF FITTING REWIND THE DIAGONALIZATION COEFFICIENT STORAGE:
C
      IF (IFEB.EQ.4) REWIND(30)

C + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
C BEGIN OF DO-LOOP CHANGING ANGULAR MOMENTUM.
C
      DO 45 LQ1=LMIN,LMAX
        IF(LQ1.EQ.1) GO TO 45
C
C READING OF THE ANGULAR MATRIXELEMENTS. LRWS(LQ1) IS THE FLAG
C CHECKING IF THE ANGULAR MATRIXELEMENTS RWS( , , ,LQ1) ARE READ.
C
      IF (LRWS(LQ1).EQ.0) THEN
        CALL READA(LQ1)
      END IF

      IF ((IFAM(LQ1).EQ.0).AND.(IFEB.EQ.4)) GOTO 45
C
C IAIR CALCULATES THE RADIAL AND ANGULAR INDICES.
C
      CALL IAIR(IA,IR,LQ1,NPH,IMAX)
C    IA = FIELD STORING THE ANGULAR INDEX OF THE FIRST STATE
C    IR = FIELD STORING THE RADIAL INDEX OF THE FIRST STATE
C   LQ1 = MOMENTARY ANGULAR MOMENTUM
C   NPH = PHONON NUMBER
C  IMAX = NUMBER OF POSSIBLE STATES

C
C SETTING H EQUAL ZERO.
C
      DO 50 I=1,IMAX*(IMAX+1)/2
        H(I)=0.
   50 CONTINUE

C MUE IS THE EXPONETIAL OF COS(3.*GAMMA)
      DO 60 MUE=0,2
C
C  2 <= IRO <=6 : EXPONENT OF BETA
C       IRO = 7 : BETA MATRIXELEMENTS OF THE B2-KINETIC ENERGY
C       IRO = 8 : BETA MATRIXELEMENTS OF THE P3-KINETIC ENERGY
C
        DO 80 IRO=2,8
C
          IF ((IRO.EQ.7).AND.(MUE.NE.0)) GO TO 80
          IF ((IRO.EQ.8).AND.(MUE.NE.1)) GO TO 80
          IF ((ABS(V(IRO,MUE)).LT.1.E-5).AND.(IRO.LT.7)) GO TO 80
C
C CALCULATION OF THE MATRIXELEMENTS OF THE HAMILTONMATRIX
C IN SYMMETRIC STORAGE MODE
C
          DO 90 I=1,IMAX
          DO 90 IS=1,I
            IND=I*(I-1)/2+IS
           IF(IRO.EQ.7) THEN
             H(IND) = H(IND)
     &       + P2 * RWS(IA(I),IA(IS),MUE,LQ1)*RADAN(IR(I),IR(IS),IRO)
           ELSE IF(IRO.EQ.8) THEN
             H(IND) = H(IND)
     &       + P3 * RWS(IA(I),IA(IS),MUE,LQ1)*RADAN(IR(I),IR(IS),IRO)
           ELSE
             H(IND) = H(IND)
     &     +V(IRO,MUE)*RWS(IA(I),IA(IS),MUE,LQ1)*RADAN(IR(I),IR(IS),IRO)
           END IF
   90     CONTINUE
   80   CONTINUE
   60 CONTINUE
C
C PROGRAMM FOR THE DIAGONALIZATION OF A SYMMETRIC MATRIX.
C
C     H : MATRIXELEMENTS OF THE HAMILTONIAN IN SYMMETRIC STORAGE MODE.
C     W : OUTPUT VECTOR STORING THE ENERGY EIGENVALUES IN ASCENDING
C         ORDER.
C DIAGCO: OUTPUT FIELD STORING THE DIAGONALIZATION COEFFICIENTS.
C   IMAX: BASIS DIMENSION
C NENEIV: NUMBER OF EIGENVALUES TO BE CACULATED.
C  IDIAG: ROW DIMENSION OF DIAGCO
      IDIAG = 400
C
      CALL GIVENS(H,W,DIAGCO,IMAX,NENEIV,IDIAG)
C
C GROUNDSTATE ENERGY = E0
C
      IF (LQ1.EQ.0) E0=W(NENEIV)
C
C SUBSTRACTING E0 FROM EVERY ENERGY EIGENVALUE
C
      DO 95 I=1,NENEIV
        W(I)=W(I)-E0
   95 CONTINUE
C
C WRITING OF EIGENVALUES AND EIGENVECTORS IF (IFEB.NE.4) IS TRUE
C
      IF (IFEB.EQ.4) GOTO 105
       IF (LQ1.EQ.0) THEN
         WRITE(6,2070)E0
       END IF
 2070 FORMAT(/'  THE CALCULATED GROUNDSTATE ENERGY EQUALS:',E14.7/)
C
      WRITE(6,*)
      WRITE(6,*) ('* ',I=1,40)
      WRITE(6,2050) LQ1,NENEIV
 2050 FORMAT(
     &/'  ENERGY OUTPUT FOR ANGULAR MOMENTUM L =',I3,':'//
     &'  THE',I3,
     &' LOWEST ENERGY EIGENVALUES ARE (IN DESCENDING ORDER):'
     & //)
C
C NENEIV IS THE NUMBER OF ENERGY EIGENVALUES TO BE CALCULATED
C
      DO 100 I=1,NENEIV,4
        ILIM = 3
        IF (NENEIV-I.LE.3) ILIM=NENEIV-I
        WRITE(6,2060) I,I+ILIM,(W(I+II),II=0,ILIM)
  100 CONTINUE
 2060 FORMAT('  EIGENVALUE NUMBER ',I2,'->',I2,':',4E14.7)
C
  105 CONTINUE
C
C WRITING DIAGONALIZATION COEFFICIENTS ON FILE 30
C
      DO 110 I1=1,NENEIV
        DO 110 I2=0,395,5
        WRITE(30,2040) (DIAGCO(I3+I2,I1),I3=1,5)
  110 CONTINUE
 2040 FORMAT(5E14.7)
C
C WRITING CACULATED ENERGIES TO THENE
C
      ITHENE = 0
      DO 120 I1=1,NUMEN
        IF (LQ1.EQ.LEXEN(I1)) THEN
          ITHENE= ITHENE + 1
          THENE(I1) = W(NENEIV - ITHENE + 1)
        END IF
  120 CONTINUE
C
   45 CONTINUE

      END
C
C **********************************************************************
      SUBROUTINE RADME(MINBET,MAXBET)
C **********************************************************************
C
C
C  THIS SUBROUTINE CALCULATES THE RADIAL MATRIXELEMENTS NEEDED FOR THE
C  CALCULATION OF HAMILTON- AS WELL AS QUADRUPOLEMATRIXELEMENTS.
C  THE FORMULA USED HERE IS DESCRIBED IN THE ARTICLE.
C
C  ARGUMENTS:
C          MINBET: MINIMUM EXPONENTIAL OF BETA
C          MAXBET: MAXIMUM EXPONENTIAL OF BETA
C
C  IMPORTANT VARIABLES:
C      RADAN(I1,I2,I3): STORES THE RADIAL MATRIXELEMENT BETWEEN THE
C                       STATES WITH RADIAL QUANTUM NUMBERS I1 AND I2
C                       AND
C                           BETA**I3,   IF  1 < I3 < 6
C                           BETA**2,    IF  I3 = 7
C                           BETA**3,    IF  I3 = 8
C                       INCLUDING THE PROPER SELECTION RULES FOR
C                       LAST TWO TERMS DUE TO THE KINETIC ENERGY.
C
C     RWS(I1,I2,I3,I4): STORES THE ANGULAR MATRIX ELEMENTS BETWEEN THE
C                       STATES I1 AND I2 FOR ANGULAR MOMENTUM I4 AND AN
C                       OPERATOR OF THE TYPE COS(3*GAMMA)**I3
C
C
      REAL RADAN(256,256,8),RWS(0:90,0:90,0:2,0:10)
      INTEGER IFAM(0:10), LRWS(0:10)

      COMMON /ME/ RADAN,RWS
      COMMON /FLAG/  IFAM,LRADAN,LRWS,IFEB,IFBASE,IFPLOT,LRADQ
      COMMON /GAMDAT/ IFGAM
C
C  DIMENSION OF THE RADIAL MATRIX TO BE CALCULATED.
C (THE MAXIMUM VALUE NEEDED IS MAXDIM = 256).
C
      IFGAM = 0
      MINDIM= 1
      MAXDIM= 256
C
C INITIALIZING RADAN
C
      DO 10 INDEX0 = 1,8
      DO 10 INDEX1 = MINDIM, MAXDIM
      DO 10 INDEX2 = MINDIM, MAXDIM

      RADAN(INDEX2,INDEX1,INDEX0) =0.

   10 CONTINUE

      DO 120 IRHO = MINBET,MAXBET
C
C MINBET, MAXBET ARE THE MINIMUM AND MAXIMUM VAULES FOR THE EXPONENTIAL
C OF BETA. (2,6) ARE NEEDED FOR THE POTENTIAL AND (1,2) ARE NEEDED FOR
C THE QUADRUPOLEOPERATOR.
C
      RHO = REAL(IRHO)
C
C RHO AND IRHO ARE DIFFERENT VARIABLE TYPES FOR THE EXPONENTIAL OF BETA
C
      DO 100 INDEX1=MINDIM,MAXDIM
      DO 100 INDEX2=1,INDEX1
C
C INDEX1 (INDEX2) ARE THE RADIAL INDICES OF THE LEFT (RIGHT) HANDED KET
C OF THE RADIAL MATRIXELEMENTS. BECAUSE OF THE SYMMETRY OF THE
C MATRIXELEMENTS WE CALCULATE ONLY DIM*(DIM+1)/2 (DIM MEANS DIMENSION).
C
C DEFINITION OF SOME ABBREVIATIONS:
C
      IHLP1  = INT( SQRT(REAL (INDEX1-1)) + SQRT(REAL(INDEX1)) )
      IHLP2  = INDEX1 - (IHLP1 * IHLP1 -1)/4. + ((-1)**(IHLP1 -1) -1)/8.

      IHLP1S = INT (SQRT(REAL (INDEX2-1)) + SQRT (REAL(INDEX2)) )
      IHLP2S = INDEX2 - (IHLP1S*IHLP1S -1)/4. + ((-1)**(IHLP1S-1) -1)/8.
C
C  NUE (NUES) IS THE PHONONNUMBER, LMBD (LMBDS) CORRESPONDS TO LAMBDA
C  AND NOTP(NOTPS) IS THE NUMBER OF PAIRWISE  TO A.M. ZERO COUPLED
C  PHONONS FOR THE LEFT (RIGHT) HAND SIDE STATE
C
      NUE   = IHLP1 - 1
      LMBD  = 2 * (IHLP2-1) + MOD(IHLP1 - 1, 2)
      NOTP  = (NUE - LMBD)/2

      NUES  = IHLP1S-1
      LMBDS = 2*(IHLP2S-1) + ((IHLP1S-1)/2. - (IHLP1S-1)/2)*2
      NOTPS = (NUES- LMBDS)/2

C
C SELECTION RULES (ALL SELECTION RULES ARE GIVEN IN THE ARTICLE)
C
      IDN = IABS(NUE  - NUES )
      IDL = IABS(LMBD - LMBDS)

      IF  (IDL.GT.IRHO) GOTO 100
      IF  (IDN.GT.IRHO) GOTO 100
      IF  (MOD(IDN,2).NE.MOD(IDL,2)) GOTO 100
      IF ((MOD(IRHO,2).EQ.0).AND.(MOD(IDN,2).NE.0)) GOTO 100
      IF ((MOD(IRHO,2).NE.0).AND.(MOD(IDN,2).EQ.0)) GOTO 100
      IF ((IRHO.EQ.4).AND.(IDL.NE.0)) GOTO 100
      IF ((IRHO.EQ.5).AND.(IDL.EQ.5)) GOTO 100
C
C  DETERMINING THE BOUNDS OF SUMMATION. THERE ARE TWO POSSIBILITIES:
C
      IF (IABS(LMBD-LMBDS).GT.IRHO) GOTO 20
C
C  IS 1/2*(IRHO + LMBDS - LMBD ) INTEGER OR HALF-INTEGER VALUED ?
C
      IF (MOD(IRHO+LMBDS-LMBD,2).EQ.0) THEN
C
C  (THUS ( IRHO + LMBDS - LMBD )/2 IS AN INTEGER.)
C
C IMIN, IMAX ARE THE LOWER AND UPPER BOUND OF SUMMATION.
C
        IMIN =
     &         MAX( NOTP - (IRHO + LMBDS - LMBD )/2 ,
     &              NOTPS - (IRHO + LMBD - LMBDS)/2 , 0 )
C
        IMAX = MIN(NOTP,NOTPS)
      ELSE
C
C  ( IRHO + LMBDS - LMBD )/2. IS HALF INTEGER VALUED.
C
        IMIN = 0
        IMAX = MIN(NOTP,NOTPS)
      END IF
C
C  DEFINITION OF THE PREFACTOR:
C
      PREFAC = 1./2.*(   GAMMAL(NOTP  + 1.)
     &                 + GAMMAL(NOTPS + 1.)
     &                 - GAMMAL(NOTP  + LMBD  + 2.5)
     &                 - GAMMAL(NOTPS + LMBDS + 2.5) )
C
C DEFINITIONS OF ABREVIATIONS:
C
      DEF1 = REAL( IRHO + LMBDS - LMBD ) /2.
      DEF2 = REAL( IRHO + LMBD  - LMBDS) /2.
C
      SUM=0.
C
C ISIGMA IS THE INTEGER SUMMATION INDEX (THE SAME AS IN THE ARTICLE)
C
      DO 200 ISIGMA = IMIN,IMAX
C
C DEFINITION OF TWO SIGNS
C
      SIGN1 =   SIGGAM( ISIGMA + DEF1 - NOTP +1.)
C
      SIGN2 =   SIGGAM( ISIGMA + DEF2 - NOTPS +1.)
C
C
C
      SUM =     GAMMAL(  ISIGMA + (IRHO+LMBD+LMBDS+5.)/2.    )
     &        - GAMMAL(  ISIGMA         + 1.                 )
     &        - GAMMAL( -ISIGMA + NOTP  + 1.                 )
     &        - GAMMAL( -ISIGMA + NOTPS + 1.                 )
     &        - GAMMAL(  ISIGMA - NOTP  + 1. + DEF1          )
     &        - GAMMAL(  ISIGMA - NOTPS + 1. + DEF2          )
C
      SUM = SUM + GAMMAL(DEF1+1.) + GAMMAL(DEF2+1.) + PREFAC
C
 200  RADAN(INDEX1,INDEX2,IRHO) =
     &                 RADAN(INDEX1,INDEX2,IRHO) +
     &                 SIGN1 * SIGN2 * EXP(SUM) * (-1)**(NOTP + NOTPS)
C
      GOTO 30

C-----------------------------------------------------------------------
C***********************************************************************
C-----------------------------------------------------------------------

C THE NEXT KIND OF SUMMATION IS CHOSEN IF (IABS(LMBD-LMBDS).GT.IRHO) IS
C TRUE.
C
C
  20  CONTINUE
C
C BECAUSE THE MATRIXELEMENTS ARE SYMMETRIC WE CAN CHOOSE LMBDS TO BE
C LARGER THAN LMBD AND MUST IF SO EXCHANGE THE OTHER QUANTUM NUMBERS
C TOO
C
      IF (LMBD.GT.LMBDS) THEN

      MEMORY = LMBD
      LMBD   = LMBDS
      LMBDS  = MEMORY

      MEMORY = NOTP
      NOTP   = NOTPS
      NOTPS  = MEMORY

      MEMORY = NUE
      NUE    = NUES
      NUES   = MEMORY

      END IF
C
C
C DETERMINATION OF THE BOUNDS OF SUMMATION:
C
C
      IF (MOD(IRHO+LMBDS-LMBD,2).EQ.0) THEN
C
C  THUS ( IRHO + LAMBDAS - LAMBDA )/2 IS INTEGER VALUED:
C
      IMIN = MAX(NOTP - (IRHO + LMBDS -LMBD)/2,0)
      IMAX = MIN(NOTP,NOTPS)

      ELSE
C
C         IRHO + LAS - LA )/2  IS HALF INTEGER VALUED:
C
      IMIN = 0
      IMAX = MIN(NOTP,NOTPS)

      END IF
C
C ----------------------------------------------------------------------
C
      PREFAC = 0.5 * (    GAMMAL(NOTP  + 1.         )
     &                  + GAMMAL(NOTPS + 1.         )
     &                  - GAMMAL(NOTP + LMBD  + 2.5 )
     &                  - GAMMAL(NOTPS+ LMBDS + 2.5 ) )

C
C DEFINITION OF SOME USEFUL ABREVIATIONS:
C
      DEF1 = REAL( LMBDS - LMBD + IRHO )
      DEF2 = REAL( LMBDS - LMBD - IRHO )
C
      SUM = 0.
      DO 210 ISIGMA = IMIN,IMAX

      SIGN1 = SIGGAM( DEF2/2. + NOTPS - ISIGMA )
C
      SIGN2 = SIGGAM( ISIGMA + DEF1/2. - NOTP +1. )
C

      SUM =   GAMMAL(  ISIGMA + (RHO + LMBD + LMBDS +5.)/2.   )
     &      - GAMMAL(  ISIGMA         + 1.                    )
     &      - GAMMAL( -ISIGMA + NOTP  + 1.                    )
     &      - GAMMAL( -ISIGMA + NOTPS + 1.                    )
     &      + GAMMAL( -ISIGMA + NOTPS      + DEF2/2.          )
     &      - GAMMAL(  ISIGMA - NOTP  + 1. + DEF1/2.          )
C
      SUM = SUM + GAMMAL( DEF1/2. +1. )
     &          - GAMMAL( DEF2/2.     ) + PREFAC
      RADAN(INDEX1,INDEX2,IRHO) =
     &            RADAN(INDEX1,INDEX2,IRHO) +
     &            SIGN1 * SIGN2 * EXP(SUM) * (-1)**(NOTP+ISIGMA)

  210 CONTINUE
C
   30 CONTINUE
C
C=======================================================================
C=======================================================================
C
C CALCULATION OF THE KINETIC ENERGY RADIAL MATRIXELEMENTS.
C
C THE FACTORS APPEAR DUE TO THE FACT THAT MATRIXELEMENTS OF THE
C MOMENTUM OPERATOR (PI) ARE CALCULATED
C
C
C FIRST ORDER KINETIC ENERGY:
C
      IF ((IRHO.EQ.2).AND.(IDL.EQ.0)) THEN
      RADAN(INDEX1,INDEX2,7)= 0.5 * RADAN(INDEX1,INDEX2,2)*(-1)**(IDN/2)
      RADAN(INDEX2,INDEX1,7)=       RADAN(INDEX1,INDEX2,7)
      END IF
C
C SECOND ORDER KINETIC ENERGY:
C
      IF (IRHO.EQ.3) THEN

        IF (IDN.EQ.3) THEN
          RADAN(INDEX1,INDEX2,8) = -3. * RADAN(INDEX1,INDEX2,3)
          RADAN(INDEX2,INDEX1,8) = RADAN(INDEX1,INDEX2,8)
        ELSE IF (IDN.EQ.1) THEN
          RADAN(INDEX1,INDEX2,8) =       RADAN(INDEX1,INDEX2,3)
          RADAN(INDEX2,INDEX1,8) = RADAN(INDEX1,INDEX2,8)
        END IF

      END IF

      RADAN(INDEX2,INDEX1,IRHO) = RADAN(INDEX1,INDEX2,IRHO)

  100 CONTINUE

  120 CONTINUE
C
C LRADAN IS A FLAG DENOTING THAT THE RADIAL MATRIXELEMENTS WERE
C CALCULATED.
C
      LRADAN = 1


      RETURN
      END
C
C-----------------------------------------------------------------------
C-----------------------------------------------------------------------
C
      FUNCTION GAMMAL(X)
C
C GAMMAL CALCULATES THE LOGARITHM OF THE GAMMA FUNCTION.
C THE LOGRITHM OF THE GAMMA FUNCTION ARE STORED IN THE FIELD GAMLOG,
C E.G.,
C      GAMMA FUNCTION VALUE OF 1.   --> GAMLOG(102)
C      GAMMA FUNCTION VALUE OF -0.5 --> GAMLOG( 99)
C      GAMMA FUNCTION VALUE OF +0.5 --> GAMLOG(103)
C AND IN GENERAL,
C
C GAMMA FUNCTION OF X --> GAMLOG( 2*X + 100).
C

      REAL GAMLOG(300)
C
C THE COMMON BLOCK GAMDAT STORES THE FLAG IFGAM DENOTING IF GAMMA VALUES
C HAVE ALREADY BEEN CALCULATED IN THIS RUN (IFGAM=1) OR NOT (IFGAM=0).
C
      COMMON /GAMDAT/ IFGAM

      SAVE GAMLOG

      IF (IFGAM.EQ.0) THEN

      GAMLOG(102) = 0.
      GAMLOG(101) = LOG(1.772454)

      DO 10 I = 104,200,2
        GAMLOG(I) = LOG( I-102. ) + GAMLOG( I-2 ) - LOG(2.)
   10 CONTINUE

      DO 20 I = 103,199,2
        GAMLOG(I) = LOG( I-102. ) + GAMLOG( I-2 ) - LOG(2.)
   20 CONTINUE

      DO 30 J = 1,99,2
        I = 100 - J
        GAMLOG(I) = GAMLOG(I+2) + LOG(2.) - LOG( ABS( I-100.) )
   30 CONTINUE

      IFGAM = 1

      END IF
C
      GAMMAL = GAMLOG( NINT(2 * X) + 100 )
       END
C
C -------------------------------------------------------------------
C
      FUNCTION SIGGAM(X)
C
C THIS FUNCTION ROUTINE DETERMINES THE SIGN OF THE GAMMA FUNCTION.
C (IMPORTANT FOR NEGATIVE HALF INTEGER ARGUMENTS.)
C
      SIGGAM = 1.
       IF (X.LT.0.) THEN
         SIGGAM = REAL( - (-1)**NINT( ABS(X) - 0.5 ) )
       END IF
      END

C **********************************************************************
C **********************************************************************
C
      SUBROUTINE READA(LQ1)
C
C PURPOSE:
C THIS SUBROUTINE READS THE ANGULAR MATRIXELEMENTS FROM FILE 21, I.E.
C THE MATRIXELEMENTS OF THE OPERATOR (COS(3*GAMMA))**MUE
C
C ARGUMENT:
C      LQ1: THE MAXIMAL ANGULAR MOMENTUM UNTIL WHICH THE MATRIXELEMENTS
C           ARE READ.
C
C***********************************************************************

      REAL RADAN(256,256,8),RWS(0:90,0:90,0:2,0:10)
      INTEGER IFAM(0:10),LRWS(0:10)
      INTEGER INDEX1(3),INDEX2(3)
C
C  THE COMMMON BLOCKS AND ITS VARIABLES ARE EXPLAINED IN PROGRAMS
C  HEAD AND ENERG RESPECTIVELY.
C
      COMMON /ME/    RADAN,RWS
      COMMON /FLAG/  IFAM,LRADAN,LRWS,IFEB,IFBASE,IFPLOT,LRADQ
C
C THE MAXIMUM DIMENSION IMAX OF INPUT FIELDS DEPENDS ON THE ANGULAR
C MOMENTUM LQ1
C
      IMAX = 50
      IF (LQ1.GE.6) IMAX = 90

      DO 10 I3=0,2
C
C INITIALIZING RWS BY SETTING EQUAL ZERO:
C
         DO 20 I2=1,IMAX
         DO 20 I1=1,IMAX
            RWS(I1,I2,I3,LQ1)=0.
   20    CONTINUE
C
C MEANING OF INDICES IN THE DO-LOOPS:
C               I: DUMMY VARIABLE
C   INDEX1,INDEX2: INDICES OF LEFT AND RIGHT HANDED STATES IN THE
C                  ANGULAR MATRIXELMENTS.
C              I3: EXPONENTIAL OF THE OPERATOR (COS(3*GAMMA))**MUE
C
   40    READ(21,2000)
     &   (INDEX1(I),INDEX2(I),RWS(INDEX1(I),INDEX2(I),I3,LQ1),I=1,3)
C
C EQUALIZING MATRIXELEMENTS WITH EXCHANGED INDICES:
C
         DO 30 I=1,3
             RWS(INDEX2(I),INDEX1(I),I3,LQ1) =
     &       RWS(INDEX1(I),INDEX2(I),I3,LQ1)
   30    CONTINUE
C
C IF THERE WAS NO ZERO MATRIXELEMENT RETURN TO GO ON READING:
         IF (INDEX1(3).NE.0) GOTO 40
C
   10 CONTINUE
C
C SETTING THE FLAG LRWS STORES THAT RWS WAS READ FOR ANGULAR MOMENTUM
C LQ1.
      LRWS(LQ1) = 1
C
 2000 FORMAT( 3(2I3,2X,E14.7) )
      RETURN
      END
C
C***********************************************************************
C***********************************************************************
C
      SUBROUTINE SMIN(NPH,X)
C
C
C PURPOSE:
C
C    IN SMIN ARE THE BASIS PARARMETERS ADJUSTED TO YIELD THE LOWEST
C    SUM OF THE FIRST NUM MAIN DIAGONAL MATRIXELEMENTS. A METHOD WHICH
C    YIELDS RATHER EXACTLY THE SAME RESULTS AND IS MUCH FASTER THAN
C    THE DETERMINATION OF C2S, B2S BY MINIMIZING ENERGY EIGENVALUES.
C    (FOR FURTHER REMARKS SEE CHAPTER ABOUT SMIN IN THE ARTICLE.)
C
C***********************************************************************

      INTEGER IA(400),IR(400), IFAM(0:10),LRWS(0:10)
      REAL V(2:7,0:2),X(8),RWS(0:90,0:90,0:2,0:10),RADAN(256,256,8)
C
C FOR EXPLANATION OF COMMON BLOCKS BASIS,FLAG AND FIXED SEE SUBROUTINE
C HEAD AND FOR COMMON BLOCK ME SEE SUBROUTINE ENERG:
C
      COMMON /BASIS/ B2S,C2S
      COMMON /FLAG/  IFAM,LRADAN,LRWS,IFEB,IFBASE,IFPLOT,LRADQ
      COMMON /FIXED/ HBAR,PI
      COMMON /ME/ RADAN,RWS
C
C SETTING THE FLAG LRADQ EQUAL ZERO:
      LRADQ = 0
C THE BASIS MASS PARAMETER IS SET EQUAL TO THE INPUT MASS PARAMETER:
      B2S  = X(7)
C
C SUMMIN (THE MINIMUM VALUE OF SUM) IS SET TO A GREAT NUMBER:
      SUMMIN = 10.**30
C
C IN IAIR INDICES ARE CALCULATED:
C
      CALL IAIR(IA,IR,0,NPH,IMAX)
C    IA = FIELD STORING THE ANGULAR INDEX OF THE FIRST STATE
C    IR = FIELD STORING THE RADIAL INDEX OF THE FIRST STATE
C    0  = MOMENTARY ANGULAR MOMENTUM
C   NPH = PHONON NUMBER
C  IMAX = NUMBER OF POSSIBLE STATES
C
C CALCULATING THE RADIAL MATRIXELEMENTS IN RADME:
C
      IF (LRADAN.EQ.0) THEN
        CALL RADME(1,6)
      END IF
C
C READING OF ANGULAR MATRIXELEMENTS IN READA:
C
      IF (LRWS(0).EQ.0) THEN
        CALL READA(0)
      END IF
C
C S IS SUCCESSIVELY INCREASED UNTIL THE MINIMUM:
C  (IN CASE OF FAILURE ONE SHOULD CHANGE BOUNDARIES OF THE FOLLOWING
C   DO-LOOP)
C
      DO 10 S =7.,40.,0.5
C
C SUM IS THE SUM OF DIAGONAL MATRIXELEMENTS WHICH IS TO BE MINIMIZED.
      SUM = 0.
C
C S**4 = C2S*B2S / HBAR**2
C
      C2S = HBAR**2 * S**4/B2S
C
C     CALCULATING THE EXPONENTIAL V(IRHO,MUE) FROM INPUT PARAMETER
C     FIELD X, WITH IRHO THE EXPONENTIAL OF BETA AND MUE THE EXPONENTIAL
C     OF COS(3*GAMMA).
C     (MATRIXELEMENTS PROPORTIONAL P3 VANISH ON THE DIAGONAL)
C
      P2     = HBAR * SQRT(B2S*C2S) * SQRT(5.) /2. / X(7)
      V(2,0) = X(1)/SQRT(5.)       * SQRT(HBAR/SQRT(B2S*C2S))**2
      V(3,1) = -SQRT(2./35.)*X(2)  * SQRT(HBAR/SQRT(B2S*C2S))**3
      V(4,0) = X(3)/5.             * SQRT(HBAR/SQRT(B2S*C2S))**4
      V(5,1) = -SQRT(2./175.)*X(4) * SQRT(HBAR/SQRT(B2S*C2S))**5
      V(6,2) = 2./35.*X(5)         * SQRT(HBAR/SQRT(B2S*C2S))**6
      V(6,0) = X(6)/5./SQRT(5.)    * SQRT(HBAR/SQRT(B2S*C2S))**6
C
C NUM IS THE NUMBER OF SUMMED DIAGONAL MATRIX ELEMETNS (SEE ARTICLE):
      NUM = 10
C
      DO 20 I = 1,NUM
      DO 20 MUE = 0,2
         DO 30 IRHO=2,7
C
C  IF IRHO EQUALS 7 (KINETIC ENERGY), MUE MUST BE ZERO:
         IF ((IRHO.EQ.7).AND.(MUE.NE.0)) GOTO 30
C
C  IF A POTENTIAL PARAMETER EQUALS ZERO IT NEED NOT TO BE USED:
         IF ((ABS(V(IRHO,MUE)).LT.1.E-5).AND.(IRHO.NE.7)) GOTO 30
C
         IF (IRHO.EQ.7) THEN
           SUM    = SUM +
     &      P2        * RWS(IA(I),IA(I),MUE,0) * RADAN(IR(I),IR(I),IRHO)
         ELSE
           SUM    = SUM +
     &    V(IRHO,MUE) * RWS(IA(I),IA(I),MUE,0) * RADAN(IR(I),IR(I),IRHO)
         END IF
C
   30    CONTINUE
   20 CONTINUE

C IF SUM INCREASES AGAIN THE MINIMUM IS FOUND AND SMIN IS LEFT:
      IF (SUMMIN.LT.SUM) GOTO 40

      SUMMIN = SUM
   10 CONTINUE

   40 CONTINUE

C
C S VALUES EXCEEDING THE RANGE (4,40) ARE NOT FOUND BY US AND SEEM
C TO BE CAUSED BY ERRORS. SO...
C
      IF  ((S.GT.50.).OR.(S.LT.4.)) THEN
        WRITE(6,2000) B2S,C2S,S
        STOP
      END IF

 2000 FORMAT(
     & '!!!!!!!!!!!!  IMPOSSIBLE VALUES FOR BASISPARAMETERS  !!!!!!!!!',
     & / ' BASIS MASS PARAMETER (B2S): ',F14.7,
     & / ' BASIS STIFFNESS PARAMETER (C2S): ',F14.7,
     & / ' S-VALUE (S**4 = C2S*B2S): ',F14.7,
     & //' CHANGING BOUNDS OF LOOP VARIABLE S AND RE-RUN MAY HELP ')

      RETURN
      END
C
C***********************************************************************
C
C***********************************************************************
      SUBROUTINE QBE2(LMINB,LMAXB,LMINE,NPH,NBQ,NENEIV,NA,NZ,BE202,X)
C
C THIS SUBROUTINE CALCULATES B(E2)-VALUES AND QUADRUPOLE MOMENTS.
C
C ARGUMENTS:
C       LMINB, LMAXB - ALL B(E2)-VALUES AND QUADRUPOLE VALUES ARE
C                      CALCULATED IN THE ANGULAR MOMENTUM INTERVAL
C                      GIVEN BY THE LOWER (LMINB) AND UPPER (LMAXB)
C                      BOUND (BOUNDARIES INCLUDED).
C              LMINE - NEEDED FOR IFEB=3 (SEE PROGRAM HEAD)
C                NPH - PHONON NUMBER
C                NBQ - NUMBER OF LOWEST STATES FOR WHICH ALL TRANSITIONS
C                      ARE CALCULATED
C             NENEIV - NUMBER OF LOWEST ENERGY EIGENVALUES = NUMBER
C                      OF LOWEST DIAGONALIZED EIGENFUNCTIONS
C                 NA - MASS NUMBER
C                 NZ - CHARGE NUMBER
C              BE202 - SQUARE ROOT OF THE EXPERIMENTAL
C                      B(E2,0,1->2,1) - VALUE
C                  X - ARROW OF POTENTIAL PARAMETERS
C
C  FIELDS READ:
C
C      DIAGCO( , , ) - DIAGONALIZATION COEFFICIENTS FROM FILE 30
C                      (CALCULATED BY SUBROUTINE ENERG)
C          QUAD( , ) - GAMMA DEPENDENT QUADRUPOLE MATRIXELEMENTS
C        QDUMMY( , ) - DUMMY VARIABLE NEEDED FOR OVEREADING OF
C                      OBSOLETE GAMMA MATRIX ELEMENTS.
C
C  IMPORTANT VARIABLES:
C
C          QVAL(#X)  - QUADRUPOLE VALUES FOR THE MOMENTARY ANGULAR
C                      MOMENTUM OF THE #X LOWEST STATE.
C         QFIT(I1,L) - QUADRUPOLE VALUE OF STATE NUMBER I1 WITH ANGULAR
C                      MOMENTUM L
C         BE2(I1,I2) - B(E2)-VALUE
C      BE2FIT(I1,L1,I2,L2)
C                    - B(E2)-VALUE NEEDED FOR FITTING FROM STATE NUMBER
C                      I1 OF ANGULAR MOMENTUM L1 TO STATE NUMBER I2
C                      OF ANGULAR MOMENTUM L2.
C           CGFAC( ) - FACTOR DEPENDING ON CLEBSCH-GORDAN COEFFICIENTS
C          SQRBAS( ) - RESCALING FACTOR DUE TO THE CHOICE OF THE BASIS
C                      PARAMETERS
C ALPH1( , ), ALPH2( , )
C                    - COEFFICIENTS NEEDED FOR THE ALPHA RESPECTIVELY
C                      ALPHA**2 DEPENDENT PART OF THE QUADRUPOLE
C                      OPERATOR.
C        RADANQ( , ) - GAMMA MATRIX ELEMENTS FOR THE QUADRUPOLE OPERATOR
C
C
      INTEGER IA1(400), IA2(400), IR1(400), IR2(400)
      INTEGER IFAM(0:10),LRWS(0:10),BFLAG
C
      REAL RADAN(256,256,8),QDUMMY(0:65,0:65),QUAD(0:65,0:65,2)
      REAL ALPH1(20,20), ALPH2(20,20), RADANQ(256,256,2),QVAL(20)
      REAL CGFAC(41),DIAGCO(400,20,3),BE2(20,20),RWS(0:90,0:90,0:2,0:10)
      REAL SQRBAS(2),X(8),BE2FIT(30,10,30,10),QFIT(30,10)

C----------------------------------------------------------------------
C  PARAMETERS OF COMMON BLOCK TRANST
C
C  THIS COMMON BLOCK STORES THE CALCULATED B(E2) (BE2FIT) AND
C  Q-VALUES NEEDED FOR FITTING EXPERIMENTAL DATA.
C
C         QFIT(I1,L) - QUADRUPOLE VALUE OF STATE NUMBER I1 WITH ANGULAR
C                      MOMENTUM L
C  BE2FIT(I1,L1,I2,L2)
C                    - B(E2)-VALUE NEEDED FOR FITTING FROM STATE NUMBER
C                      I1 OF ANGULAR MOMENTUM L1 TO STATE NUMBER I2
C                      OF ANGULAR MOMENTUM L2.
C
      COMMON /TRANST/ BE2FIT,QFIT
C----------------------------------------------------------------------

      COMMON /BASIS/ B2S,C2S
      COMMON /ME/ RADAN, RWS
      COMMON /FLAG/  IFAM,LRADAN,LRWS,IFEB,IFBASE,IFPLOT,LRADQ
      COMMON /FIXED/ HBAR,PI

C
C   R0 AND RO0 ARE FACTORS DUE TO THE OPERATOR
C   OF ELECTRIC QUADRUPOLE TRANSITIONS AND ARE GIVEN IN THE FORMULA
C   FOR THE TRANSITION OPERATOR IN THE BOOK.
C
      R0  = 1.1*NA**(1./3.)
      RO0 = 3.*NZ/(4.*PI*R0**3.)
C
C  SQRBAS(I) ARE SCALING FACTORS DUE TO THE BASIS PARAMETERS.
C
      SQRBAS(1) = SQRT( HBAR/SQRT(B2S*C2S) )
      SQRBAS(2) =       HBAR/SQRT(B2S*C2S)
C
C BFLAG CONTROLLS IF THE EXPERIMENTAL B(E2,0-->2) VALUE (BE202)
C IS YET ADJUSTED OR NOT.
C
      BFLAG = 0
C
C CALCULATION OF BETA MATRIXELEMENTS
C
      IF (LRADAN.EQ.0) THEN
         CALL RADME(1,6)
         LRADAN = 1
      END IF

C
C RESCALING OF QUADRUPOLE BETA MATRIXELEMENTS DUE TO CHOICE OF BASIS
C
      IF (LRADQ.EQ.0) THEN
        DO 15 INDEX0=1,2
        DO 15 INDEX1=1,256
        DO 15 INDEX2=1,256
           RADANQ(INDEX2,INDEX1,INDEX0) =   RADAN(INDEX2,INDEX1,INDEX0)
     &                                    * SQRBAS(INDEX0)
  15  CONTINUE
      LRADQ = 1
      END IF

      REWIND(30)
      REWIND(20)

C***********************************************************************
C-----------------------------------------------------------------------

C OVERREADING THE OBSOLETE STORAGED DIAGONALIZATION COEFFICIENTS
C AND QUADRUPOLE MATRIXELEMENTS (E.G. IF LMINB NOT EQUAL LMINE).
C
      DO 26 LQ1 = LMINE,LMINB-1
        IF (LQ1.EQ.1) GOTO 26
        IF ((IFAM(LQ1).EQ.0).AND.(IFEB.EQ.4)) GOTO 26
        DO 25 I1=1,NENEIV
          DO 25 I2=0,395,5
            READ(30,2000) DUMMY,DUMMY,DUMMY
   25   CONTINUE
   26 CONTINUE
 2000 FORMAT(5E14.7)
C
      LQ1 = LMINE -1
   27 LQ1 = LQ1+ 1
      IF (LQ1.EQ.1) GOTO 27
      DO 29 LQ2 = MAX0(LQ1-2,0),LQ1
      IF ( LQ2.EQ.1)                 GOTO 29
C
C THE MATRIXELEMENTS FOR THE ANGULAR MOMENTUM COMBINATION (3,3) ARE
C NOT CALCULATED:
C
      IF (LQ2.EQ.LMINB) GOTO 34
      IF ((LQ2.EQ.0).AND.(LQ1.EQ.0)) GOTO 29
      IF ((LQ2.EQ.3).AND.(LQ1.EQ.3)) GOTO 29
C
C OVERREADING THE GAMMA QUADRUPOLE MATRIXELEMENTS
C

   31 READ(20,2200)(INDEX1,INDEX2,QDUMMY(INDEX1,INDEX2),I=1,3)
      IF (INDEX1.NE.0) GOTO 31
   32 READ(20,2200)(INDEX1,INDEX2,QDUMMY(INDEX1,INDEX2),I=1,3)
      IF (INDEX1.NE.0) GOTO 32
 2200 FORMAT(3(2I3,2X,E14.7))
C
   29 CONTINUE
      GOTO 27
   34 CONTINUE

C-----------------------------------------------------------------------
C***********************************************************************

C
C START OF THE BIG DO-LOOP FOR CALCULATING B(E2) AND Q VALUES:
C
C    1) READING DIAGONALIZATION COEFFICIENTS(DIAGCO)
C    2) READING GAMMA DEPENDENT QUADRUPOLE MATRIXELEMENTS
C    3) CALCULATION OF B(E2) AND Q VALUES
C
C
      DO 35 LQ1=LMINB,LMAXB
      IF(LQ1.EQ.1) GO TO 35
      IF ((IFAM(LQ1).EQ.0).AND.(IFEB.EQ.4)) GOTO 44
C
C READING DIAG COEFFICIENTS:
C
      DO 40 K1=1,NENEIV
      DO 40 K2=0,395,5
        READ(30,2000) (DIAGCO(K2+K3,K1,MOD(LQ1,3)+1),K3=1,5)
   40 CONTINUE
C
      CALL IAIR(IA1,IR1,LQ1,NPH,IMAX1)
C
C    IA1 = FIELD STORING THE ANGULAR INDEX OF THE FIRST STATE
C    IR1 = FIELD STORING THE RADIAL INDEX OF THE FIRST STATE
C    LQ1 = ANGULAR MOMENTUM OF THE FIRST STATE
C    NPH = PHONON NUMBER
C  IMAX1 = NUMBER OF POSSIBLE STATES
C
   44 CONTINUE
C
C MIN IS THE ACTUAL MINIMUM OF THE ANGULAR MOMENTUM
C
      MIN = MAX0(LQ1-2,LMINB)

      CGFAC(LQ1) = SQRT(
     &    (2.*LQ1-1)*2*LQ1/((2.*LQ1+1)*(2.*LQ1+2)*(2.*LQ1+3))   )

C
      DO 55 LQ2=MIN,LQ1
      IF(LQ2.EQ.1) GOTO 55
      IF(LQ1.EQ.0.AND.LQ2.EQ.0) GOTO 55
      IF(LQ1.EQ.3.AND.LQ2.EQ.3) GOTO 55
C
C CALCULATING THE INDICES FOR THE RIGHT HAND STATE:
C
      CALL IAIR(IA2,IR2,LQ2,NPH,IMAX2)
C
C    IA2 = FIELD STORING THE ANGULAR INDEX OF THE SECOND STATE
C    IR2 = FIELD STORING THE RADIAL INDEX OF THE SECOND STATE
C    LQ2 = ANGULAR MOMENTUM OF THE SECOND STATE
C    NPH = PHONON NUMBER
C  IMAX2 = NUMBER OF POSSIBLE STATES
C
      IOVER = 0
   45 DO 56 I1=1,65
      DO 56 I2=1,65
        QUAD(I1,I2,1)=0.
        QUAD(I1,I2,2)=0.
   56 CONTINUE
C
C READING QUADRUPOLE MATRIXELEMENTS UNEQUAL ZERO
C
   57   READ(20,2200)(INDEX1,INDEX2,QUAD(INDEX1,INDEX2,1),I=1,3)
        IF (INDEX1.NE.0) GOTO 57
   58   READ(20,2200)(INDEX1,INDEX2,QUAD(INDEX1,INDEX2,2),I=1,3)
        IF (INDEX1.NE.0) GOTO 58
C
C THE FOLLOWING IF-BLOCK IS NEEDED IF LMINB IS NOT EQUAL LMINE
C FOR OVEREADING MATRIXELEMENTS.
C
        IF ((LQ2.EQ.LMINB).AND.(IFEB.NE.4).AND.(LQ2.EQ.LQ1-1).AND.
     &      (IOVER.EQ.0).AND.(LQ1.NE.3)) THEN
          IOVER = 1
          GOTO 45
        END IF

C
C IFAM(LQ1)=1 ->THE ANGULAR MOMENTUM LQ1 IS NEEDED FOR FITTING DATA
C IFAM(LQ1)=0 ->THE ANGULAR MOMENTUM LQ1 IS NOT NEEDED FOR FITTING DATA
C
      IF
     & ( ((IFAM(LQ2).EQ.0).OR.(IFAM(LQ1).EQ.0)).AND.(IFEB.EQ.4) )
     &    GOTO 55
C
      DO 80 N1=1,NENEIV
      DO 80 N2=1,NENEIV
C
      SUM1=0.
      SUM2=0.
C
C CONSTRUCTING THE ALPHA (SUM1) AND ALPHA**2 (SUM2) MATRIXELEMENTS
C AS A PRODUCT OF THE BETA RESP. GAMMA MATRIXELEMENTS AND THE
C CORRESPONDING DIAGONALIZATION COEFFICIENTS:
C
      DO 90 I1=1,IMAX1
      DO 90 I2=1,IMAX2
       SUM1 = SUM1+RADANQ(IR2(I2),IR1(I1),1) * QUAD(IA2(I2),IA1(I1),1)
     &         * DIAGCO(I1,N1,MOD(LQ1,3)+1) * DIAGCO(I2,N2,MOD(LQ2,3)+1)
       SUM2 = SUM2+RADANQ(IR2(I2),IR1(I1),2) * QUAD(IA2(I2),IA1(I1),2)
     &         * DIAGCO(I1,N1,MOD(LQ1,3)+1) * DIAGCO(I2,N2,MOD(LQ2,3)+1)
  90  CONTINUE
C
      ALPH1(N2,N1)=SUM1*SQRT((2.*LQ1+1.)*(2.*LQ2+1.))
      ALPH2(N2,N1)=SUM2*SQRT((2.*LQ1+1.)*(2.*LQ2+1.)/7.)
C
   80 CONTINUE
C
C EXACT ADJUSTMENT TO THE B(E2,0->2) VALUE. BE2COR IS THE CORRECTION
C FACTOR OF THE B(E2)-VALUE (SEE ARTICLE).
C
      IF (ABS(BE202).LT.1.E-5) THEN
         BE2COR=1.
         GOTO 100
      END IF

      IF (((LQ2.EQ.0).AND.(LQ1.EQ.2)).AND.(BFLAG.EQ.0)) THEN
        BFLAG=1
        A11=RO0*R0**5*ALPH1(NENEIV,NENEIV)*0.01
        A22=RO0*R0**5*ALPH2(NENEIV,NENEIV)*10./SQRT(70.*PI)*0.01
        IF (A11-A22.LT.0) THEN
            A11 = -A11
            A22 = -A22
        END IF
        BE2COR=A11/(2.*BE202)+SQRT((A11*A11)/(4.*BE202*BE202)-A22/BE202)
C
C GAUGE TRANSFORMATION OF THE HAMILTONIAN DUE TO THE EXACT ADJUSTMENT
C OF THE B(E2;0,1 --> 2,1) VALUE. (SEE ARTICLE)
C
        X(1) = X(1) * BE2COR**2
        X(2) = X(2) * BE2COR**3
        X(3) = X(3) * BE2COR**4
        X(4) = X(4) * BE2COR**5
        X(5) = X(5) * BE2COR**6
        X(6) = X(6) * BE2COR**6
        X(7) = X(7) * BE2COR**2
        X(8) = X(8) / BE2COR
C
      WRITE(6,*) ('*',I=1,80)
      WRITE(6,*) ('-',I=1,80)
        WRITE(6,2015) BE202**2, (X(N1),N1=1,8), BE2COR
 2015   FORMAT(/
     & ' THE B(E2,0,1->2,1) VALUE HAS BEEN ADJUSTED TO THE '/
     & ' VALUE ',E14.7,'. ACCORDINGLY ARE THE POTENTIAL AND '/
     & ' KINETIC ENERGY PARAMETERS CHANGED. THIS DOES NOT'/
     & ' CHANGE THE ENERGY EIGENVALUES (WITHIN THE USUAL NUMERICAL'/
     & ' PRECISION). THE NEW POTENTIAL PARAMETERS ARE:'//
     & '  C2 = ',E14.7,'    C3 = ',E14.7,'    C4 =',E14.7/
     & '  C5 = ',E14.7,'    C6 = ',E14.7,'    D6 =',E14.7/
     & '  B2 = ',E14.7,'    P3 = ',E14.7                 //
     & ' THE CORRECTION OF BE2(0,1->2,1) EQUALS: ',E14.7 //)

      WRITE(6,*) ('-',I=1,80)
      WRITE(6,*) ('*',I=1,80)
      END IF

  100 CONTINUE
C
C SUMMING UP THE ALPHA RESP. ALPHA**2 DEPENDENT TERMS:
C    N1,N2 ARE INDICES REPRESENTING THE NENEIV ENERGETIC LOWEST
C    WAVEFUNCTIONS.
C
      DO 120 N1=1,NENEIV
      DO 120 N2=1,NENEIV
C
C RESCALING OF MATRIXELEMENTS DUE TO BE2COR
C
        ALPH1(N2,N1) = ALPH1(N2,N1)/BE2COR
        ALPH2(N2,N1) = ALPH2(N2,N1)/(BE2COR*BE2COR)
C
C SUMMING UP THE ALPHA AND ALPHA**2 PART IN THE QUADRUPOLE MATRIXELEMENT
C
      BE2(N2,N1) =
     &  (      RO0 * R0**5 *
     &       ( ALPH1(N2,N1) - 10./SQRT(70.*PI) * ALPH2(N2,N1) )
     &  )**2
     &  / ( 2.* LQ2+1 ) * 0.0001
C
C IN CASE OF FITTING DATA THE CALCULATED B(E2)- VALUES ARE STORED
C IN BE2FIT.
C
      IF (IFEB.EQ.4) THEN
      BE2FIT(NENEIV-N2+1,LQ2,NENEIV-N1+1,LQ1) = BE2(N2,N1)
      END IF

  120 CONTINUE
C
C  NO OUTPUT IN CASE OF FITTING (IFEB=4):
      IF (IFEB.EQ.4) GOTO 131
C
      IF (LQ1.EQ.0) THEN
         WRITE(6,*) ('*',I=1,80)
         WRITE(6,*) ('-',I=1,80)
      END IF

      WRITE(6,2030) LQ2,LQ1
 2030 FORMAT(// 'INITIAL A.M.:',I2,', FINAL A.M.:',I2//)
      DO 130 K1=1,NBQ
      DO 130 K2=1,NBQ,3
        LZ = 2
        IF (NBQ-K2.LE.2) LZ=NBQ-K2
        WRITE(6,2020)
     &  (LQ2,K2+K4,LQ1,K1,BE2(NENEIV-K2-K4+1,NENEIV-K1+1),K4=0,LZ)
 2020 FORMAT( 3 ('  ',I2,',',I2,'->',I2,',',I2,': ',E14.7 ))
  130 CONTINUE
  131 CONTINUE

C
C IF INITIAL AND FINAL A.M. ARE EQUAL, QUADRUPOLMOMENTS ARE CALCULATED:
C
      IF(LQ1.NE.LQ2) GO TO 150
      DO 140 N=1,NENEIV
      QVAL(N)=RO0*R0**5*(ALPH1(N,N)
     & - 10./SQRT(70.*PI)*ALPH2(N,N))*CGFAC(LQ1)*SQRT(16.*PI/5.)*0.01
C
      IF (IFEB.EQ.4)  THEN
      QFIT(NENEIV+1-N,LQ1) = QVAL(N)
      END IF

  140 CONTINUE
      IF (IFEB.EQ.4) GOTO 150
C
C WRITING RESULTS FOR QUDRUPOLE VALUES:
C
      WRITE(6,2040) (K,QVAL(NENEIV+1-K),K=1,NBQ)
  150 CONTINUE
 2040 FORMAT(/' QUADRUPOLEMOMENT OF THE ',I2,'ND EXCITED STATE:',E14.7)

   55 CONTINUE
   35 CONTINUE
C
      IF (IFEB.NE.4) THEN
         WRITE(6,*) ('-',I=1,80)
         WRITE(6,*) ('*',I=1,80)
      END IF

      RETURN
      END
C
C **********************************************************************
C
C***********************************************************************
C
      SUBROUTINE PLOT(X,ITRGT)
C
C PURPOSE:
C   PLOTS CUTS OF THE  POTENTIAL ENERY SURFACE AT
C   0, 30, AND 60 DEGREES IN LOGITUDINAL FORMAT ON THE MATRIX PRINTER.
C
C ARGUMENTS:
C       X: IS THE ARRAY CONTAINING THE POTENTIAL PARAMETERS IN PLACES
C          X(1) ... X(6)
C   ITRGT: IS THE NUMBER OF THE OUTPUT FILE
C
      REAL X(8),P(60,3)
      CHARACTER CHR0,CHR30,CHR60,BLANK,OUTMAP(121,60)

      COMMON /FIXED/ HBAR,PI

      DATA BLANK/' '/
      DATA  CHR0/'0'/
      DATA CHR30/'3'/
      DATA CHR60/'6'/
C
C OUTMAP IS THE TWO DIMENSIONAL FIELD MAPPING THE CALCULATED ENERGY
C CUTS ON THE OUTPUT DEVICE. NEXT THE FIELD IS INITIALIZED.
C
      DO 5 IBET=1,60
      DO 5 I2=1,121
         OUTMAP(I2,IBET)=BLANK
    5 CONTINUE
C
C GAMMA TAKES THE VALUES 0, 30, 60 DEGREES AND BETA HAS THE RANGE:
C 0 <= BETA <= 0.6
C
      DO 10 IGAM = 1,3
      GAMMA   = (IGAM-1)*PI/6.
      DO 20 IBET = 1,60
      BETA    = 0.01+(IBET-1)*0.01
C
C CALCULATION OF THE POTENTIAL VALUE AT THE POINT (BETA,GAMMA)
C
      P(IBET,IGAM) =
     &           1./SQRT(5.)      * X(1) * BETA**2
     &          - SQRT(2./35.)    * X(2) * BETA**3 * COS(3.*GAMMA)
     &          +      1./5.      * X(3) * BETA**4
     &          - SQRT(2./175.)   * X(4) * BETA**5 * COS(3.*GAMMA)
     &          + 2./35.          * X(5) * BETA**6 * COS(3.*GAMMA)**2
     &          + 1./5./SQRT(5.)  * X(6) * BETA**6
C
   20 CONTINUE
   10 CONTINUE
C
C WRITING THE ORDINATE LEGEND:
C
      WRITE(ITRGT,2000)
 2000 FORMAT(////'-8',13X,'-6',13X,'-4',13X,'-2',14X,'0',14X
     * ,'2',14X,'4',14X,'6',14X,'8 MEV'
     * ,/,' //////////////////////////////////////////////////'
     *   ,'///////////////////////////////////////////////////'
     *   ,'//////////////////////')
C
C WRITING THE POTENTIAL CUT VALUES IN THE OUTPUT FILE OUTMAP
C
      DO 40 IGAM = 1,3
      DO 50 IBET = 1,60

         IPLACE = INT(P(IBET,IGAM)*7.5)
         IF(ABS(IPLACE) .GT. 60) IPLACE= 60 * IPLACE/ABS(IPLACE)

         IF(IGAM.EQ.1) OUTMAP(IPLACE + 61, IBET) = CHR0
         IF(IGAM.EQ.2) OUTMAP(IPLACE + 61, IBET) = CHR30
         IF(IGAM.EQ.3) OUTMAP(IPLACE + 61, IBET) = CHR60
C
   50 CONTINUE
   40 CONTINUE
C
      DO 60 IBET=1,60
C
C WRITE THE BETA VALUE (TIMES 10) ON THE BETA AXIS IF BETA EQUALS
C 0.0, 0.1, ... 0.6, ELSE WRITE THE SIGN '/' DENOTING THE BETA AXIS
C ITSELF.
C
      IF (MOD(IBET,10).NE.0) THEN

         WRITE(ITRGT,2010)
     &   ( OUTMAP(K,IBET),K=1,60), '/'   , (OUTMAP(K,IBET), K=62,121 )
 2010    FORMAT(1X,60A1,A1,60A1)

      ELSE

         WRITE(ITRGT,2020)
     &   ( OUTMAP(K,IBET),K=1,60),IBET/10, (OUTMAP(K,IBET), K=62,121 )
 2020    FORMAT(1X,60A1,I1,60A1)

      END IF

   60 CONTINUE
      RETURN
      END
C
C **********************************************************************
C
      SUBROUTINE IAIR(IA,IR,L,NPH,IMAX)
C
C PURPOSE:
C
C     THIS SUBROUTINE DETERMINES HOW THE INDICES OF RADIAL AND ANGULAR
C     MATRIXELEMENTS ARE TO BE COMBINED FOR A CERTAIN SET OF QUANTUM
C     NUMBERS.
C
C ARGUMENTS:
C     IA(INDEX),IR(INDEX):
C          THE STATES ARE ORDERED IN A CERTAIN SEQUENCE, WHICH
C          IS UNIQUELY DETERMINED BY ITS QUANTUM NUMBERS. IA(INDEX)
C          GIVES THE ANGULAR INDEX NUMBER DEPENDING ON THE QUANTUM
C          NUMBERS LAMBDA AND MUE FOR A CERTAIN SEQUENCE NUMBER INDEX.
C          IR(INDEX) STORES THE RADIAL INDEX FOR THE SEQUENCE NUMBER
C          INDEX.
C          FOR THE DEPENDENCE OF THE ANGULAR AND RADIAL INDEX
C          ON THE QUANTUM NUMBERS MUE RESP. NUE AND LAMBDA WE REFER
C          TO THE ARTICLE.
C
C            L    : ANGULAR MOMENTUM
C           NPH   : PHONONUMBER
C          IMAX   : TOTAL NUMBER OF POSSIBLE STATES FOR GIVEN
C                   PHONON NUMBER NPH AND ANGULAR MOMENTUM L
C
      INTEGER IA(400),IR(400)

C
C IN ORDER TO MAKE THE FOLLOWING FORMULAS VALID FOR BOTH EVEN AND
C ODD SPIN WE INTRODUCE THE MODL23 VARIABLE WHICH GENERATES A INTEGER
C VALUE 3 IF SPIN IS ODD. (SEE SELECTION RULES IN THE ARTICLE)
C
      MODL23 = MOD(L,2) * 3
      LMOD   = L - MODL23
C
C MUE CORRESPONDS TO THE MAXIMAL MUE PLUS ONE FOR A GIVEN L. (MUE IS
C THE NUMBER OF PHONON TRIPLETTS COUPLED TO ANGULAR MOMENTUM ZERO)
C
      MUE   =  L/6
      MUEP1 =  L/6+1
C
C INDEX IS THE WAVEFUNCTION INDEX
C
      INDEX=0
C
C INDRAD IS THE RADIAL INDEX
C
      DO 10 INDRAD=1,256
C
C INDANG IS THE ANGULAR INDEX
C
      DO 20 INDANG=1,65
C
C NUE IS THE ACTUAL PHONON NUMBER INCREASED UNTIL NPH
C
      NUE   = INT( SQRT(REAL(INDRAD-1)) + SQRT(REAL(INDRAD)) ) -1
      NUEP1 = NUE + 1
      IHELP = INDRAD - (NUEP1*NUEP1 - 1)/4. + ((-1)**NUE-1)/8.

      IF (NUE.GT.NPH) GO TO 20
C
C LAMBDA CORRESPONDS TO THE NUMBER OF PHONONS NOT COUPLED
C PAIRWISE TO ANGULAR MOMENTUM ZERO
C
      LAMBDA = 2 * ( IHELP-1 ) + MOD(NUE,2)
      LACONT = (INDANG-1)/MUEP1 + MODL23

C
      IF(LAMBDA.NE.LACONT) GO TO 20
C
C DEFINITION OF TWO ABBREVIATIONS.
C
      IHELP0 =((INDANG-1)/REAL(MUEP1)-(INDANG-1)/MUEP1)*MUEP1+1
      IHELP1 = (LAMBDA - LMOD/2)/3 - MODL23/3+1

C
C IBOUND STANDS FOR THE BOUNDS IN RELATION ... OF THE ARTICLE
C
      IBOUND =  LAMBDA - MODL23
     & - 3 * ( MAX0(IHELP1 - MUE, 1) + IHELP0 - 2 )
C
C  THE FOLLOWING SELECTION RULE CORRESPONDS TO THE FORMULA ....
C  IN THE ARTICLE.
C
      IF( (IBOUND.LT.LMOD/2) .OR. (IBOUND.GT.LMOD) ) GOTO 20
C
      INDEX=INDEX+1
C
C  ASSIGNING THE RADIAL AND THE ANGULAR INDEX
C
      IR(INDEX) = INDRAD
      IA(INDEX) = INDANG

 20   CONTINUE
 10   CONTINUE

C
C IMAX IS THE NUMBER OF WAVEFUNCTIONS ALLOWED FOR INPUT ANGULAR
C MOMENTUM L AND PHONON NUMBER NPH
C
      IMAX = INDEX

      RETURN
      END


C***********************************************************************
      SUBROUTINE POTMIN(C2,C3,C4,C5,C6,D6,
     &                  IPOT,BETA0,GAMMA0,CB,CG,CBG,V0)
C**********************************************************************
C
C PURPOSE:
C
C  THIS CODE CALCULATES THE PHYSICAL PARAMETERS LISTED BELOW
C  FROM POTENTIAL ENERGY SURFACE PARAMETERS AND VICE VERSA.
C  THE RUNNING MODE IS DEFINED BY THE VALUE OF IPOT (SEE ARTICLE).
C
C
C ARGUMENTS:
C
C C2..D6: POTENTIAL PARMETER
C   IPOT: RUNNING OPTION FOR THIS SUBROUTINE.
C         IPOT=1: CALCULATION OF PHYSICAL PARAMETRS LIKE E.G. STIFFNESS
C                 IN BETA DIECTION FROM THE POTENTIAL PARAMETERS C2...D6
C         IPOT=0: CALCULATION OF POTENTIAL PARAMETER FROM THE PHYSICAL
C                 ONES.
C  BETA0: BETA VALUE AT THE MINIMUM
C GAMMA0: GAMMA VALUE AT THE MINIMUM (IN RAD)
C  CB   : STIFFNESS IN BETA DIRECTION
C  CG   : STIFFNESS IN GAMMA DIRECTION
C  CBG  : STIFFNESS IN BETA-GAMMA DIRECTION
C  V0   : POTENTIAL DEPTH AT THE MINIMUM
C
C
C IMPORTANT VARIABLE NAMES:
C
C  WHEN LOOKING FOR THE MINIMUM IN THE PES THE CORRESPONDING
C  AREA IS DEFINED BY:
C
C         BOUNDL(1): LOWER LIMIT OF BETA (DEFAULT = 0).
C         BOUNDU(1): UPPER LIMIT OF BETA. DEFAULT =0.3, BUT IT DEPENDS
C                    STRONGLY ON THE PES.
C         BOUNDL(2): LOWER LIMIT OF GAMMA (DEFAULT = 0).
C         BOUNDU(2): UPPER LIMIT OF GAMMA (DEFAULT = PI/3.).
C         A(I,K): FIELD USED DETERMINING THE LINEAR EQUATION SYSTEM:
C                (BETA0,GAMMA0,CB,CG,CBG,V0) = A (C2,C3,C4,C5,C6,D6)
C
C METHOD:
C
C    THERE ARE TWO CASES:
C
C   CASE 1: GIVEN IS THE POTENTIAL ENERGY SURFACE AND ONE WANTS TO
C           DETERMINE THE PHYSICAL PARMATERS. THE AUXILLIARY
C           ROUTINE DETERMINING MINIMA FINDS THE GLOBAL MINIMUM
C           WITHIN THE BOUNDARIES GIVEN BY BOUNDL(K), BOUNDU(K).
C           THEN CB, CG, CBG, AND V0 ARE CACULATED USING THE FIELD A.
C   CASE 2: GIVEN ARE THE PHYSICAL PARAMETERS. THEN ONE HAS TO
C           SOLVE THE ABOVE LINEAR EQUATION SYSTEM. THIS IS NOT
C           POSSIBLE IF A IS SINGULAR (E.G. IF GAMMA0 = 0.).
C
C**********************************************************************


      REAL B(6),C(6),A(6,6),Y(2),WORK(25),IWORK(2),WKAREA(54)
      REAL BOUNDU(2),BOUNDL(2)
      CHARACTER*9 ASTRNG,BSTRNG

C-----------------------------------------------------------------------
C
C THE COMMON BLOCK POT GIVES THE POTENTIAL PARAMETERS
C TO THE SUBROUTINE FUNC, WHICH IS REQUIRED BY THE IMSL-ROUTINE
C LEQT2F (LINEAR EQUATION SOLVER).
C
      COMMON /POT/ AC2,AC3,AC4,AC5,AC6,AD6
C-----------------------------------------------------------------------
      COMMON /FIXED/ HBAR,PI
      EXTERNAL FUNCT

         WRITE(6,*) ('*',I=1,80)
         WRITE(6,*) ('-',I=1,80)
C
C TRANSMISSION OF POTENTIAL PARAMETERS TO FUNCT
C
      AC2 = C2
      AC3 = C3
      AC4 = C4
      AC5 = C5
      AC6 = C6
      AD6 = D6
C
C DEFINTION OF POTENTIAL PARAMETER:
C
      IF (IPOT.EQ.1) THEN
C
C SEEKING THE MINIMUM IN THE BETA-GAMMA PLANE ...
C
         C(1) = C2
         C(2) = C3
         C(3) = C4
         C(4) = C5
         C(5) = C6
         C(6) = D6
C
C SETTING THE ARGUMENTS FOR THE IMSL ROUTINE ZXMWD:
C
         NUM = 2
         NSIG = 3
         NSRCH = 10
C
C BOUNDL(K), BOUNDU(K) ARE THE LOWER AND UPPER BOUND OF THE AREA WHICH
C IS INVESTIGATED FOR A MINIMUM.
C
         BOUNDL(1) = 0.
         BOUNDU(1) = 0.33
         BOUNDL(2) = 0.
         BOUNDU(2) = PI/3.
C
C IMSL ROUTINE ZXMWD FOR FINDING THE MINIMUM IN THE (BETA,GAMMA)-PLANE:
C
C    FUNCT: FUNCTION ROUTINE FOR CACULATING THE POTENTIAL VALUES
C    NUM  : NUMBER OF UNKNOWN PARAMETERS
C    NSIG : NUMBER OF ACCURACY DIGITS IN THE PARAMETER OUTPUT
C    NSRCH: NUMBER OF STARTING POINTS
C    Y(2) : OUTPUT MINIMUM PARAMETER (BETA RESP. GAMMA VALUE AT MINIMUM)
C    F    : MINIMUM FUNCTION VALUE (POTENTIAL MINIMUM)
C    IWORK(N):INTEGER WORKVECTOR
C    WORK : REAL WORK VECTOR OF LENGTH 25
C    IER  : ERROR PARAMETER
C
       CALL ZXMWD(FUNCT,NUM,NSIG,BOUNDL,BOUNDU,NSRCH,Y,F,WORK,IWORK,IER)
C
C BETA0,GAMMA0 ARE THE COORDINATES OF THE MINIMUM.
C
         BETA0  = Y(1)
         GAMMA0 = Y(2)
      ELSE
         B(1) = 0.
         B(2) = 0.
         B(3) = CB
         B(4) = CG
         B(5) = CBG
         B(6) = V0
      END IF
C
C  DEFINITION OF SOME USEFUL VALUES
C
      SIN3G = SIN(3.*GAMMA0)
      SIN6G = SIN(6.*GAMMA0)
      COS3G = COS(3.*GAMMA0)
      COS6G = COS(6.*GAMMA0)
C
C  THE LINEAR EQUATION SYSTEM OF THE FORM AX=B IS DEFINED:
C
      DO 20 INDEX1=1,6
      DO 20 INDEX2=1,6
         A(INDEX2,INDEX1) = 0.
   20 CONTINUE
C
C IN THE FOLLOWING ARE THE COEFFICIENTS IN THE LINEAR EQUATION
C DEFINED.
C
C  DERIVATION DUE TO BETA
C
      A(1,1) = 2./SQRT(5.) * BETA0
      A(1,2) = -3.*SQRT(2./35.) * BETA0**2 * COS3G
      A(1,3) = 4./5.*BETA0**3
      A(1,4) = -SQRT(2./7.) * BETA0**4 * COS3G
      A(1,5) = 12./35.*BETA0**5*COS3G**2
      A(1,6) = 6./5./SQRT(5.)*BETA0**5
C
C  DERIVATION DUE TO GAMMA
C
      A(2,2) = 3.*SQRT(2./35.)*BETA0**3*SIN3G
      A(2,4) = 3.* SQRT(2./175) * BETA0**5 *SIN3G
      A(2,5) = -6./35.*BETA0**6 * SIN6G
C
C  SECOND DERIVATION DUE TO BETA
C
      A(3,1) = 2./SQRT(5.)
      A(3,2) = -6.*SQRT(2./35.)*BETA0*COS3G
      A(3,3) = 12./5. * BETA0**2
      A(3,4) = -4*SQRT(2./7.)*BETA0**3*COS3G
      A(3,5) = 12./7.* BETA0**4 *COS3G**2
      A(3,6) = 6./SQRT(5.)*BETA0**4
C
C  SECOND DERIVATION DUE TO GAMMA
C
      A(4,2) =  9.*SQRT(2./35.)*BETA0**3*COS3G
      A(4,4) =  9.*SQRT(2./175.)*BETA0**5*COS3G
      A(4,5) =  -36./35.*BETA0**6*COS6G
C
C  SECOND DERIVATION DUE TO GAMMA RESP. BETA
C
      A(5,2) =   9.*SQRT(2./35.)*BETA0**2*SIN3G
      A(5,4) =   3.*SQRT(2./7.)*BETA0**4*SIN3G
      A(5,5) =  -36./35.*BETA0**5*SIN6G
C
C  THE POTENTIAL DEPTH AT THE MINIMUM
C
      A(6,1) =  1./SQRT(5.)   *BETA0**2
      A(6,2) = -SQRT(2./35.)  *BETA0**3*COS3G
      A(6,3) =  1./5.         *BETA0**4
      A(6,4) = -SQRT(2./175)  *BETA0**5*COS3G
      A(6,5) =  2./35.        *BETA0**6*COS3G**2
      A(6,6) =  1./5./SQRT(5.)*BETA0**6

      IF (IPOT.EQ.1) THEN
C
C NOW ARE THE PHYSICAL PARAMETERS CALULATED:
C
         DO 100 I1 = 1,6
         DO 100 I2 = 1,6
            B(I1) = B(I1) + A(I1,I2) * C(I2)
  100    CONTINUE

         SLOPEB  = B(1)
         SLOPEG  = B(2)
         CB  = B(3)
         CG  = B(4)
         CBG = B(5)
         V0  = B(6)

         WRITE(6,2000)
 2000    FORMAT(/// ' THE PHYSICAL PARAMETERS WERE CALCULATED:'/)
      ELSE
C
C IMSL ROUTINE FOR SOLVING THE LINEAR EQUATION SYSTEM IN FULL
C STORAGE MODE WITH HIGH ACCURACY:
C
C       A: INPUT COEFFICIENT MATRIX OF THE LINEAR EQUATION SYSTEM
C 2. ARG.: NUMBER OF RIGHT HAND SIDES
C 3. ARG.: ORDER OF A
C 4. ARG.: ROW DIMENSION OF A
C 5. ARG.: RIGHT HAND SIDE OF THE MATRIX EQUATION (A * X = B)
C   IDGT : NUMBER OF ACCURACY DIGITS
         IDGT = 3
C  WKAREA: WORK VECTOR
C    IER : ERROR PARAMETER
C
         CALL LEQT2F(A,1,6,6,B,IDGT,WKAREA,IER)

         C2 = B(1)
         C3 = B(2)
         C4 = B(3)
         C5 = B(4)
         C6 = B(5)
         D6 = B(6)

         B(3) = CB
         B(4) = CG
         B(5) = CBG
         B(6) = V0

         WRITE(6,2010)
 2010    FORMAT(/// ' THE POTENTIAL PARAMETERS WERE CALCULATED:'/)

      END IF

      IF (IPOT.EQ.1) THEN
        ASTRNG = ' (OUTPUT)'
        BSTRNG = ' (INPUT)'
      ELSE
        ASTRNG = ' (INPUT)'
        BSTRNG = ' (OUTPUT)'
      END IF

      WRITE(6,2020)     BETA0,ASTRNG,GAMMA0,ASTRNG,SLOPEB,
     &                  ASTRNG,SLOPEG,ASTRNG,B(3),ASTRNG,
     &                  B(4),ASTRNG,B(5),ASTRNG,B(6),ASTRNG,
     &                  C2,C3,C4,BSTRNG,C5,C6,D6,BSTRNG
 2020 FORMAT(/
     & ' BETA VALUE AT MINIMUM: ',E14.7,A9/
     & ' GAMMA VALUE AT MINIMUM (RAD): ',E14.7,A9/
     & ' SLOPE IN BETA DIRECTION: ',E14.7,A9/
     & ' SLOPE IN GAMMA DIRECTION: ',E14.7,A9/
     & ' STIFFNESS IN BETA DIRECTION: ',E14.7,A9/
     & ' STIFFNESS IN GAMMA DIRECTION: ',E14.7,A9/
     & ' STIFFNESS IN BETA-GAMMA DIRECTION: ',E14.7,A9/
     & ' POTENTIAL MINIMUM VALUE: ',E14.7,A9///
     & ' C2: ',E14.7,' C3: ',E14.7,' C4:', E14.7, A9/
     & ' C5: ',E14.7,' C6: ',E14.7,' D6:', E14.7, A9//)

         WRITE(6,*) ('-',I=1,80)
         WRITE(6,*) ('*',I=1,80)

      RETURN
      END

C
C CALCULATION OF THE POTENTIAL
C

      SUBROUTINE FUNCT(NUM,Y,F)
C
C THIS SUBROUTINE CALCULATES THE POTENTIAL NEED IN THE IMSL
C ROUTINE ZXMWD.
C
      REAL Y(NUM)
      COMMON /POT/ AC2,AC3,AC4,AC5,AC6,AD6

      F =
     &   AC2 /  SQRT(5.    ) * Y(1)**2
     & - AC3 *  SQRT(2./35.) * Y(1)**3 * COS(3.*Y(2))
     & + AC4 /  5.           * Y(1)**4
     & - AC5 *  SQRT(2./175.)* Y(1)**5 * COS(3.*Y(2))
     & + AC6 *  2./35.       * Y(1)**6 * COS(3.*Y(2))**2
     & + AD6 /  5./SQRT(5.)  * Y(1)**6

      RETURN
      END
