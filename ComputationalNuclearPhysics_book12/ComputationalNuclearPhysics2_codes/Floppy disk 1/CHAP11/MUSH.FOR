      PROGRAM MUSH

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C  ORGANISATION OF THE PROGRAM:                                        C
C    SUBROUTINE EDCS  CALCULATES ELASTIC DIFFERENTIAL CROSS SECTION    C
C    SUBROUTINE FORM  CALCULATES THE FORM FACTOR OF THE DISTRIBUTION   C
C    SUBROUTINE GAUSS GENERATES A GAUSSIAN DENSITY DISTRIBUTION        C
C    SUBROUTINE CONFI GENERATES CONFIGURATIONS AND CALCULATES THEIR    C
C                     WEIGHT;                                          C
C    REAL FUNCTION RAN CALCULATES A RANDOM NUMBER                      C
C    SUBROUTINE HCORE REJECTS CONFIGURATIONS WITH PARTICLES DISTANCES  C
C                     WITHIN A HARD CORE RADIUS                        C
C    SUBROUTINE OPTIC CALCULATES ELASTIC DIFFERENTIAL CROSS SECTION IN C
C                     OPTICAL MODEL APPROXIMATION                      C
C    COMPLEX FUNCTION VEFF  PROVIDES THE VALUES OF THE EFFECTIVE       C
C                     POTENTIAL FOR INTEGRATING THE SCHROEDINGER EQ.   C
C    SUBROUTINE BESSEL DETERMINES THE VALUES OF BESSEL AND NEUMANN     C
C                      FUNCTIONS                                       C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C   PARAMETER USED IN THE WHOLE PROGRAM:                               C                          C
C      M      DIMENSIONALITY OF THE SPACE                              C
C      N      NUMBER OF PARTICLES                                      C
C      B      WIDTH OF THE HARMONIC OSCILLATOR WAVE FUNCTION           C
C   VARIABLES USED IN THE STOCHASTIC PART OF THE PROGRAM               C
C      NSTART  NUMBER OF INITIAL CONFIGURATIONS                        C
C      NKEEP   NUMBER OF CONFIGURATION KEPT AFTER EACH INITIAL         C
C              CONFIGURATION                                           C
C      X       INITIAL VALUE FOR RANDOM NUMBERS                        C
C      XD      COUNTER FOR RANDOM NUMBERS                              C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      DOUBLE PRECISION X,XK

      COMMON/PARA/PI,NSTART,NKEEP
      COMMON/RG/X,XK

      PI=4.*ATAN(1.)

C  INITIALIZATION OF THE RANDOM NUMBER GENERATOR
      X=PI*1.D11
      XK=0.D00
      DO 10 K1=1,20
        TT=RAN()
10    CONTINUE
      NAUS=1

      OPEN (1,FILE='FORM',STATUS='UNKNOWN')
      OPEN (2,FILE='STOCHASTIC',STATUS='UNKNOWN')
      OPEN (3,FILE='CONFIG',STATUS='UNKNOWN')
      OPEN (4,FILE='OPTICAL',STATUS='UNKNOWN')


      REWIND(1)
      REWIND(2)
      REWIND(3)
      REWIND(4)

      READ(3,1010,ERR=100,END=100)NSTART,NKEEP
      PRINT*,' YOU ALREADY OWN A FILE WITH CONFIGURATIONS !   '
      PRINT*,'  '
      GOTO 200

100   JUMP=1
      WRITE(*,1000)
      WRITE(*,1001)
      WRITE(*,1002)
      READ(*,*,ERR=700)NANT
      IF (NANT.EQ.1) THEN
        CALL GAUSS
        NAUS=2
      ELSEIF (NANT.EQ.2) THEN
        CALL OPTIC
      ELSE
        NAUS=0
      END IF
      IF (NAUS.EQ.0) GOTO 300
      IF (NAUS.NE.2) GOTO 100

200   JUMP=2
      REWIND(3)
      READ(3,1010)NSTART,NKEEP
      WRITE(*,1003)
      WRITE(*,1002)
      READ(*,*,ERR=700)NANT
      IF (NANT.EQ.1) THEN
        CALL FORM
      ELSEIF (NANT.EQ.2) THEN
        CALL EDCS
      ELSEIF (NANT.EQ.3) THEN
        CALL OPTIC
      ELSE
        NAUS=0
      END IF

      REWIND(3)
      READ(3,1010)NSTART,NKEEP
      IF (NAUS.NE.0) GOTO 200

300   CLOSE (1,STATUS='KEEP')
      CLOSE (2,STATUS='KEEP')
      CLOSE (3,STATUS='KEEP')
      CLOSE (4,STATUS='KEEP')

800   STOP

700   PRINT*,'GIVE THE LAST INPUT ONCE MORE!  '
      GOTO (100,200),JUMP

1000  FORMAT('   '/'  '/'   '/T12,' CHOOSE THE DESIRED ROUTINE OUT OF TH
     1E MENU'/'  '/'  '/T8,' 1 : GENERATION OF CONFIGURATIONS WITH GAUSS
     2IAN DISTRIBUTION')
1001  FORMAT(T8,' 2 : OPTICAL POTENTIAL CALCULATION'
     1/T6,' ELSE  END THE PROGRAM'/'   ')
1003  FORMAT(T8,' 1 : CALCULATION OF THE FORM FACTOR'/T8,' 2 : CALCULATI
     1ON OF DIFFERENTIAL CROSS SECTION'/T8,' 3 : OPTICAL POTENTIAL CALCU
     2LATION'/T6,' ELSE  END THE PROGRAM'/'   ')
1002  FORMAT(T4,' TYPE THE NUMBER OF THE ROUTINE WHICH YOU WANT TO BE EX
     1ECUTED  ')
1010  FORMAT(2I8)

      END


      SUBROUTINE EDCS

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C  THIS ROUTINE CALCULATES THE SCATTERING AMPLITUDE AT 0 DEGREES IF    C
C  THE MOMENTUM OF THE INCOMING PARTICLE IS SMALLER THAN 0.2 INVERSE   C
C  FERMI; OTHERWISE DIFFERENTIAL CROSS SECTION. IN ADDITION, THE       C
C  NUMBER OF DIFFERENT CONFIGURATIONS, THE AVERAGE ACCEPTANCE          C
C  PROPABILITY, AND THE RMS-RADIUS IS DETERMINED.                      C                 C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C   PARAMETER:                                                         C
C      KAMAX   NUMBER OF VALUES OF THE SCATTERING ANGLE WHERE THE      C
C              DIFFERENTIAL CROSS SECTION IS CALCULATED                C
C      KMAX    UPPER LIMIT FOR THE NUMBER OF VALUES OF THE INCIDENT    C
C              MOMENTUM                                                C
C      Q0      UPPER LIMIT FOR CALCULATION OF SCATTERING AMPLITUDE IN  C
C              FORWARD DIRECTION ONLY                                  C
C   IMPORTANT VARIABLES:                                               C
C      AM      CONTAINS THE MATRIX ELEMENTS OF THE MULTIPLE SCATTERING C
C              EQUATIONS                                               C
C      NTHET   ANGULAR STEP                                            C
C      QFACT   INCIDENT MOMENTUM STEP                                  C
C      FKKP    CONTAINS THE SCATTERING AMPLITUDES                      C
C      MULTI   MULTIPLICITY OF A CONFIGURATION                         C
C      PHI     INHOMOGENEOUS VECTOR OF THE MULTIPLE SCATTERING         C
C              EQUATIONS IN THE BEGINNING SOLUTION OF THESE EQUATIONS  C
C              IN THE END                                              C
C      PHI1    CONTAINS THE OUTGOING WAVE                              C
C      Q       MOMENTUM IN Z-DIRECTION                                 C
C      QANGLE  DIRECTIONS OF THE OUTGOING WAVE                         C
C      RMS     RMS-RADIUS OF THE DENSITY                               C
C      SLENG   PROJECTILE NUCLEON SCATTERING LENGTH                    C
C      SUM     TOTAL NUMBER OF CONFIGURATIONS                          C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      PARAMETER(M=3,N=4,KAMAX=61,KMAX=5,Q0=.2)

      REAL FIELD(M,N),RIJ(N,N),QANGLE(2,KAMAX)
      COMPLEX IC,AM(N,N),PHI(N),SLENG,FAKT,PSI1(N),FKKP(KMAX,KAMAX),
     1        PHI1(N,KAMAX)

      COMMON/PARA/PI,NSTART,NKEEP

      JUMP=1
1     PRINT*,' REAL PART OF THE SCATTERING LENGTH [FM] ?       '
      READ(*,*,ERR=700)S1
      JUMP=2
2     PRINT*,' IMAGINARY PART OF THE SCATTERING LENGTH [FM] ?  '
      READ(*,*,ERR=700)S2
      SLENG=CMPLX(S1,S2)
3     JUMP=3
      WRITE(*,1090)KMAX
      READ(*,*,ERR=700)KNUMB
      KNUMB=MIN0(KNUMB,KMAX)
      IF (KNUMB.LT.1) KNUMB=1

      IF (KNUMB.GT.1) GOTO 4
        JUMP=9
9       PRINT*,' VALUE OF K [FM**(-1)] ?       '
        READ(*,*,ERR=700)QMIN
        QFACT=0
        IF (QMIN.GE.Q0) GOTO 6
        NTHET=1
        GOTO 7
4       JUMP=4
        PRINT*,' LOWER LIMIT OF K [FM**(-1)] ? '
        READ(*,*,ERR=700)QMIN
        JUMP=5
5       PRINT*,' UPPER LIMIT OF K [FM**(-1)] ? '
        READ(*,*,ERR=700)QMAX
        QFACT=(QMAX-QMIN)/(KNUMB-1.)
        IF (QMAX.LT.Q0) GOTO 7
6     JUMP=6
      PRINT*,' ANGULAR STEP [DEGREES >=3] ?    '
      READ(*,*,ERR=700)NTHET
      NTHET=MAX0(3,NTHET)
7     CONTINUE

      IC=CMPLX(0.,1.)
      SUM=0.
      RMS=0.

C  CALCULATION OF UNIT VECTORS SPECIFYING THE DIRECTION OF THE
C  OUTGOING PROJECTILE
      K10=0
      DO 8 K1=1,181,NTHET
        K10=K10+1
        QANGLE(1,K10)=SIN(PI*(K1-1)/180.)
        QANGLE(2,K10)=COS(PI*(K1-1)/180.)
        DO 8 K2=1,KNUMB
          FKKP(K2,K10)=CMPLX(0.)
8     CONTINUE

      DO 200 K1=1,NSTART*NKEEP
        READ(3,*,END=800)FIELD
        READ(3,1010,END=800)RSQU,MULTI

C  BEGINNING OF THE CALCULATION OF THE SCATTERING AMPLITUDE FOR ONE
C  CONFIGURATION
        SUM=SUM+MULTI
        RMS=RMS+RSQU*MULTI

C  DETERMINATION OF THE PARTICLE DISTANCES
        DO 20 K2=1,N-1
          DO 20 K3=K2+1,N
            R=0.
            DO 10 K4=1,M
              R=R+(FIELD(K4,K2)-FIELD(K4,K3))**2
10          CONTINUE
            RIJ(K2,K3)=R**.5
20      CONTINUE

C   START OF THE CALCULATION OF SCATTERING AMPLITUDES
        DO 200 K2=1,KNUMB
          Q=QMIN+QFACT*(K2-1)
          IF (Q.LT.Q0) THEN
            KANGLE=1
            MTHET=1
          ELSE
            KANGLE=181
            MTHET=NTHET
          END IF

C   CALCULATION OF THE INHOMOGENEOUS VECTOR AND THE OUTGOING WAVES
          DO 30 K3=1,N
            PHI(K3)=CEXP(IC*Q*FIELD(M,K3))
            K10=0
            DO 30 K4=1,KANGLE,MTHET
              K10=K10+1
              PHI1(K3,K10)=CEXP(-IC*Q*(FIELD(M,K3)*QANGLE(2,K10)+
     1                       FIELD(M-1,K3)*QANGLE(1,K10)))
30      CONTINUE

C   CALCULATION OF THE MATRIX ELEMENTS
          DO 40 K3=1,N-1
            AM(K3,K3)=1.
            DO 40 K4=K3+1,N
              AM(K3,K4)=-SLENG*CEXP(IC*Q*RIJ(K3,K4))/RIJ(K3,K4)
              AM(K4,K3)=AM(K3,K4)
40        CONTINUE
          AM(N,N)=CMPLX(1.)

C   SOLUTION OF THE SYSTEM OF MULTIPLE SCATTERING EQUATIONS
          DO 70 K3=1,N-1
            DO 70 K4=K3+1,N
              FAKT=AM(K3,K4)/AM(K3,K3)
              AM(K3,K4)=FAKT
              DO 70 K5=K3+1,N
                AM(K5,K4)=AM(K5,K4)-AM(K5,K3)*FAKT
70        CONTINUE
          DO 90 K4=2,N
            DO 90 K5=1,K4-1
              PHI(K4)=PHI(K4)-AM(K5,K4)*PHI(K5)
90        CONTINUE
          PHI(N)=PHI(N)/AM(N,N)
          DO 110 K4=1,N-1
            K3=N-K4
            DO 100 K5=K3+1,N
              PHI(K3)=PHI(K3)-AM(K5,K3)*PHI(K5)
100         CONTINUE
            PHI(K3)=PHI(K3)/AM(K3,K3)
110       CONTINUE

C   AVERAGING OF THE INDIVIDUAL SCATTERING AMPLITUDES
          DO 200 K6=1,N
            K10=0
            DO 200 K5=1,KANGLE,MTHET
              K10=K10+1
              FKKP(K2,K10)=FKKP(K2,K10)+MULTI*PHI(K6)*PHI1(K6,K10)
200   CONTINUE

C  STORING OF SCATTERING ANGLES, AVERAGED SCATTERING AMPLITUDES AND
C  DIFFERENTIAL CROSS SECTION
      WRITE(2,1020)SLENG
      DO 300 K1=1,KNUMB
        Q=QMIN+QFACT*(K1-1)
        IF (Q.LT.Q0) THEN
          KANGLE=1
          MTHET=1
        ELSE
          KANGLE=181
          MTHET=NTHET
        END IF
        WRITE(2,1030)Q
        IF (K1.EQ.1) WRITE(2,1050)
        K10=0
        DO 300 K2=1,KANGLE,MTHET
          K10=K10+1
          WRITE(2,1040)K2-1,SLENG*FKKP(K1,K10)/SUM,10.*(CABS(FKKP(K1,
     1          K10)*SLENG)/SUM)**2
300   CONTINUE

C   STORING OF INFORMATION CONCERNING THE CONFIGURATIONS AND THE RMS; THE
C   .64 BEING ADDED IS THE SQUARE OF THE NUCLEON RADIUS
      WRITE(2,1060)NSTART*NKEEP,NSTART*NKEEP/SUM,(RMS/(SUM*N)+.64)**.5

800   RETURN

700   PRINT*,'GIVE THE LAST INPUT ONCE MORE!  '
      GOTO (1,2,3,4,5,6,9),JUMP

1005  FORMAT(E12.4)
1010  FORMAT(E12.4,I8)
1020  FORMAT(T5,'STOCHASTIC CALCULATION:'/'    '
     1/T3,'SCATTERING LENGTH [FM]:',E12.4,' + I* ',E12.4,'  ')
1030  FORMAT(T3,'MOMENTUM [FM**(-1)]:   ',E12.4/'  ')
1050  FORMAT(T22,'SCATTERING AMPLITUDE [FM]'/T3,
     1'SCATTERING ANGLE',T22,'REAL PART',T33,'IMAGINARY PART',T52,'CROSS
     2 SECTION [mb]')
1060  FORMAT(' '/T5,'NUMBER OF DIFFERENT CONFIGURATIONS',T60,I8/T5,
     1'AVERAGE ACCEPTANCE PROPABILITY',T60,E12.4/T5,'RMS-RADIUS',T60,
     2E12.4/'  ')
1040  FORMAT(T8,I4,T20,2E12.4,T52,E12.4)
1090  FORMAT(T5,' # OF VALUES FOR THE INCIDENT MOMENTUM K ( <= ',I2,')
     1 ')
1100  FORMAT(I3,2E12.4)
1110  FORMAT(I3,4E12.4)

      END



      SUBROUTINE FORM

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C   THIS SUBROUTINE CALCULATES THE FORM FACTOR AND ITS FLUCTUATION     C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C   PARAMETER:                                                         C
C      MAXI  MAXIMUM NUMBER OF VALUES OF MOMENTUM TRANSFER             C
C   IMPORTANT VARIABLES:                                               C
C      FACTOR  MOMENTUM TRANSFER STEP                                  C
C      FLUCT   CONTAINS THE FLUCTUATIONS                               C
C    L/UBOUND  LOWER/UPPER BOUND OF MOMENTUM TRANSFER                  C
C      MULTI   MULTIPLICITY OF A CONFIGURATION                         C
C      Q       MOMENTUM TRANSFER                                       C
C      REFORM  FORM FACTOR FOR INCOMING WAVES EVALUATED FOR MOMENTUM   C
C              TRANSFER ALONG THE 3 COORDINATE AXES                    C
C      RMS     RMS-RADIUS OF THE DENSITY                               C
C      SUM     TOTAL NUMBER OF CONFIGURATIONS                          C
C     W/W1     AUXILIARY FIELDS FOR EVALUATION OF FLUCTUATIONS         C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      PARAMETER(M=3,N=4,B=1.41,MAXI=21)
      REAL W(MAXI),W1(MAXI),LBOUND,REFORM(M,MAXI),FIELD(M,N),FLUCT(MAXI)

      COMMON/PARA/PI,NSTART,NKEEP

1     JUMP=1
      WRITE(*,1090)MAXI
      READ(*,*,ERR=700)MOMENT
      MOMENT=MIN0(MOMENT,MAXI)
      IF (MOMENT.LT.1) MOMENT=1
      JUMP=2
2     PRINT*,' LOWER LIMIT OF Q [FM**(-1)]?  '
      READ(*,*,ERR=700)LBOUND
      JUMP=3
3     PRINT*,' UPPER LIMIT OF Q [FM**(-1)]?  '
      READ(*,*,ERR=700)UBOUND

      DO 5 K1=1,MOMENT
        FLUCT(K1)=0.
        W(K1)=0.
        DO 5 K2=1,M
          REFORM(K2,K1)=0.
5     CONTINUE
      RMS=0.
      SUM=0.

      IF (MOMENT.LE.1) THEN
        FACTOR=0.
      ELSE
        FACTOR=(UBOUND-LBOUND)/(MOMENT-1)
      END IF

      DO 40 J3=1,NSTART
        DO 25 J0=1,MOMENT
          W1(J0)=0.
25      CONTINUE
        SUM1=0.
        DO 30 J4=1,NKEEP
          READ(3,*,END=800)FIELD
          READ(3,1015,END=800)RSQU,MULTI

C  BEGINNING OF THE CALCULATION OF THE FORMFACTOR FOR ONE CONFIGURATION
          RMS=RMS+MULTI*RSQU
          DO 20 NQ=1,MOMENT
            Q=LBOUND+(NQ-1)*FACTOR
            DO 20 J2=1,N
              W1(NQ)=W1(NQ)+MULTI*COS(Q*FIELD(3,J2))/N
              DO 20 J1=1,M
                REFORM(J1,NQ)=REFORM(J1,NQ)+MULTI*COS(Q*FIELD(J1,J2))/N
20        CONTINUE
          SUM=SUM+MULTI
          SUM1=SUM1+MULTI
30      CONTINUE
        DO 40 NQ=1,MOMENT
          FLUCT(NQ)=FLUCT(NQ)+(W1(NQ)/SUM1)**2
          W(NQ)=W(NQ)+W1(NQ)/SUM1
40    CONTINUE

C  STORING VALUES OF MOMENTUM TRANSFER, FORMFACTORS AND FLUCTUATIONS
      WRITE(1,1010)
      DO 50 NQ=1,MOMENT
        FLUCT(NQ)=FLUCT(NQ)/NSTART-(W(NQ)/NSTART)**2
        Q=LBOUND+(NQ-1)*FACTOR
        WRITE(1,1020)Q,(REFORM(I1,NQ)/SUM,I1=1,M),(FLUCT(NQ)/NSTART)**.5
50    CONTINUE

C   STORING OF INFORMATION CONCERNING THE CONFIGURATIONS AND THE RMS; THE
C   .64 BEING ADDED IS THE SQUARE OF THE NUCLEON RADIUS
      WRITE(1,1030)NSTART*NKEEP,NSTART*NKEEP/SUM,(.64+RMS/(SUM*N))**.5

800   RETURN

700   PRINT*,'GIVE THE LAST INPUT ONCE MORE!  '
      GOTO (1,2,3),JUMP

1005  FORMAT(E12.4)
1015  FORMAT(E12.4,I8)
1010  FORMAT(' FORMFACTOR:'/T22,'  MOMENTUM TRANSFER ALONG:'/T8,'MOMENTU
     1M',T22,'X-DIRECTION',T34,'Y-DIRECTION',T46,'Z-DIRECTION',T64,'FLUC
     2TUATION')
1020  FORMAT(T5,E12.4,T20,3E12.4,T62,E12.4)
1030  FORMAT('  '/T3,' NUMBER OF DIFFERENT CONFIGURATIONS: ',T60,I8/T3,
     1' AVERAGE ACCEPTANCE PROPABILITY',T60,E12.4/T4,'RMS-RADIUS',T60,
     2E12.4)
1110  FORMAT(I3,2E12.4)
1120  FORMAT(I3,4E12.4)
1090  FORMAT(T5,' # OF VALUES OF MOMENTUM TRANSFER Q FOR WHICH THE FOURI
     1ER TRANSFORM'/T5,' IS CALCULATED (MAXIMUM ',I2,') ')

      END



      SUBROUTINE GAUSS

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C   THIS ROUTINE GENERATES CONFIGURATIONS WITH GAUSSIAN DISTRIBUTION   C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C   IMPORTANT VARIABLES:                                               C
C      AFIELD CONTAINES ACCEPTED CONFIGURATION                         C
C      C      WIDTH PARAMETER OF AUXILIARY DENSITY "SIGMA"             C
C      CORE   HARD CORE RADIUS                                         C
C      FIELD  CONTAINS TRIAL CONFIGURATION                             C
C      MULTI  MULTIPLICITY OF THE CONFIGURATION                        C
C      NCOUNT COUNTS FOR ACCEPTABLE CONFIGURATIONS                     C
C      NKEEP1 COUNTS THE CONFIGURATIONS STORED FOR AN INITIAL          C
C             CONFIGURATION                                            C
C      RAND   CONTAINS THE RANDOM NUMBERS CORRESPONDING TO THE         C
C             ACCEPTED AND TRIAL CONFIGURATION                         C
C      R      WEIGHT OF THE ACCEPTED AND TRIAL CONFIGURATION           C
C      RSQU   SUM OVER SQUARES OF PARTICLE DISTANCES                   C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      PARAMETER(M=3,N=4,B=1.41)

      REAL RSQU(2),RAND(M,N-1,2),FIELD(M,N),AFIELD(M,N),R(2)

      COMMON/PARA/PI,NSTART,NKEEP/OLD/FIELD,RAND,R,RSQU
      COMMON/PARA1/C,WIDTH/HARDC/CORE

1     JUMP=1
      REWIND(3)
      PRINT*,'# OF INITIAL CONFIGURATIONS                              '
      READ(*,*,ERR=700)NSTART
      NSTART=IABS(NSTART)
      JUMP=2
2     PRINT*,'# OF CONFIGURATIONS GENERATED BEFORE ACCEPTING THE FIRST '
      READ(*,*,ERR=700)NNOT
      JUMP=3
3     PRINT*,'# OF CONFIGURATIONS KEPT FOR EACH INITIAL CONFIGURATION  '
      READ(*,*,ERR=700)NKEEP
      NKEEP=IABS(NKEEP)
      JUMP=4
4     PRINT*,'# OF CONFIGURATIONS LEFT OUT BETWEEN TWO ACCEPTED CONFIGUR
     1ATIONS '
      READ(*,*,ERR=700)NJUMP
      JUMP=5
5     PRINT*,'JUMP WIDTH? RECOMMENDED VALUE IS: WIDTH=0.2   '
      READ(*,*,ERR=700)WIDTH
      WIDTH=ABS(WIDTH)
      WIDTH=AMIN1(WIDTH,.5)
      JUMP=6
6     PRINT*,'HARD-CORE RADIUS [FM] ?                       '
      READ(*,*,ERR=700)CORE
      IF (CORE.GT.0.) CORE=CORE*CORE

      C=B*SQRT(3.)/2.

C  STORING THE NUMBER OF INITIAL CONFIGURATIONS AND NUMBER OF
C  CONFIGURATIONS GENERATED FROM INITIAL ONE
      WRITE(3,1000)NSTART,NKEEP
      DO 50 K1=1,NSTART

C   CALCULATION OF INITIAL CONFIGURATION
        CALL CONFI(1)
        DO 8 K2=1,M
          DO 8 K3=1,N
            AFIELD(K2,K3)=FIELD(K2,K3)
8       CONTINUE
        NKEEP1=0
        NCOUNT=0
10      NCOUNT=NCOUNT+1
          MULTI=0
20        MULTI=MULTI+1

C   UPDATING OF CONFIGURATIONS
          CALL CONFI(2)
          TT=RAN()
          IF (R(2)/R(1).LT.RAN()) GOTO 20

          IF (((NKEEP1.EQ.0).AND.(NCOUNT.LT.NNOT)).OR.(NCOUNT.LT.NJUMP))
     1       GOTO 30

C  SELECTION OF CONFIGURATIONS WITH PARTICLES CLOSER THAN THE HARD CORE
C  RADIUS
          IF (CORE.GT.0.) CALL HCORE(*30)

C  STORING CONFIGURATION, PARAMETERS AND READJUSTMENT OF COUNTERS
          WRITE(3,*)AFIELD
          WRITE(3,1005)RSQU(1),MULTI
          NCOUNT=0
          NKEEP1=NKEEP1+1

C  REPLACEMENT OF THE OLD BY THE NEW CONFIGURATION
30        DO 40 K4=1,M
            AFIELD(K4,N)=FIELD(K4,N)
            DO 40 K3=1,N-1
              AFIELD(K4,K3)=FIELD(K4,K3)
              RAND(K4,K3,1)=RAND(K4,K3,2)
40        CONTINUE
          R(1)=R(2)
          RSQU(1)=RSQU(2)
        IF (NKEEP1.LT.NKEEP) GOTO 10
50    CONTINUE

800   RETURN

700   PRINT*,'GIVE THE LAST INPUT ONCE MORE!  '
      GOTO (1,2,3,4,5),JUMP

1000  FORMAT(2I8)
1005  FORMAT(E12.4,I8)
1010  FORMAT(E12.4)
      END



      SUBROUTINE CONFI(I)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C   AN INITIAL CONFIGURATION IS GENERATED FOR I=1, A TRIAL ONE FOR I=2 C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C   IMPORTANT VARIABLES:                                               C
C      R      WEIGHT OF THE ACCEPTED/TRIAL CONFIGURATION               C
C      RAND   ARRAY OF RANDOM NUMBERS SPECIFIING THE POSITIONS         C
C      Y      EXPONENT APPEARING IN THE WHEIGHT FUNCTION               C
C      R0     RADIAL DISTANCE FROM THE CENTER                          C
C      COTHET COSINE OF THE POLAR ANGLE                                C
C      SITHET SINE OF THE POLAR ANGLE                                  C
C      PHI    AZIMUTHAL ANGLE                                          C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      PARAMETER(M=3,N=4,B=1.41)

      REAL RAND(M,N-1,2),FIELD(M,N),R(2),RSQU(2)

      COMMON/PARA/PI,NSTART,NKEEP/OLD/FIELD,RAND,R,RSQU
      COMMON/PARA1/C,WIDTH/HARDC/CORE

5     R(I)=1.
      Y=0.
      RSQU(I)=0.

C  INITIALISATION OF A SET OF RANDOM NUMBERS AS STARTING VECTORS FOR
C  THE RANDOM WALK
      DO 10 K1=1,M
        FIELD(K1,N)=0.
        DO 10 K2=1,N-1
          IF (I.EQ.1) THEN
            RAND(K1,K2,I)=RAN()
          ELSE
            RAND(K1,K2,2)=RAND(K1,K2,1)+2.*WIDTH*(RAN()-.5)
            IF (RAND(K1,K2,2).GT.1.) RAND(K1,K2,2)=RAND(K1,K2,2)-1.
            IF (RAND(K1,K2,2).LT.0.) RAND(K1,K2,2)=RAND(K1,K2,2)+1.
          END IF
10    CONTINUE

C  CALCULATION OF THE PARTICLE POSITIONS
      DO 20 K1=1,N-1
        R0=C*SQRT(-ALOG(RAND(1,K1,I)))
        COTHET=2.*RAND(2,K1,I)-1.
        SITHET=SQRT(1.-COTHET*COTHET)
        PHI=2.*PI*RAND(3,K1,I)
        R(I)=R(I)*R0
        RSQU(I)=RSQU(I)+R0*R0
        Y=Y-R0*R0/3.
        FIELD(1,K1)=R0*SITHET*COS(PHI)
        FIELD(2,K1)=R0*SITHET*SIN(PHI)
        FIELD(3,K1)=R0*COTHET

C   LAST POSITION DETERMINED BY THE DEMAND FOR A FIXED CENTER OF MASS
        DO 20 K2=1,M
          FIELD(K2,N)=FIELD(K2,N)-FIELD(K2,K1)
20    CONTINUE

C  SELECTION OF CONFIGURATIONS WITH NUCLEONS CLOSER THAN THE HARD CORE
C  RADIUS
      IF ((CORE.GT.0.).AND.(I.EQ.1)) CALL HCORE(*5)
      Z=0.
      DO 25 K3=1,M
        Z=Z+FIELD(K3,N)**2
25    CONTINUE
      RSQU(I)=RSQU(I)+Z
      Y=(Y+Z)/B**2
      IF (Y.GT.200) Y=200
      R(I)=R(I)*EXP(-Y)

      RETURN
      END


      REAL FUNCTION RAN()

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C  THIS ROUTINE CALCULATES A RANDOM NUMBER.                            C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      DOUBLE PRECISION X,XK,PM,A,C
      PARAMETER(A=14662125.D00,C=13136923.D00,PM=2.D00**48)

      COMMON/RG/X,XK

      XK=XK+.5D00
      X=A*X+DINT(C*XK)
      X=X-DINT(X/PM)*PM
      RAN=REAL(X/PM)
      RETURN
      END


      SUBROUTINE HCORE(*)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C   THIS SUBROUTINE CHECKS WHETHER TWO PARTICLES ARE CLOSER THAN THE   C
C   GIVEN HARD CORE RADIUS. IF SO THE PROGRAM CONTINUES AT THE         C
C   ADDRESS SPECIFIED BY * IN THE CALLING PROGRAM, OTHERWISE STANDARD  C
C   RETURN TO THE CALLING PROGRAM                                      C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      PARAMETER(M=3,N=4)

      REAL FIELD(M,N),RSQU(2),RAND(M,N-1,2),R(2)

      COMMON/OLD/FIELD,RAND,R,RSQU/HARDC/CORE

      J=0
      DO 20 K1=1,N-1
        DO 20 K2=K1+1,N
          SEPAR=0.
          DO 10 K3=1,M
            SEPAR=SEPAR+(FIELD(K3,K1)-FIELD(K3,K2))**2
10        CONTINUE
          IF (SEPAR.LT.CORE) RETURN 1
20    CONTINUE

800   RETURN
      END


      SUBROUTINE OPTIC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C  THIS ROUTINE CALCULATES THE ELASTIC DIFFERENTIAL CROSS SECTION IN   C
C  THE OPTICAL POTENTIAL APPROXIMARION                                 C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C  IMPORTANT VARIABLES:                                                C
C     B     WIDTH PARAMETER OF THE GAUSSIAN DENSITY                    C
C     DR    DISTANCE BETWEEN MESHPOINTS IN INTEGRATION OF THE WAVE     C
C           FUNCTION                                                   C
C     F     ARRAY CONTAINING BESSEL AND NEUMANN FUNCTIONS              C
C     FTOT  SUM OF PARTIAL WAVE SCATTERING AMPLITUDES                  C
C     LMAX  NUMBER OF PARTIAL WAVES                                    C
C     L0    UPPER LIMIT FOR LMAX                                       C
C     NPTS  NUMBER OF STEPS IN THE INTEGRATION                         C
C     NSTEP ANGULAR STEP FOR DIFFERENTIAL CROSS SECTION                C
C     PL    LEGENDRE POLYNOMIAL                                        C
C     Q     MOMENTUM OF THE PROJECTILE                                 C
C     RHO0  NORMALIZATION OF THE POTENTIAL                             C
C     RK    MATCHING RADIUS TIMES Q                                    C
C     SLENG PROJECTILE NUCLEON SCATTERING LENGTH                       C
C     VEFF  (KINETIC ENERGY - POTENTIAL - ZENTRIFUGAL BARRIER)*DR**2   C
C     XD    LOGARITHMIC DERIVATIVE OF THE INTEGRATED WAVE FUNCTION     C
C     X/V   VALUES OF WAVE FUNCTION AND EFFECTIVE POTENTIAL AT AND     C
C            CLOSE TO THE MATCHING RADIUS                              C
C   AL1,B1,B2,PL0,PL1,Q1,V0,W,Y,X1,X2  AUXILIARY VARIABLES             C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)

      PARAMETER(B=1.41D00,DR=4.D-2,N=4,NPTS=201,L0=20,NSTEP=3)

      COMPLEX X(5),V(5),Y(3),W(3),FL(0:L0),V0,RHO0,SLENG,VEFF
      COMPLEX X1,X2,XD,IC,FTOT
      DOUBLE PRECISION F(0:L0+1,2)

      COMMON Q1,RHO0,AL1/BESS/F

      JUMP=1
1     PRINT*,'REAL PART OF THE SCATTERING LENGTH [FM] ?       '
      READ(*,*,ERR=700)A1
      JUMP=2
2     PRINT*,'IMAGINARY PART OF THE SCATTERING LENGTH [FM] ?  '
      READ(*,*,ERR=700)A2
      SLENG=CMPLX(A1,A2)
      JUMP=3
3     PRINT*,'MOMENTUM OF THE PROJECTILE ?    '
      READ(*,*,ERR=700)Q
      IF (Q.LE.0.)Q=1.D-6

      IC=CMPLX(0.,1.)
      PI=4.D00*DATAN(1.D00)
      Q1=Q*DR
      RK=Q1*(NPTS-1)
      Q1=Q1*Q1
      RHO0=CMPLX(4*PI*(N-1)*DR*DR*(PI*B*B*3/4)**(-1.5D00))*SLENG

      JUMP=4
4     WRITE(*,1100)L0
      READ(*,*,ERR=700)LMAX
      LMAX=IABS(LMAX)
      LMAX=MIN0(LMAX,L0)
      CALL BESSEL(LMAX,RK)

C  INTEGRATION OF THE RADIAL WAVE FUNCTION
      DO 200 K0=1,LMAX+1
        L=K0-1
        AL1=L*(L+1)*DR*DR
        Y(2)=0.
        Y(3)=CMPLX(DR**(L+1))
        V0=VEFF(2)
        W(2)=0.
        W(3)=Y(3)*(1.-V0/12.)
        DO 5 K1=3,NPTS+2
          W(1)=W(2)
          W(2)=W(3)
          Y(1)=Y(2)
          Y(2)=Y(3)
          W(3)=2.*W(2)-W(1)+V0*Y(2)
          V0=VEFF(K1)
          Y(3)=W(3)/(1.-V0/12.)
          IF (K1.GE.NPTS-2) THEN
            X(K1+3-NPTS)=Y(3)
            V(K1+3-NPTS)=V0
          END IF
5       CONTINUE

C  CALCULATION OF THE LOGARITHMIC DERIVATIVE OF THE INTEGRATED WAVE
C  FUNCTION AT THE MATCHING RADIUS R=DR*(NPTS-1)
        X1=(X(4)-X(2))*CMPLX(-8./21.)+(X(5)-X(1))*CMPLX(37./84.)
        X2=(V(4)*X(4)-V(2)*X(2))*CMPLX(-148./315.)+(V(5)*X(5)-V(1)*
     1       X(1))*CMPLX(-17./630.)
        XD=(X1+X2)/(CMPLX(DR)*X(3))

C  DETERMINATION OF THE PARTIAL WAVE SCATTERING AMPLITUDES FL(L)
       X1=CMPLX(F(L,1)*Q*(L+1))-CMPLX(RK*F(L+1,1)*Q)-XD*CMPLX(F(L,1)*RK)
       X2=CMPLX(-F(L,2)*Q*(L+1))+CMPLX(RK*Q*F(L+1,2))
       FL(L)=X1/(X2+XD*CMPLX(F(L,2)*RK)-IC*X1)
       FL(L)=CMPLX((2*L+1)/Q)*FL(L)

200   CONTINUE

C  STORING OF PARAMETERS AND PARTIAL WAVE SCATTERING AMPLITUDES
      WRITE(4,1020)SLENG,Q
      WRITE(4,1060)
      WRITE(4,1070)(K1-1,FL(K1-1),K1=1,LMAX+1)
      WRITE(4,1050)

C  CALCULATION OF THE DIFFERENTIAL CROSS SECTION FROM THE PARTIAL WAVE
C  SCATTERING AMPLITUDES USING A RECURSION RELATION FOR THE LEGENDRE
C  POLYNOMIALS
      DO 400 K1=1,181,NSTEP
        PL0=1.D00
        B1=DCOS(PI*(K1-1)/180)
        PL1=B1
        FTOT=FL(0)+FL(1)*CMPLX(PL1)
        DO 300 K2=2,LMAX
          B2=1.D00/K2
          PL=(2-B2)*B1*PL1+(B2-1)*PL0
          FTOT=FTOT+FL(K2)*CMPLX(PL)
          PL0=PL1
          PL1=PL
300     CONTINUE

C  ANGLE,SCATTERING AMPLITUDE AND CROSS SECTION ARE STORED
        WRITE(4,1000)K1-1,FTOT*N/(N-1),10.*CABS(FTOT*N/(N-1))**2
400   CONTINUE

      RETURN

700   PRINT*,'GIVE THE LAST INPUT ONCE MORE!  '
      GOTO (1,2,3,4),JUMP

1000  FORMAT(T9,I3,T20,E12.4,T34,E12.4,T53,E12.4)
1020  FORMAT(T5,'OPTICAL POTENTIAL CALCULATION:'/'    '
     1/T3,'SCATTERING LENGTH [FM]:',E12.4,' + I* ',E12.4/T3,'MOMENTUM [F
     2M**(-1)]:   ',E12.4/'  ')
1050  FORMAT('  '/'  '/T22,'SCATTERING AMPLITUDE [FM]'/T3,
     1'SCATTERING ANGLE',T22,'REAL PART',T33,'IMAGINARY PART',T52,'CROSS
     2 SECTION [mb]')
1060  FORMAT(T23,'(PARTIAL WAVE AMPLITUDES)*(2L+1)'/T19,'L',T34,'FL*(2L+
     11)')
1070  FORMAT(T17,I3,T23,E12.4,' + I* ',E12.4)
1100  FORMAT(T3,'MAXIMAL ANGULAR MOMENTUM (<=',I3,') ')

      END


      COMPLEX FUNCTION VEFF(K)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C THIS FUNCTION DETERMINES THE VALUE OF THE EFFECTIVE POTENTIAL        C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (B=1.41D00,DR=4.D-2)
      COMPLEX RHO0

      COMMON Q1,RHO0,AL1

      R=DR*(K-1)
      R3=4*(R/B)**2./3.D00
      RHO1=0.D00
      IF (R3.LT.100) RHO1=DEXP(-R3)
      VEFF=CMPLX(AL1/R**2.-Q1)-CMPLX(RHO1)*RHO0

      RETURN
      END


      SUBROUTINE BESSEL(LMAX,RK)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C  IN THIS ROUTINE THE BESSEL AND NEUMANN FUNCTIONS ARE CALCULATED BY  C
C  BACKWARD AND FORWARD RECURSION RESPECTIVELY                         C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (L0=20)
      DOUBLE PRECISION F(0:L0+1,2),G(0:L0+30)

      COMMON/BESS/F

      C2=DSIN(RK)/RK
      F(0,2)=DCOS(RK)/RK
      F(1,2)=F(0,2)/RK+C2
      IF (LMAX.GE.1) THEN
        DO 10 K=2,LMAX+1
          F(K,2)=DBLE(2.*K-1.)*F(K-1,2)/RK-F(K-2,2)
10      CONTINUE
        G(LMAX+30)=0.D00
        G(LMAX+29)=1.D00
        DO 15 K2=1,LMAX+29
          G(LMAX+29-K2)=DBLE(2.*(LMAX-K2)+61)*G(LMAX+30-K2)/RK
          G(LMAX+29-K2)=G(LMAX+29-K2)-G(LMAX+31-K2)
15      CONTINUE
        DO 20 K3=1,LMAX+1
          F(K3,1)=C2*G(K3)/G(0)
20      CONTINUE
      ELSE
        F(1,1)=C2/RK-F(0,2)
      END IF
      F(0,1)=C2

      RETURN
      END
