C********************************************************************
C********************************************************************
C********************************************************************
      PROGRAM VUUANL
C
C  ANALYSIS PROGRAM TO ANALYSE THE OUTPUT FILE OF VUU.FOR
C  FEEL FREE TO CHANGE THE PROGRAM (ESPECIALLY SUBROUTINE DOSTAT
C  AT THE END OF THE FILE) ACCORDING TO YOUR PURPOSES.
C                                 C.H.
C
C ORIGINALLY  STNDRDB OF BBB, NOW MODIFIED
C...............  STANDARD INFORMATION BLOCKS   .............
C
C  CONSTANTS USED IN THE PROGRAM
C
      PARAMETER (PI=3.1415927,PI2=2.*PI,PISQ=PI*PI)
      PARAMETER (HC=1.2398)
C                2*PI*H-BAR*C
C
C DATA1,2,3
C    SOME RELICTS OF OLD AAA MAY BE STILL HERE ...
      PARAMETER (NPARMX=600,NENSMX=1)
      DIMENSION X(NPARMX),Y(NPARMX),Z(NPARMX),
     &          PX(NPARMX),PY(NPARMX),PZ(NPARMX),
     &          EM(NPARMX),ITYP(NPARMX),
     &          LASTCL(NPARMX),NCLCNT(NPARMX)
      DIMENSION NPART(NENSMX),BDIST(NENSMX),NPION(NENSMX)
      DIMENSION ITPTBL(10), TIMFIL(98),DA(22)
      DIMENSION TIMCNT(98),TIMPI(98),TIMCOL(98),TIMCPB(98),TIMRHO(98)
      DIMENSION TIMNUC(98),TIMNEL(98),TIMPNE(98),TIMRHP(98)
      PARAMETER (MXTPV3=45,MXCNV3=5,NMPRV3=9)
      INTEGER ICOUNT(MXCNV3,MXTPV3)
      COMMON /DAT1BK/X,Y,Z,PX,PY,PZ,EM,ITYP,LASTCL,NCLCNT
      COMMON /DAT2BK/NPART,BDIST,NPION,ITPTBL,TIMFIL,ICOUNT
      COMMON /DAT3BK/NCOLLT,NPAUBL,NDELDC
      COMMON /DAT4BK/TIMCNT,TIMPI,TIMCOL,TIMCPB,TIMNUC,TIMNEL,TIMPNE,
     &               TIMRHO,TIMRHP
C
      COMMON /OPENBK/ BMAX,BMAX1,BMAX2,BETAL,GAMMAL,IFILOW,IFILHI,PFM,
     &                DA,PPROJ,PTARG,TIME
C...............  STANDARD INFORMATION BLOCKS   .............
C
CCCCC
      WRITE(6,*)
     &' PROGRAM VUUANL - ANALYSIS OF THE DATA CALCULATED WITH VUU'
      WRITE(6,*) 'ENTER SEED FOR RANDOMIZER OR 0 TO FORBID DELTA DECAY'
      READ(5,*) ISEED
      IF(ISEED.GT.0)THEN
        CALL SEED(ISEED)
      END IF
      WRITE(6,*) 'SELECT REFERENCE SYSTEM: 0=NN, 1=LAB'
      READ(5,*) IFLLAB
      CALL REFSYS(ISEED,IFLLAB)
      ISUCC=0
C     LOOP OVER DIFFERENT FILES
 1    WRITE(6,*) 'ENTER UNIT NUMBER OF INPUT FILE'
      READ(5,*)  IUNIT
      IF(IUNIT.EQ.0) THEN
C        PRINT OUT STATISTICS - END
       IF(ISUCC.GT.0) THEN
         CALL STATPR
       END IF
       WRITE(6,*) 'END OF PROGRAM'
       STOP
      END IF
C       OPEN FILE HEADER - READ INFORMATION BLOCK
      CALL OPFILE(IUNIT,IRET)
      IF(IRET.LT.0) THEN
        WRITE(6,*) 'OPEN FAILED'
        GOTO 1
      ELSE
        IF(ISUCC.EQ.0) THEN
C         INITIALIZE STATISTIC SUBROUTINE
C         INFORMATION OF FIRST HEADER ARE NEEDED
          CALL STATIN
        END IF
        ISUCC=ISUCC+1
      END IF
C      PRINT OUT ALL OUTPUT-TIMESTEPS
      WRITE(6,*) 'TIME-SEQUENCE'
      DO 2 I=IFILHI,IFILOW,-1
        WRITE(6,*)'BLOCK, TIME',I,TIMFIL(I)
 2    CONTINUE
      WRITE(6,*) 'ENTER TIME-BLOCK  '
      READ(5,*) INFILE
C         READS IN NEXT EVENT OF SELECTED TIMESTEP
 3    CALL NXTEV(NT,NTP,IRET,INFILE)
      IF(IRET.LT.0) THEN
        GOTO 1
      END IF
C      DOING THE STATISTICS
      CALL DOSTAT
      GOTO 3
C
      END
C
CCCCC
C***************** N X T E V ************************
      SUBROUTINE NXTEV(NT,NTP,IRET,INFILE)
C
C ORIGINALLY  STNDRDB OF BBB, NOW MODIFIED
C...............  STANDARD INFORMATION BLOCKS   .............
C
C  CONSTANTS USED IN THE PROGRAM
C
      PARAMETER (PI=3.1415927,PI2=2.*PI,PISQ=PI*PI)
      PARAMETER (HC=1.2398)
C                2*PI*H-BAR*C
C
C DATA1,2,3
C    SOME RELICTS OF OLD AAA MAY BE STILL HERE ...
      PARAMETER (NPARMX=600,NENSMX=1)
      DIMENSION X(NPARMX),Y(NPARMX),Z(NPARMX),
     &          PX(NPARMX),PY(NPARMX),PZ(NPARMX),
     &          EM(NPARMX),ITYP(NPARMX),
     &          LASTCL(NPARMX),NCLCNT(NPARMX)
      DIMENSION NPART(NENSMX),BDIST(NENSMX),NPION(NENSMX)
      DIMENSION ITPTBL(10), TIMFIL(98),DA(22)
      DIMENSION TIMCNT(98),TIMPI(98),TIMCOL(98),TIMCPB(98),TIMRHO(98)
      DIMENSION TIMNUC(98),TIMNEL(98),TIMPNE(98),TIMRHP(98)
      PARAMETER (MXTPV3=45,MXCNV3=5,NMPRV3=9)
      INTEGER ICOUNT(MXCNV3,MXTPV3)
      COMMON /DAT1BK/X,Y,Z,PX,PY,PZ,EM,ITYP,LASTCL,NCLCNT
      COMMON /DAT2BK/NPART,BDIST,NPION,ITPTBL,TIMFIL,ICOUNT
      COMMON /DAT3BK/NCOLLT,NPAUBL,NDELDC
      COMMON /DAT4BK/TIMCNT,TIMPI,TIMCOL,TIMCPB,TIMNUC,TIMNEL,TIMPNE,
     &               TIMRHO,TIMRHP
C
      COMMON /OPENBK/ BMAX,BMAX1,BMAX2,BETAL,GAMMAL,IFILOW,IFILHI,PFM,
     &                DA,PPROJ,PTARG,TIME
C...............  STANDARD INFORMATION BLOCKS   .............
      CHARACTER*13 DUMFIL
C<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
C
C
      NENS=0
      NPRTLO=0
        IRET=0
        IF(INFILE.LT.0)THEN
          IFILE=0
        ELSE
          IFILE=MIN(INFILE,IFILHI)
          IFILE=MAX(INFILE,IFILOW)
        END IF
C
 2200   READ(UNIT=IUNIT,FMT=912,ERR=9998,END=9999)
     *      NNFILE,IDUM,IDUM,ISIMUL
        READ(UNIT=IUNIT,FMT=905) IDUMUN,NNUCL,NPIONS,BDIST1
        READ(UNIT=IUNIT,FMT=906) IDUMUN, NCOLLT,NPAUBL,NDELDC
        NPIN=NNUCL+NPIONS
C BBB   NPRTLO=NPRTUP(NENS)
        NPRTLO=0
        IF(NPRTLO+NPIN.GT.NPARMX)THEN
          WRITE(6,*) 'TOO MUCH PARTICLES INPUT CANCELED'
          GOTO 9998
        END IF
        NPRTHI=NPRTLO+NPIN
        NNUCHI=NPRTLO+NNUCL
        NPRTLO=NPRTLO+1
C       READ(UNIT=IUNIT,FMT=2270)
C    *      ((ICOUNT(I,J),I=1,MXCNV3),J=1,MXTPV3)
        READ(UNIT=IUNIT,FMT=908)
     *      ((ICOUNT(I,J),J=1,21),I=1,MXCNV3)
        READ(UNIT=IUNIT,FMT=909)
     *      ((ICOUNT(I,J),J=22,MXTPV3),I=1,MXCNV3)
        READ(UNIT=IUNIT,FMT=907,ERR=9998,END=9998)
     *                (X(J),Y(J),Z(J),
     *                 PX(J),PY(J),PZ(J),
     *                 EM(J),ITYP(J),
     *                 LASTCL(J), NCLCNT(J),
     *                 J=NPRTLO,NPRTHI)
 912  FORMAT(4I4)
 908  FORMAT((3I5,18I3))
 909  FORMAT((24I3))
 906  FORMAT(1I3,3I8)
 905  FORMAT(1I3,1I5,1I6,1E14.7)
 907  FORMAT(3E13.5,3F8.4,F7.4,I2,I4,I3)
C
      TIME=TIMFIL(NNFILE)
C     TIME EVOLUTION STATISTICS
      TIMCNT(NNFILE)=TIMCNT(NNFILE)+1.
      TIMPI(NNFILE)=TIMPI(NNFILE)+FLOAT(NPIONS)
C      TOTAL COLLISION NUMBER (INCL. PAULI-BLOCKED) NUM.OF PAULI-BL.CL
      TIMCOL(NNFILE)=TIMCOL(NNFILE)+FLOAT(NCOLLT)
      TIMCPB(NNFILE)=TIMCPB(NNFILE)+FLOAT(NPAUBL)
C      NUMBER OF ELASTIC PN COLLISIONS, OF EL. NUCLEON-NUCLEON COLL
      NCL=ICOUNT(1,2)
      TIMPNE(NNFILE)=TIMPNE(NNFILE)+NCL
      NCL=NCL+ICOUNT(1,1)+ICOUNT(1,3)
      TIMNEL(NNFILE)=TIMNEL(NNFILE)+NCL
C      NUMBER  OF ALL NUCLEON-NUCLEON COLL. (NON PAULI-BLOCKED)
      DO 2201 J=1,3
        NCL=NCL+ICOUNT(2,J)+ICOUNT(3,J)+ICOUNT(4,J)
2201  CONTINUE
      TIMNUC(NNFILE)=TIMNUC(NNFILE)+NCL
      NRHO=0
      DO 2202 J=NPRTLO,NNUCHI
        R2=X(J)**2+Y(J)**2+Z(J)**2
C        CENTRAL SPHERE OF 2 FM FOR DENSITY DETERMINATION - BARYONS
        IF(R2.LE.4.0)THEN
          NRHO=NRHO+1
        END IF
2202  CONTINUE
      TIMRHO(NNFILE)=TIMRHO(NNFILE)+FLOAT(NRHO)
      NRHO=0
      DO 2203 J=NNUCHI+1,NPRTHI
        R2=X(J)**2+Y(J)**2+Z(J)**2
C        CENTRAL SPHERE OF 2 FM FOR DENSITY DETERMINATION - PIONS
        IF(R2.LE.4.0)THEN
          NRHO=NRHO+1
        END IF
2203  CONTINUE
      TIMRHP(NNFILE)=TIMRHP(NNFILE)+FLOAT(NRHO)
C
      IF((NNFILE-IFILE)*IFILE.NE.0)THEN
C       GOT THE WRONG TIME-BLOCK
        GOTO 2200
      END IF
C
      NENS=NENS+1
C
C  ...  AT THIS POINT, DECAY ALL SURVIVING DELTAS
C
        NDELFI=0
       IF(IFLDEL.EQ.1)THEN
        DO 2300 J=NPRTLO,NNUCHI
          IF ( (ITYP(J) .GT. 2) .AND. (ITYP(J) .LT. 7)) THEN
            CALL DELDEC(J,NPRTHI,JRET)
            IF (JRET .LT. 0) THEN
              WRITE(6,*)'DELDEC REPORTS ERROR # ',JRET
              GOTO 9998
            END IF
            NDELFI=NDELFI+1
          END IF
 2300   CONTINUE
       END IF
C
      NPIONS=NPIONS+NDELFI
      NDELDC=NDELDC+NDELFI
      NT=NNUCL
      NTP=NNUCL+NPIONS
      NPART(NENS)=NTP
      NPION(NENS)=NPIONS
      BDIST(NENS)=BDIST1
C ...REFLECT Z-AXIS AND TRANSFORM GEV TO MEV
C    THIS IS DONE SINCE NORMALLY THE EXPERIMENTAL ANALYSIS ASSUMES
C     PZ(PROJECTILE)>0
      DO 3000 J=NPRTLO,NPRTHI
          PX(J)=PX(J)*1E3
          PY(J)=PY(J)*1E3
          PZ(J)=-1.E3*PZ(J)
          EM(J)=EM(J)*1E3
          Z(J)=-Z(J)
 3000 CONTINUE
C       OPTIONAL:   TRANSFORM TO LAB-SYSTEM
      IF(IFLLAB.EQ.1) THEN
      DO 3100 J=NPRTLO,NPRTHI
          E1=SQRT(PX(J)**2+PY(J)**2+PZ(J)**2+EM(J)**2)
          PZ(J)=PZ(J)*GAMMAL-BETAL*GAMMAL*E1
 3100 CONTINUE
      END IF
C
      RETURN
C              CLOSE FILE  ...
C    ... BECAUSE OF ERROR DURING READ IN  OR END OF FILE
 9998 WRITE(6,*)'  *** ERROR ENCOUNTERED, UNIT=',IUNIT
 9999 CLOSE(UNIT=IUNIT)
      IRET=-1
      RETURN
C
C
        ENTRY REFSYS(ISED,IFLAB)
        IF(ISED.LE.0)THEN
          IFLDEL=0
          WRITE(6,*) ' NO DECAY OF DELTAS'
        ELSE
          IFLDEL=1
          WRITE(6,*) ' ALL DELTAS DECAY BEFORE ANALYSIS'
        END IF
        IF(IFLAB.EQ.1)THEN
          IFLLAB=1
          WRITE(6,*) ' SELECTED SYSTEM FOR ANALYSIS: LAB-SYSTEM'
        ELSE
          IFLLAB=0
          WRITE(6,*) ' SELECTED SYSTEM FOR ANALYSIS:  NN-SYSTEM'
        END IF
        RETURN
C
C
        ENTRY OPFILE(IUNIN,IRETU)
C
C       OPEN FILE   DETERMINE BMAX,BETAL,GAMMAL,BMAX1,BMAX2,PFM
        IRETU=0
        IUNIT=IUNIN
        NPRTLO=0
         WRITE(6,*) 'UNIT NUMBER:',IUNIT
        IF(IUNIT.LE.0) THEN
         GOTO 1010
        END IF
      OPEN(UNIT=IUNIT,STATUS='OLD',FORM='FORMATTED')
C
C
C POSITION THE FILE
C
 1100 READ(UNIT=IUNIT,FMT=2120,END=1009,ERR=1009)
     *    IFILHI,DUMFIL,DUMMY,IDUM
 1110 READ(UNIT=IUNIT,FMT=2140) DA
      READ(UNIT=IUNIT,FMT=2120) IDUMUN,DUMFIL,TIMEIN,IDUM
      READ(UNIT=IUNIT,FMT=2120) JDUMUN,DUMFIL,DUMMY,IDUM
 2120 FORMAT(I3,A13,1E14.7,I3)
 2140 FORMAT(1X,5F10.4)
C
      IF((IDUMUN.GT.98).OR.(IDUMUN.LT.10)) THEN
         WRITE(6,*) 'FILE HEADING: IDUMUN=',IDUMUN
         GOTO 1010
      END IF
C     SAVE TIME OF OUTPUT-SEQUENCE IDUMUN
      TIMFIL(IDUMUN)=TIMEIN
C
      IF((IDUMUN-1).EQ.JDUMUN)THEN
C       IN THIS CASE WE HAVE A TIME SEQUENCE AND THE INPUT IS REPEATED
        GOTO 1110
      END IF
        WRITE(6,*) 'PARAMETER BLOCK OF INPUT FILE ',DUMFIL(1:4)
        WRITE(UNIT=6    ,FMT=2140) DA
C        FILENUMBER FIRST AND  LAST BLOCK
         IFILOW=JDUMUN+2
C       WRITE(UNIT=6    ,FMT=*) IUNIT,IFILHI,IFILOW
C
      BMAX1=DA(3)*(DA(1)**0.33333333)
      BMAX2=DA(3)*(DA(6)**0.33333333)
      BMAX=BMAX1+BMAX2
C     MINUS SIGN OF BETAL BECAUSE OF THE REFLECTION OF THE Z-AXIS ...
      BETAL=-DA(10)/SQRT(DA(10)*DA(10)+0.938*0.938)
      GAMMAL=1./SQRT(1.-BETAL*BETAL)
      TEMP=4.*(4.*PI/3.)**2
      PFM=DA(15)*HC/(DA(3)*TEMP**0.33333333)*1000.
      PPROJ=-1000.*DA(5)
      PTARG=-1000.*DA(10)
      IF(IFLLAB.EQ.1)THEN
          E1=SQRT(PPROJ**2+938.**2)
          PPROJ=PPROJ*GAMMAL-BETAL*GAMMAL*E1
          E1=SQRT(PTARG**2+938.**2)
          PTARG=PTARG*GAMMAL-BETAL*GAMMAL*E1
      END IF
C
      RETURN
C
C     ERROR EXIT
 1009 WRITE(6,*) 'ERROR ENCOUNTERED IN FIRST LINE OF FILE HEADING'
 1010 WRITE(6,*) 'ERROR ENCOUNTERED DURING READ IN OF FILE HEADING'
      WRITE(6,*) '*** INPUT CANCELED  ***   ENTRY OPFILE'
      IRETU=-1
      RETURN
C
      END
C
C****************   D E L D E C  ******************************
C
C  ...  ALLOW A DELTA TO DECAY, CHANGE THE DELTA TO AN APPROPRIATE
C       NUCLEON AND ADD THE PION TO THE LIST.
C
C  ...  IND   : ARRAY INDEX OF THE DECAYING DELTA (INPUT)
C       IRET  : RETURN CODE, 0 = SUCCESSFUL, <0 = ERROR OCCURRED
C       N     : ENSEMBLE NUMBER
C               NO OUTPUT
C
      SUBROUTINE DELDEC(IND,NPRTHI,IRET)
C
C
C ...  PARTICLE MASSES IN GEV
C
      PARAMETER (EMSDEL=1.232,EMSNUC=.938,EMSPIO=.138)
      PARAMETER (SM12M2=EMSNUC**2+EMSPIO**2)
      PARAMETER (PM12M2=EMSNUC**2*EMSPIO**2)
C
C
C ORIGINALLY  STNDRDB OF BBB, NOW MODIFIED
C...............  STANDARD INFORMATION BLOCKS   .............
C
C  CONSTANTS USED IN THE PROGRAM
C
      PARAMETER (PI=3.1415927,PI2=2.*PI,PISQ=PI*PI)
      PARAMETER (HC=1.2398)
C                2*PI*H-BAR*C
C
C DATA1,2,3
C    SOME RELICTS OF OLD AAA MAY BE STILL HERE ...
      PARAMETER (NPARMX=600,NENSMX=1)
      DIMENSION X(NPARMX),Y(NPARMX),Z(NPARMX),
     &          PX(NPARMX),PY(NPARMX),PZ(NPARMX),
     &          EM(NPARMX),ITYP(NPARMX),
     &          LASTCL(NPARMX),NCLCNT(NPARMX)
      DIMENSION NPART(NENSMX),BDIST(NENSMX),NPION(NENSMX)
      DIMENSION ITPTBL(10), TIMFIL(98),DA(22)
      DIMENSION TIMCNT(98),TIMPI(98),TIMCOL(98),TIMCPB(98),TIMRHO(98)
      DIMENSION TIMNUC(98),TIMNEL(98),TIMPNE(98),TIMRHP(98)
      PARAMETER (MXTPV3=45,MXCNV3=5,NMPRV3=9)
      INTEGER ICOUNT(MXCNV3,MXTPV3)
      COMMON /DAT1BK/X,Y,Z,PX,PY,PZ,EM,ITYP,LASTCL,NCLCNT
      COMMON /DAT2BK/NPART,BDIST,NPION,ITPTBL,TIMFIL,ICOUNT
      COMMON /DAT3BK/NCOLLT,NPAUBL,NDELDC
      COMMON /DAT4BK/TIMCNT,TIMPI,TIMCOL,TIMCPB,TIMNUC,TIMNEL,TIMPNE,
     &               TIMRHO,TIMRHP
C
      COMMON /OPENBK/ BMAX,BMAX1,BMAX2,BETAL,GAMMAL,IFILOW,IFILHI,PFM,
     &                DA,PPROJ,PTARG,TIME
C...............  STANDARD INFORMATION BLOCKS   .............
C
C
C
C  ...  THIS FUNCTION IS TRUE IF THE RANDOM SELECTION PICKS THE
C       1/3 BRANCH
C     LOGICAL THIRD
C<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
C<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
C     THIRD(DUMMY)=RANF(0) .GT. .666666666
C
C<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
C<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
C
      IRET=0
C  ...  BRANCH ON DELTA TYPE
      GOTO (103,104,105,106),ITYP(IND)-2
      WRITE(6,*)'ERROR, SELECT,  DELDEC , IND,ITYP:',IND,ITYP(IND)
      IRET=-5
      RETURN
C
C DL-
  103 IPI=7
      IN =1
      IC=3
      GOTO 1000
C
C DL0
  104 IF (RANF(0) .GT. 0.666666666) THEN
        IPI=7
        IN=2
        IC=3
      ELSE
        IPI=8
        IN=1
        IC=4
      END IF
      GOTO 1000
C
C DL+
  105 IF (RANF(0) .GT. 0.666666666) THEN
        IPI=9
        IN=1
        IC=3
      ELSE
        IPI=8
        IN=2
        IC=4
      END IF
      GOTO 1000
C
C DL++
  106 IPI=9
      IN=2
      IC=3
      GOTO 1000
C
 1000 PREL=DMOM(EM(IND))
C
C  ...  PICK RANDOM DIRECTION
C
      CT=1.-2.*RANF(0)
      ST=SQRT(1.-CT*CT)
      PHI=RANF(0)*PI2
      PXREL=PREL*COS(PHI)*ST
      PYREL=PREL*SIN(PHI)*ST
      PZREL=PREL*CT
C
C  ...  PION:
      IF (NPRTHI .GE. NPARMX) THEN
        IRET=-6
        RETURN
      END IF
C
      NPRTHI=NPRTHI+1
        X(NPRTHI)=X(IND)
        Y(NPRTHI)=Y(IND)
        Z(NPRTHI)=Z(IND)
      ITYP(NPRTHI)=IPI
      EM(NPRTHI)=EMSPIO
      CALL TRANS1(PXREL,PYREL,PZREL,EM(NPRTHI),
     &            PX(NPRTHI),PY(NPRTHI),PZ(NPRTHI),0,
     &            PX(IND),PY(IND),PZ(IND),EM(IND),
     &            +1.0,.FALSE.)
C
C  ...  NUCLEON
      ITYP(IND)=IN
      CALL TRANS1(-PXREL,-PYREL,-PZREL,EMSNUC,
     &            PX(IND),PY(IND),PZ(IND),0,
     &            PX(IND),PY(IND),PZ(IND),EM(IND),
     &            +1.0,.FALSE.)
      EM(IND)=EMSNUC
C
      RETURN
      END
C
C************************  T R A N S 1  ***********************
C
C  ...  LORENTZ TRANSFORMATION:
C       ARGS 1-4 DESCRIBE A 4-VECTOR IN THE REST FRAME OF THE PARTICLE
C       DEFINED BY ARGS 9-12. THE SUBROUTINE COMPUTES THE 4-VECTOR IN
C       THE COMP. FRAME AND STORES IT IN ARGS 5-8. THIS TRANSFORMATION
C       CAN BE REVERSED BY SETTING SIGN=-1. THE ENERGY COMPONENT IS
C       COMPUTED ONLY IF ECOMP=.TRUE.
C       NOTE - ALL 3 4-VECTORS CAN BE IDENTICAL
C
      SUBROUTINE TRANS1(PXP,PYP,PZP,EMP,
     &                  PX,PY,PZ,E,
     &                  P1,P2,P3,XM,
     &                  SIGN,ECOMP)
      LOGICAL ECOMP
C
C  ...  PXP,PYP,PZP  :  3-MOMENTUM IN THE PRIMED FRAME (INPUT)
C       EMP          :  MASS (!) IN THE PRIMED FRAME (INPUT)
C       PX,PY,PZ     :  3-MOMENTUM IN THE UNPRIMED FRAME (OUTPUT)
C       E            :  ENERGY (!) IN THE UNPRIMED FRAME
C                       (CONDITIONAL OUTPUT)
C       P1,P2,P3     :  3-MOMENTUM OF THE PARTICLE DEFINING THE REST
C                       FRAME (INPUT)
C       XM           :  MASS (!) OF THE REST-FRAME PARTICLE (INPUT)
C       SIGN         :  +1 : PRIMED FRAME IS THE REST FRAME, TRANSFORM
C                            TO THE COMP. FRAME
C                       -1 : PRIMED FRAME IS THE COMP. FRAME, TRANSFORM
C                            TO THE REST FRAME
C                       (INPUT)
C       ECOMP        :  LOGICAL SWITCH FOR COMP. OF E (INPUT)
C
C<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
C<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
C
      EP=SQRT(EMP*EMP+PXP*PXP+PYP*PYP+PZP*PZP)
      ET=SQRT(XM*XM+P1*P1+P2*P2+P3*P3)
      B1=P1/ET
      B2=P2/ET
      B3=P3/ET
      G=ET/XM
      BP=B1*PXP+B2*PYP+B3*PZP
      BPG=G*BP/(G+1.)
      BB=G*(BPG+EP*SIGN)
C
      PX=PXP+B1*BB
      PY=PYP+B2*BB
      PZ=PZP+B3*BB
C
      IF (ECOMP) E=G*(EP+SIGN*BP)
C
      RETURN
      END
C****************   D M O M ************************
C
C  ...  THIS FUNCTION DETERMINES
C       THE MOMENTUM OF THE DECAY PION IN THE DELTA REST FRAME
C       FROM THE DELTA MASS.
C
C       EM     : MASS OF THE DECAYING DELTA (INPUT)
C       DMOM   : MOMENTUM OF THE DECAY PION IN THE DELTA RET FRAME
C                (OUTPUT)
C
      FUNCTION DMOM(EM)
C<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      CHARACTER*33 VERNUM
      CHARACTER*46 PRONAM
      LOGICAL*1 TYPVER
C<>VERNUM<>
C<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
C
C
      PARAMETER (PI=3.1415927,PI2=2.*PI,PISQ=PI*PI)
C
C ...  PARTICLE MASSES IN GEV
C
      PARAMETER (EMSDEL=1.232,EMSNUC=.938,EMSPIO=.138)
      PARAMETER (SM12M2=EMSNUC**2+EMSPIO**2)
      PARAMETER (PM12M2=EMSNUC**2*EMSPIO**2)
C
C ...  WIDTH OF THE DELTA RESONANCE
C
      PARAMETER (WIDDEL=.120)
C<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
C
      EM2=EM*EM
      PSQ=((.5*(EM2-SM12M2))**2-PM12M2)/EM2
      IF (PSQ .LT. 0) THEN
        WRITE(6,*)'PSQ<0, DMOM, ',EM,PSQ
        DMOM=0.
      ELSE
        DMOM=SQRT(PSQ)
      END IF
      RETURN
      END
C************** S T A T I S T I C S **************
C
      SUBROUTINE DOSTAT
C
C ORIGINALLY  STNDRDB OF BBB, NOW MODIFIED
C...............  STANDARD INFORMATION BLOCKS   .............
C
C  CONSTANTS USED IN THE PROGRAM
C
      PARAMETER (PI=3.1415927,PI2=2.*PI,PISQ=PI*PI)
      PARAMETER (HC=1.2398)
C                2*PI*H-BAR*C
C
C DATA1,2,3
C    SOME RELICTS OF OLD AAA MAY BE STILL HERE ...
      PARAMETER (NPARMX=600,NENSMX=1)
      DIMENSION X(NPARMX),Y(NPARMX),Z(NPARMX),
     &          PX(NPARMX),PY(NPARMX),PZ(NPARMX),
     &          EM(NPARMX),ITYP(NPARMX),
     &          LASTCL(NPARMX),NCLCNT(NPARMX)
      DIMENSION NPART(NENSMX),BDIST(NENSMX),NPION(NENSMX)
      DIMENSION ITPTBL(10), TIMFIL(98),DA(22)
      DIMENSION TIMCNT(98),TIMPI(98),TIMCOL(98),TIMCPB(98),TIMRHO(98)
      DIMENSION TIMNUC(98),TIMNEL(98),TIMPNE(98),TIMRHP(98)
      PARAMETER (MXTPV3=45,MXCNV3=5,NMPRV3=9)
      INTEGER ICOUNT(MXCNV3,MXTPV3)
      COMMON /DAT1BK/X,Y,Z,PX,PY,PZ,EM,ITYP,LASTCL,NCLCNT
      COMMON /DAT2BK/NPART,BDIST,NPION,ITPTBL,TIMFIL,ICOUNT
      COMMON /DAT3BK/NCOLLT,NPAUBL,NDELDC
      COMMON /DAT4BK/TIMCNT,TIMPI,TIMCOL,TIMCPB,TIMNUC,TIMNEL,TIMPNE,
     &               TIMRHO,TIMRHP
C
      COMMON /OPENBK/ BMAX,BMAX1,BMAX2,BETAL,GAMMAL,IFILOW,IFILHI,PFM,
     &                DA,PPROJ,PTARG,TIME
C...............  STANDARD INFORMATION BLOCKS   .............
      PARAMETER (DEGRAD=180./PI)
C        PARTICLE OBSERVABLES
      DIMENSION RAP(NPARMX),PT(NPARMX),ETOT(NPARMX),PHI(NPARMX),
     *          THETA(NPARMX)
C        BIN VECTORS
      DIMENSION RAPBIN(17),RAPN(17,4),RAPPX(17,4),RAPPT(17,4)
      DIMENSION PHIBIN(9),PHIPR(9,4),PHICM(9,4),PHITA(9,4)
      DIMENSION PTBIN(31),PTCM(31,4)
      DIMENSION ITPCNT(10),PXDITP(10),QZZITP(10)
C
      NPRTLO=1
      NPRTHI=NPART(1)
C
C     FIRST CALCULATE SOME FURTHER OBSERVABLES
C
      DO 10 J=NPRTLO,NPRTHI
        PT(J)=SQRT(PX(J)*PX(J)+PY(J)*PY(J))
        ETOT(J)=SQRT(EM(J)*EM(J)+PX(J)*PX(J)+PY(J)*PY(J)+PZ(J)*PZ(J))
        RAP(J)=0.5*ALOG( (ETOT(J)+PZ(J)) / (ETOT(J)-PZ(J)) )
        PHI(J)=90.-DEGRAD*ATAN(PX(J)/MAX(ABS(PY(J)),1E-8) )
        THETA(J)=90.-DEGRAD*ATAN(PZ(J)/MAX(PT(J),1E-8) )
 10   CONTINUE
C
C       YOU MAY IMPLEMENT A FILTER HERE ...
C       ... THIS EXAMPLE, OF COURSE, HAS ONLY SENSE IN THE LAB-FRAME
C                                                          (IFLLAB=1)
C     DO 11 J=NPRTLO,NPRTHI
C       IF(ETOT(J)-EM(J).LT.25.) THEN
C         ITYP(J)=10
C       END IF
C       IF((THETA(J).GT.160.).OR.(THETA(J).LT.2.5)) THEN
C         ITYP(J)=10
C       END IF
C11   CONTINUE
C
C        BEGIN STATISTICS
C
      NEVENT=NEVENT+1
      DO 20 J=NPRTLO,NPRTHI
C        PARTICLE NUMBERS
        IT=ITYP(J)
        ITPCNT(IT)=ITPCNT(IT)+1
        IF(RAP(J).GE.RAPCM)THEN
           PXD=PX(J)
        ELSE
           PXD=-PX(J)
        END IF
        PXDITP(IT)=PXDITP(IT)+PXD
        QZZ=2.*PZ(J)*PZ(J)-PT(J)*PT(J)
        QZZITP(IT)=QZZITP(IT)+QZZ
        IT=ITPTBL(ITYP(J))
C        RAPIDITIES
        IBIN=INT( (RAP(J)-RAPTA)/RAPDIF +4.5)
        IBIN=MIN(15,MAX(1,IBIN) )
        RAPN(IBIN,IT)=RAPN(IBIN,IT)+1.
        RAPPX(IBIN,IT)=RAPPX(IBIN,IT)+PX(J)
        RAPPT(IBIN,IT)=RAPPT(IBIN,IT)+PT(J)
C        PHI-DISTRIBUTION (SYMMETRY RESP. TO REACTION PLANE ASSUMED)
        IBIN=INT( PHI(J)/PHIDIF +1.)
        IBIN=MIN(9,MAX(1,IBIN) )
        IF( ABS(RAP(J)-RAPPR).LE.RAPDIF)THEN
C         DISTRIBUTION AT PROJECTILE RAPIDITY
          PHIPR(IBIN,IT)=PHIPR(IBIN,IT)+1.
        ELSEIF( ABS(RAP(J)-RAPTA).LE.RAPDIF)THEN
C         DISTRIBUTION AT TARGET RAPIDITY
          PHITA(IBIN,IT)=PHITA(IBIN,IT)+1.
        ELSEIF( ABS(RAP(J)-RAPCM).LE.RAPDIF)THEN
C         DISTRIBUTION AT CENTER-OF-MASS RAPIDITY
          PHICM(IBIN,IT)=PHICM(IBIN,IT)+1.
C    NOW CALCULATE  PT-SPECTRUM AT CENTER-OF-MASS RAPIDITY
          IBIN=INT( PT(J)/PTDIF +1.)
          IBIN=MIN(31,MAX(1,IBIN) )
          PTCM(IBIN,IT)=PTCM(IBIN,IT)+1.
        END IF
C
C   FURTHER ANALYSIS E.G. DN/D COS THETA ETC. MAY BE INCLUDED ...
C
 20   CONTINUE
C
      RETURN
C
C        INITIALIZATION OF STATISTIC ROUTINE
C
      ENTRY STATIN
C
      NEVENT=0
      RHOVOL=4./3.*PI*8.
C        RESET STATISTIC BINS
      DO 41 J=1,98
        TIMCNT(J)=0.0
        TIMPI(J)=0.0
        TIMCOL(J)=0.0
        TIMCPB(J)=0.0
        TIMNUC(J)=0.0
        TIMNEL(J)=0.0
        TIMPNE(J)=0.0
        TIMRHO(J)=0.0
        TIMRHP(J)=0.0
 41   CONTINUE
C
      DO 42 I=1,4
        DO 43 J=1,17
          RAPN(J,I)=0.0
          RAPPX(J,I)=0.0
          RAPPT(J,I)=0.0
 43     CONTINUE
        DO 44 J=1,9
          PHIPR(J,I)=0.0
          PHICM(J,I)=0.0
          PHITA(J,I)=0.0
 44     CONTINUE
        DO 45 J=1,31
          PTCM(J,I)=0.0
 45     CONTINUE
 42   CONTINUE
C
C     SET BINS
C       RAPIDITIES OF PROJECTILE AND TARGET
      EPROJ=SQRT(938.0**2+PPROJ**2)
      ETARG=SQRT(938.0**2+PTARG**2)
      RAPPR=0.5*ALOG((EPROJ+PPROJ)/(EPROJ-PPROJ))
      RAPTA=0.5*ALOG((ETARG+PTARG)/(ETARG-PTARG))
      RAPDIF=0.1*(RAPPR-RAPTA)
      XPROJ=MAX(DA(1),0.)
      XTARG=MAX(DA(6),0.)
      RAPCM=(XPROJ*RAPPR + XTARG*RAPTA)/(XPROJ+XTARG)
      DO 46 J=1,17
        RAPBIN(J)=RAPTA+FLOAT(J-4)*RAPDIF
 46   CONTINUE
      PHIDIF=20.
      PHIDI1=PHIDIF/2.
      DO 47 J=1,9
        PHIBIN(J)=FLOAT(J)*PHIDIF-PHIDI1
 47   CONTINUE
      PTDIF=25.
      PTDI1=PTDIF/2.
      DO 48 J=1,31
        PTBIN(J)=FLOAT(J)*PTDIF-PTDI1
 48   CONTINUE
C
C       ITYP-COUNTER
C
      DO 49 J=1,10
        ITPCNT(J)=0
        PXDITP(J)=0
        QZZITP(J)=0
 49   CONTINUE
C
C       ITYP-TABLE SET GROUPS FOR N,P,DELTAS,PIONS
C         HERE:  GROUP 1: PROT.      2:  PI+       3:  PI-     4:OTHER
C   BETTER STATISTICS  1: PROT+NEUT  2: PI +0-     3: DELTAS   4:DROPPED
      ITPTBL(1)=4
      ITPTBL(2)=1
      ITPTBL(3)=4
      ITPTBL(4)=4
      ITPTBL(5)=4
      ITPTBL(6)=4
      ITPTBL(7)=3
      ITPTBL(8)=4
      ITPTBL(9)=2
      ITPTBL(10)=4
C
      RETURN
C
C        PRINT OUT STATISTICS
C
      ENTRY STATPR
C          TIME EVOLUTION
      WRITE(6,*)
      WRITE(6,*) ' ***********  S T A T I S T I C S  ****************'
      WRITE(6,*)
C   TIME-EVOLUTION VALUES HAVE BEEN TAKEN IN SUBROUTINE NXTEV
C   TIME-EVOLUTION: NUMBER OF FREE PIONS (NO DELTAS),
C                   NUMBER OF ALL POSSIBLE COLLISIONS (INCL. PAULI-BL.)
C                   NUMBER OF ALL NON PAULI-BLOCKED COLLISIONS
C                   NUMBER OF ALL NON P.-BL. NUCL(P,N)-NUCL. COLLISIONS
C                   NUMBER OF ALL ELASTIC NUCL.-NUCL. COLLISIONS
C                   NUMBER OF ALL ELASTIC PROTON-NEUTRON COLLISIONS
C                   AVERAGE CENTRAL(X=0,Y=0,Z=0) BARYON DENSITY (FM**-3)
C                   AVERAGE CENTRAL(X=0,Y=0,Z=0) PION DENSITY (FM**-3)
      WRITE(6,*)
     * 'TIME EVOLUTION: MEAN PION+COLLISION NUMBERS, CENTRAL DENSITIES'
      WRITE(6,*)  'T(FM/C) #FREE PI #POSS.CL #REAL CL',
     *           ' R.NUC-CL EL.NU-CL EL.PN-CL RHO(0)FM-3:BAR-PI'
 61   FORMAT(F8.2,F9.3,5F9.2,2F9.6)
      DO 62 J=98,1,-1
       IF(TIMCNT(J).GT.0)THEN
        WRITE(6,61) TIMFIL(J), TIMPI(J)/TIMCNT(J),TIMCOL(J)/TIMCNT(J),
     *       (TIMCOL(J)-TIMCPB(J))/TIMCNT(J),TIMNUC(J)/TIMCNT(J),
     *        TIMNEL(J)/TIMCNT(J),TIMPNE(J)/TIMCNT(J),
     *        TIMRHO(J)/TIMCNT(J)/RHOVOL,TIMRHP(J)/TIMCNT(J)/RHOVOL
       END IF
 62   CONTINUE
C
      IF(NEVENT.LE.0)THEN
        WRITE(6,*) ' SORRY - NO ANALYSIS WITHOUT EVENTS READ IN ... '
        RETURN
      END IF
      WRITE(6,*) ' ********** '
      WRITE(6,*) ' **********   ANALYSIS OF EVENTS AT TIME ',TIME
      XEV=FLOAT(NEVENT)
      WRITE(6,*) ' **********   MEAN NUMBERS/EVENT, # OF EVENTS:',NEVENT
      WRITE(6,*)      'NEUTRON  PROTON',
     *'  DELTA-  DELTA0  DELTA+ DELTA++     PI-     PI0     PI+ DROPPED'
      WRITE(6,63) (FLOAT(ITPCNT(J))/XEV, J=1,10 )
 63   FORMAT(2F8.2,7F8.3,F8.2)
      WRITE(6,64) (PXDITP(J)/MAX(ITPCNT(J),1),J=1,9), 'PXDIR '
      WRITE(6,64) (QZZITP(J)/MAX(ITPCNT(J),1)*1E-5,J=1,9), ' QZZ  '
 64   FORMAT(9F8.3,1X,A6,1X)
      WRITE(6,*) 'PXDIR=<PX SIGN(Y-Y(CM))>(MEV),  ',
     *           'QZZ=<2PZ**2 - PT**2>(1E5 MEV**2)'
C             NORMALIZE STATISTIC COUNTERS
      DO 65 I=1,3
        DO 66 J=2,16
          IF(RAPN(J,I).GT.0)THEN
            RAPPX(J,I)=RAPPX(J,I)/RAPN(J,I)
            RAPPT(J,I)=RAPPT(J,I)/RAPN(J,I)
            RAPN(J,I)=RAPN(J,I)/XEV/RAPDIF
          END IF
 66     CONTINUE
        DO 67 J=1,9
          PHIPR(J,I)=PHIPR(J,I)/XEV/PHIDIF
          PHITA(J,I)=PHITA(J,I)/XEV/PHIDIF
          PHICM(J,I)=PHICM(J,I)/XEV/PHIDIF
 67     CONTINUE
        DO 68 J=1,30
          PTCM(J,I)=PTCM(J,I)/XEV/PTDIF
 68     CONTINUE
 65   CONTINUE
C             PRINT OUT STATISTIC COUNTERS
      WRITE(6,*)
      WRITE(6,*) ' ******  ANALYSIS OF DISTRIBUTIONS VS. Y, PHI, PT '
      WRITE(6,*) ' ANALYSIS GROUPS: 1=PROT.        2= PI+       3= PI- '
      WRITE(6,*)
      WRITE(6,73) RAPTA,RAPPR
 73   FORMAT(1X,' RAPIDITY DISTRIBUTION DN/DY  PX(Y)  PT(Y), Y(TARG)=',
     *            F6.3,', Y(PROJ)=',F6.3)
      WRITE(6,*) ' RAP. Y  DN/DY:1 PX(Y):1 PT(Y)1',
     *                  '  DN/DY:2 PX(Y):2 PT(Y)2',
     *                  '  DN/DY:3 PX(Y):3 PT(Y)3'
 71   FORMAT(F8.4,3(1X,2F8.2,F7.2))
      DO 72 J=2,16
        WRITE(6,71) RAPBIN(J),( RAPN(J,I),RAPPX(J,I),RAPPT(J,I), I=1,3)
 72   CONTINUE
      WRITE(6,*)
      WRITE(6,76) RAPTA,RAPCM,RAPPR,RAPDIF
 76   FORMAT(1X,'AZIMUTHAL DN/DPHI DIST. AT Y(TARG)=',F6.3,', Y(CM)=',
     *       F6.3,', Y(PROJ)=',F6.3,'+-',F5.3)
      WRITE(6,*) ' PHI  Y(TA):1 Y(CM):1 Y(PR):1',
     *               '  Y(TA):2 Y(CM):2 Y(PR):2',
     *               '  Y(TA):3 Y(CM):3 Y(PR):3'
 74   FORMAT(F5.0,3(1X,3F8.4))
      DO 75 J=1,9
        WRITE(6,74) PHIBIN(J),(PHITA(J,I),PHICM(J,I),PHIPR(J,I), I=1,3)
 75   CONTINUE
      WRITE(6,*)
      WRITE(6,79) RAPCM,RAPDIF
 79   FORMAT(1X,'TRANSVERSE MOMENTUM SPECTRA DN/DPT AND DN/(PT DPT) AT',
     *       ' Y(CM)=',F6.3,'+-',F5.3)
      WRITE(6,*) ' PT(MEV)  DN/DPT:GR1 DN/PTDPT:1',
     *                   '  DN/DPT:GR2 DN/PTDPT:2',
     *                   '  DN/DPT:GR3 DN/PTDPT:3'
 77   FORMAT(F9.2,3(1P,1X,2E11.4))
      DO 78 J=1,30
        WRITE(6,77) PTBIN(J),( PTCM(J,I), PTCM(J,I)/PTBIN(J), I=1,3)
 78   CONTINUE
C
      WRITE(6,*)
      WRITE(6,*)
     * ' ************  E N D   O F   S T A T I S T I C S  ********'
C
      RETURN
      END
C
C************************ RANF ***********************************
C
      FUNCTION RANF(X)
      RANF=DRAND48()
      RETURN
C           INITIALIZATION OF THE SEED WITH AN ODD INTEGER
      ENTRY SEED(I)
      ISEED=I+1-MOD(I,2)
      CALL SRAND48(ISEED)
      WRITE(6,*)'FIXED SEED = ',ISEED
      RETURN
C
      END
