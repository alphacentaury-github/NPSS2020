      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C
      COMMON/PAUL/ IPAULI,NEDEN,NPAMA1,NPAMA2
      COMMON/CONS/PI,PIOTWO,PIOFR,SQTWO,
     1            HBROVM, HBAROM, OSCLSP, OSCREL, OMEGEN,
     2            QPAULI(25,2)
      COMMON/OSCD/OSCARR(12,72,2), GAMCOM(25,2)
      COMMON/DTFU/VECKSP( 72),NOSC,LOSC,IOP
      COMMON/MESH/
     1            TXMESH(72), TWEIGH(72),
     2            SCALE, NDIM,NDIMT
      COMMON/METH/NMETH1,NMAX,NMAXT,LLMAX,INDMAX,IWIED,IINTER
      COMMON/QUNU/ISPIN,JTOTAL,
     1            LORB(2),NORB(2),LCM, NCM
      COMMON/STORE/WORKVC(10440),VECDRM(144)
      COMMON /REIDIN/ VPIN(15,8),APIN(6,8),NSPIN(15,8),NAIN(8)
      COMMON /MESHIN/ TXMIN(24),WXMIN(24)
      OPEN(8,ACCESS='DIRECT',RECL=1200)
C     OPEN(9,FILE='DEFEK.OUT')
      CALL CALGM
      STOP
      END
      SUBROUTINE CALGM
C
C  SUBPROGRAM FOR CALCULATING G IN OSCILLATORBASIS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C
      COMMON/OUTC/IPRI(4)
      COMMON/PAUL/ IPAULI,NEDEN,NPAMA1,NPAMA2
      COMMON/CONS/PI,PIOTWO,PIOFR,SQTWO,
     1            HBROVM, HBAROM, OSCLSP, OSCREL, OMEGEN,
     2            QPAULI(25,2)
      COMMON/MESH/
     1            TXMESH(72), TWEIGH(72),
     2            SCALE, NDIM,NDIMT
      COMMON/METH/NMETH1,NMAX,NMAXT,LLMAX,INDMAX,IWIED,IINTER
      COMMON/QUNU/ISPIN,JTOTAL,
     1            LORB(2),NORB(2),LCM, NCM
      COMMON/STORE/WORKVC(10440),VECDRM(144)
C
      DIMENSION POTMAT(72,72),GFINAL(25,25,4),WORKMT(50,100)
      EQUIVALENCE (WORKVC(1), POTMAT(1,1))
      EQUIVALENCE (WORKVC(1), GFINAL(1,1,1))
      EQUIVALENCE (WORKVC(5440), WORKMT(1,1))
C
C
C
C  MATHEMATICAL CONSTANTS NEEDED
C
      PI = 3.1415926535897932
      PIOTWO = PI / 2.0D0
      PIOFR = PI / 4.0D0
      SQTWO = DSQRT(2.0D0)
C
C  PHYSICAL CONSTANTS NEEDED
C
      HBROVM = 41.467
C
      READ (5,20) IPRI,IINTER
C
C     IPRI CONTROLS PRINT OUTPUT
C   IPRI(1) : OSCILLATOR MATRIX ELEMENTS ARE PRINTED FOR
C        RADIAL QUANTUM NUMBERS RANGING FROM 0 TO IPRI(1)-1
C   IPRI(2) : PRINT PAULI OPERATOR (IF >0)
C   IPRI(3) : PRINT MESH IN K-SPACE (IF >0)
C   IPRI(4) : PRINT DEFECT FUNCTION IN MOMENTUM SPACE FOR
C                  RELATIVE OSCILLATOR STATES UP TO IPRI(4)
C                  PAULI EFFECTS IGNORED
C
C   IINTER SELECTION OF POTENTIAL V
C        IINTER=1 REID SOFT-CORE
C        ELSE CALL OBNN
C
    1 CONTINUE
      READ (5,20) IWIED
C
C     IWIED CONTROLS THE CONTINUATION OF THE CALCULATION:
C     = 3   STOP
C     = 0   SET UP MESH POINTS, CALCULATE V AND G
C     = 1   CALCULATE V AND G (USE MESHPOINTS FROM PREVIOUS RUN)
C     = 2   CALCULATE G (USE MESHPOINTS AND V FROM PREVIOUS RUN)
C
      IF(IWIED.GE.3) RETURN
      READ (5,20) NMAX, LORB(1), LORB(2), ISPIN, JTOTAL,NCM,LCM,OSCLSP,
     1            OMEGEN
   20 FORMAT(7(5X,I2)/2(5X,F10.5))
      READ(5,20) IPAULI,NEDEN,NPAMA1,NPAMA2
C
C  HERE THE SPECIFICATIONS ARE READ IN FOR THE G-MATRIXELEMENTS TO BE
C  CALCULATED
C    NMAX:= MAXIMAL RADIAL QUANTUM NUMBER FOR THE OSCILLATOR FUNKTIONS
C      FOR THE RELATIVE MOTION, NOTE THAT NMAX ALSO DEFINES THE
C      LARGEST RADIAL QUANTUM NUMBER WHICH IS CONSIDERED FOR THE
C      CALCULATION OF THE PAULI CORRECTION.
C      TYPICAL VALUE: NMAX=15
C    LORB(1),LORB(2) := QUANTUM NUMBER FOR THE ORBITAL ANGULAR MOMENTUM
C      FOR THE RELATIVE MOTION, IN THE CASE OF UNCOUPLED CHANNELS
C      LORB(1)=LORB(2)=ANGULAR MOMENTUM OF THE PARTIAL WAVE, E.G.
C      FOR THE PARTIAL WAVE 3D2: LORB(1)=LORB(2)=2
C      IN THE CASE OF COUPLED CHANNELS LORB(1)=J-1, LORB(2)=J+1
C      EXAMPLE: 3S1-3D1: LORB(1)=0, LORB(2)=2
C    ISPIN:= TOTAL SPIN OF THE INTERACTING NUCLEONS, E.G. ISPIN=1 FOR
C      3D2 PARTIAL WAVE.
C    JTOTAL:= J, THE TOTAL ANGUALAR MOMENTUM OF PARTIAL WAVE
C    NCM := RADIAL QUANTUM NUMBER FOR THE OSCILLATOR STATE OF CENTER
C      OF MASS MOTION: NCM=1,2,3...
C    LCM := ORBITAL ANGULAR MOMENTUM FOR CENTER OF MASS
C    OSCLSP:= OSCILLATORLENGTH FOR THE OSCILLATOR FUNCTIONS GIVEN IN
C      FEMTOMETER, FOR A NUCLEUS LIKE 16O OSCLSP=1.72 IS APPROPRIATE
C    OMEGEN:= STARTING ENERGY TO BE USED IN THE BETHE-GOLDSTONE EQ.
C      IN MEV. OMEGEN SHOULD BE NEGATIVE (THE SUM OF
C      SINGLE-PARTICLE ENERGIES OF THE INTERACTING NUCLEONS)
C    IPAULI:= CHOICE OF PAULI OPERATOR TO BE USED
C       IPAULI=0: NO PAULI OPERATOR
C       IPAULI=1: PAULI OPERATOR IN EDEN EMERY APPROXIMATION, WHICH
C       MEANS Q=1 FOR 2*NCM+LCM+2*N+L >= NEDEN, NOTE THAT IN THIS
C       EQUATION THE RADIAL QUANTUM NUMBERS FOR THE OSCILATOR OF
C       CM AN RELATIVE MOTION, NCM AND N, HAVE A MINIMAL VALUE OF 0.
C       FOR 16O NEDEN=5 IS A REASONABLE VALUE.
C       IPAULI=2: SO CALLED ANGLE AVERAGED PAULI OPERATOR DEFINED IN
C       EQ.(5) OF NUCL.PHYS. A150 PAGE 467. THE PAULI OPERATOR
C       OF THIS CHOICE IS CONTROLLED BY NPAMA1 AND NPAMA2 WITH
C       Q=1 IF ( 2*N1+L1.GT.NPAMA1 .AND. 2*N2+L2.GT.NPAMA1 )
C           AND ( 2*N1+L1.GT.NPAMA2 .OR. 2*N2+L2.GT.NPAMA2 )
C
      IF(IWIED.NE.0) GOTO 2
      CALL GNMESH
    2 CONTINUE
C
C
      CALL GNOSCD
C
C
C  AT THIS STAGE THE TRANSITIONMATRIXELEMENTS HAVE TO BE GENERATED
C  IN MOMENTUM REPRESENTATION FOR THE OMEGAENERGIE NEEDED.
C
      IF(IWIED.EQ.2) GOTO 3
      IF(IINTER.EQ.1) THEN
       CALL GENPOT
      ELSE
       CALL GENPOB
      END IF
    3 CONTINUE
C
C
      CALL GENTOS
C
C
C  THE TRANSITIONMATRIXELEMENTS ARE TRANSFORMED INTO OSCILLATORBASIS
C
      DO 49 IND = 1, INDMAX
      CALL GENGAM
      CALL GENOSC
C
      DO 46 K2 = 1, NDIM
      KK2 = K2 +      NDIM
      IF(IND.EQ.1) KK2 = K2
      READ(8,REC=KK2) (VECDRM(K1),K1=1,NDIMT)
      DO 46 K1 = 1, NDIM
      KK1 = K1
      IF(IND.EQ.3) KK1 = K1 + NDIM
      POTMAT(K1,K2) = VECDRM(KK1)
   46 CONTINUE
C
      IF(IPRI(4).GT.0) CALL DEFEKT(POTMAT,IND)
C
C
      CALL TRFMAT(POTMAT,IND)
C
C
      DO 47 N1 = 1, NMAX
      NN1 = N1
      IF(IND.EQ.3) NN1 = N1 + NMAX
      DO 47 N2 = 1, NMAX
      NN2 = N2 + NMAXT + NMAX
      IF(IND.EQ.1) NN2 = N2 + NMAXT
      WORKMT(NN1,NN2) = POTMAT(N1,N2)
      IF(IND.EQ.2) WORKMT(N1 + NMAX, N2 + NMAXT) = POTMAT(N2,N1)
   47 CONTINUE
C
   49 CONTINUE
C
C
      CALL CORR2
C
C
      NSCH = IPRI(1)
      IF(NSCH.LE.0) NSCH = 5
      IF(NSCH.GT.NMAX) NSCH=NMAX
      DO 60 N1 = 1, NMAX
      DO 60 N2 = 1, NMAX
      GFINAL(N1,N2,1) = WORKMT(N1, N2 + NMAXT)
      GFINAL(N1,N2,2) = WORKMT(N1, N2 + NMAXT  + NMAX)
      GFINAL(N1,N2,3) = WORKMT(N1 + NMAX, N2 + NMAXT )
      GFINAL(N1,N2,4) = WORKMT(N1 + NMAX, N2 + NMAXT  + NMAX)
   60 CONTINUE
C
C
C
      NCCM = NCM - 1
      NHCMA=NCCM+NCCM+LCM +1
      WRITE (6, 80)LORB(1),LORB(2),ISPIN, JTOTAL, NCCM, LCM, NMAX,
     1         OMEGEN, OSCLSP, HBAROM
   80 FORMAT(  ////, 10X, ' REACTION MATRIX ELEMENTS IN OSCILLATOR BASI
     1S'/10X,' FOR (L1,L2) = (',I2,',',I2,'), S = ',I2,', J = ', I2,
     2' AND (NCM,LCM) = (',I2,',',I1,').',/,10X,
     3             I3,' OSCILLATOR STATES WERE TAKEN', 
     4    ' INTO ACCOUNT.',/, 10X, ' THE SUM OF THE SINGLE-PARTICLE ENER
     5GIES IS OMEGA = ', F7.2,' MEV.'/10X,
     5' THE OSCILLATOR LENGTH IS ', F7.2,
     6' FM.',/,10X,' THE OSCILLATOR ENERGY IS',F7.2,' MEV.',////)
      INDEND = LLMAX * LLMAX
      DO 999 I = 1, INDEND
C
      L1=LORB(1)
      IF(I.GT.2) L1=LORB(2)
      WRITE (6,982)
  982 FORMAT(// 12X,'GNN',3X,' 1',9X,' 2',9X,' 3',9X,' 4', 9X, ' 5')
      DO 882 N1 = 1, NSCH
      WRITE(6,82)  N1,L1,(GFINAL(N1,N2,I) , N2 = 1, NSCH)
   82 FORMAT(1H ,'N,L=',2X,2I3,1X,5(1PE11.4)/(1H ,13X,5(1PE11.4)))
C
  882 CONTINUE
  999 CONTINUE
C
      IF(IPRI(2).GE.1) THEN
       WRITE (6,22)((QPAULI(I,J),I = 1, NMAX), J = 1,LLMAX)
      ENDIF
   22 FORMAT(//,4X,' THE MATRIX ELEMENTS OF THE PAULIOPERATOR USED ARE
     1',/,(5X,5E12.5))
C
C
      GOTO 1
C
      END
      SUBROUTINE DEFEKT(POTMAT,IND)
C
C     CALCULATES THE DEFEKT FUNCTION FOR T
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/MESH/
     1            TXMESH(72), TWEIGH(72),
     2            SCALE, NDIM,NDIMT
      COMMON/QUNU/ISPIN,JTOTAL,
     1            LORB(2),NORB(2),LCM, NCM
      COMMON/METH/NMETH1,NMAX,NMAXT,LLMAX,INDMAX,IWIED,IINTER
      COMMON/OUTC/IPRI(4)
      COMMON/CONS/PI,PIOTWO,PIOFR,SQTWO,
     1            HBROVM, HBAROM, OSCLSP, OSCREL, OMEGEN,
     2            QPAULI(25,2)
      COMMON/OSCD/OSCARR(12,72,2), GAMCOM(25,2)
      DIMENSION POTMAT(72,72),WAVE(72),WAVP(72)
C
C
      OMEGTM = OMEGEN - 0.5 * HBAROM * (DBLE(2 * NCM + LCM - 2 ) +1.5)
C
      IC1=IPRI(4)
      IF(IC1.GT.NMETH1) IC1=NMETH1
      I=1
      IF(IND.GT.2) I=2
      LUNC=LORB(I)
      LWAVE=LORB(2)
      IF(IND.EQ.1) LWAVE=LORB(1)
      DO 20 N = 1,IC1
      DO 11 K1=1,NDIM
      SUM=0.D0
      SUMP=0.D0
      DO 10 K = 1,NDIM
      XKSQ = TXMESH(K) * TXMESH(K)
      SUM = SUM + POTMAT(K,K1) * OSCARR(N,K,I) * XKSQ * TWEIGH(K)
      IF(IND.EQ.2)
     1 SUMP = SUMP + POTMAT(K1,K)*OSCARR(N,K,1) * XKSQ *TWEIGH(K)
   10 CONTINUE
      IF(IND.EQ.2)
     1 WAVP(K1)=SUMP/(OMEGTM/HBROVM - TXMESH(K) * TXMESH(K))*2/PI
   11 WAVE(K1)=SUM/(OMEGTM/HBROVM - TXMESH(K) * TXMESH(K))*2/PI
      WRITE(6,101) LUNC,N,LWAVE,(WAVE(IK),IK=1,NDIM)
C     WRITE(9,109) (TXMESH(IK),WAVE(IK),TWEIGH(IK),IK=1,NDIM)
      IF(IND.EQ.2) THEN
C      WRITE(9,109) (TXMESH(IK),WAVP(IK),TWEIGH(IK),IK=1,NDIM)
       WRITE(6,101) LWAVE,N,LUNC,(WAVP(IK),IK=1,NDIM)
      ENDIF
  101 FORMAT(//' THE DEFECT FUNCTION FOR T IN MOMENTUM SPACE',
     1 ' OF THE INITIAL STATE L,N+1',2I3/' ( HERE THE COMPONENT',
     2 ' WITH L =',I2,' ) :'//(5D12.4))
   20 CONTINUE
C 109 FORMAT(3D20.10)
      RETURN
      END
      SUBROUTINE GENPOT
C
C  THE POTENTIALMATRIXELEMENTS FOR REID ARE GENERATED IN MOMENTUMSPACE.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/MESH/
     1            TXMESH(72), TWEIGH(72),
     2            SCALE, NDIM,NDIMT
      COMMON/QUNU/ISPIN,JTOTAL,
     1            LORB(2),NORB(2),LCM, NCM
      COMMON/STORE/WORKVC(10440),VECDRM(144)
C
C  PREPARATION OF POTENTIAL DATA  FOR REID
C
      LN = LORB(1)
      LNP = LORB(2)
      JREID = JTOTAL
      IREID = ISPIN
      CALL PRERED(JREID,IREID,LN,LNP)
C
C
      DO 30 K2 = 1, NDIMT
C
      KK2 = K2
      IF(K2.GT.NDIM) KK2 = K2 - NDIM
      XK2 = TXMESH(KK2)
      L2 = LORB(2)
      IF(K2.LE.NDIM) L2 = LORB(1)
C
      DO 29 K1 = 1, K2
C
      KK1 = K1
      IF(K1.GT.NDIM) KK1 = K1 - NDIM
      XK1 = TXMESH(KK1)
      L1 = LORB(1)
      IF(K1.GT.NDIM) L1 = LORB(2)
C
C
      TERM = REID(ISPIN,JTOTAL,XK1,L1,XK2,L2)
      KVEC = K2 + (K1 - 1) * NDIMT - (K1*(K1-1))/2
      WORKVC(KVEC)= TERM
C
   29 CONTINUE
   30 CONTINUE
      DO 40 K2 = 1, NDIMT
      DO 39 K1 = 1, NDIMT
      NK1 = K1
      NK2 = K2
      IF(K1.LE.K2) GOTO 35
      NK1 = K2
      NK2 = K1
   35 CONTINUE
      KVEC = NK2 + (NK1-1) * NDIMT - (NK1*(NK1-1))/2
C
      VECDRM(K1) = WORKVC(KVEC)
C
   39 CONTINUE
C
      IRECOR = NDIMT + K2
      WRITE(8,REC=IRECOR) (VECDRM(K1),K1=1,NDIMT)
C
   40 CONTINUE
C
C
      RETURN
      END
      SUBROUTINE GENPOB
C
C  THE POTENTIALMATRIXELEMENTS FOR OBE ARE GENERATED IN MOMENTUMSPACE.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/MESH/
     1            TXMESH(72), TWEIGH(72),
     2            SCALE, NDIM,NDIMT
      COMMON/QUNU/ISPIN,JTOTAL,
     1            LORB(2),NORB(2),LCM, NCM
      COMMON/STORE/WORKVC(10440),VECDRM(144)
      COMMON/CONS/PI,PIOTWO,PIOFR,SQTWO,
     1            HBROVM, HBAROM, OSCLSP, OSCREL, OMEGEN,
     2            QPAULI(25,2)
      COMMON /KGPS/ GP(97),CC,NGP,IXMEV,IYMEV
      COMMON /CRDWRT/ KREAD,KWRITE,KPUNCH,KDA(9)
      COMMON /CPOT/   V(6),XMEV,YMEV
      COMMON /CSTATE/ JREID,HEFORM,SING,TRIP,COUP,ENDEP,LABEL
      COMMON /OBCON/ UF,PIH,INDX
      LOGICAL C3P0,ENDEP,HEFORM,SING,TRIP,COUP
      LOGICAL INDX
C
      IF (INDX) GO TO 10
      INDX = .TRUE.
      KREAD=5
      KWRITE=6
      HEFORM=.FALSE.
C
      WN=938.9D0
      DWN=1.D0/WN
      WNQ=WN*WN
C
C  PREPARATION OF POTENTIAL DATA
C
   10 CONTINUE
      DO 20 I=1,NDIM
   20 GP(I) = TXMESH(I)*UF
      CC = UF
      NGP = NDIM
      LN = LORB(1)
      LNP = LORB(2)
      JREID = JTOTAL
      IREID = ISPIN
      C3P0=IREID.EQ.1.AND.JREID.EQ.0.AND.LN.EQ.1
C     PMEVQ = 0.5*WN*HBAROM*(DBLE(NCM+NCM+LCM)-0.5)
C     PPOTQ=PMEVQ
C     PMEV=DSQRT(PPOTQ)
C     PMEV=0.D0
C     ZMEV = OMEGEN + 2.*WN
C     ZREL=ZMEV
C     ZNRL = OMEGEN
C     SMEV = 2.*WN
C
C     CONF : CONSTANT TO TRANSFORM THE MATRIXELEMENTS EVALUATED IN OBNN
C       TO UNITS USED IN THE GMATRIX PROGRAMM
C     CONF = (HAQUER * C)**3 / (HAQUER**2/ MNUCLEON) * PI / 2
C
      CONF=2.910030667D+05
      ISING=0
      ITRIP=0
      ICOUP=0
      IF(ISPIN.NE.0) GOTO 50
      ISING=1
      GOTO 51
   50 IF(LN.NE.LNP) GOTO 52
      IF(C3P0) GOTO 52
      ITRIP=1
      GOTO 51
   52 ICOUP=1
   51 SING=ISING.EQ.1
      TRIP=ITRIP.EQ.1
      COUP=ICOUP.EQ.1
      DO 30 K2=1,NDIM
      YMEV=GP(K2)
      IYMEV = K2
      DO 29 K1=1,K2
      XMEV=GP(K1)
      IXMEV = K1
C
C     CALL OF OBE SUBROUTINE
C
C     CALL BONN
C
      IF(ISING.EQ.1) GOTO 53
      IF(ITRIP.EQ.1) GOTO 54
      IF(C3P0) GOTO 55
      KK2=K2+NDIM
      KK1=K1+NDIM
      KVEC=K2+(K1-1)*2*NDIM-(K1*(K1-1))/2
      WORKVC(KVEC)=V(4)*CONF
      KVEC=KK2+(KK1-1)*2*NDIM-(KK1*(KK1-1))/2
      WORKVC(KVEC)=V(3)*CONF
      KVEC=KK2+(K1-1)*2*NDIM-(K1*(K1-1))/2
      WORKVC(KVEC)=CONF*V(6)
      KVEC=KK1+(K2-1)*2*NDIM-(K2*(K2-1))/2
      WORKVC(KVEC)=CONF*V(5)
      GOTO 29
   55 KVEC=K2+(K1-1)*NDIM-(K1*(K1-1))/2
      WORKVC(KVEC)=CONF*V(3)
      GOTO 29
   53 KVEC=K2+(K1-1)*NDIM-(K1*(K1-1))/2
      WORKVC(KVEC)=CONF*V(1)
      GOTO 29
   54 KVEC=K2+(K1-1)*NDIM-(K1*(K1-1))/2
      WORKVC(KVEC)=CONF*V(2)
   29 CONTINUE
   30 CONTINUE
C
C
      DO 40 K2 = 1, NDIMT
C
      DO 39 K1 = 1, NDIMT
C
      NK1 = K1
      NK2 = K2
      IF(K1.LE.K2) GOTO 35
      NK1 = K2
      NK2 = K1
   35 CONTINUE
      KVEC = NK2 + (NK1-1) * NDIMT - (NK1*(NK1-1))/2
C
      VECDRM(K1) = WORKVC(KVEC)
C
   39 CONTINUE
C
      IRECOR = NDIMT + K2
      WRITE(8,REC=IRECOR) (VECDRM(K1),K1=1,NDIMT)
C
   40 CONTINUE
C
C
C
      RETURN
      END
      SUBROUTINE GNOSCD
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/PAUL/ IPAULI,NEDEN,NPAMA1,NPAMA2
      COMMON/CONS/PI,PIOTWO,PIOFR,SQTWO,
     1            HBROVM, HBAROM, OSCLSP, OSCREL, OMEGEN,
     2            QPAULI(25,2)
      COMMON/MESH/
     1            TXMESH(72), TWEIGH(72),
     2            SCALE, NDIM,NDIMT
      COMMON/METH/NMETH1,NMAX,NMAXT,LLMAX,INDMAX,IWIED,IINTER
      COMMON/QUNU/ISPIN,JTOTAL,
     1            LORB(2),NORB(2),LCM, NCM
C
      DIMENSION ONEMIQ(25,2)
C
C     NMETH1 CONTROLS THE CALCULATION OF OSCILLATOR FUNCTIONS
C     SEE COMMENT IN TRFVEC
C
      NMETH1=12
C
      NORB(1) = NMAX
      NORB(2) = NMAX
      INDMAX = 1
      IF(LORB(1).NE.LORB(2)) INDMAX = 3
      LLMAX = 1 + ( INDMAX - 1) / 2
      NMAXT = NMAX * LLMAX
      NDIMT = NDIM * LLMAX
C
      DO 221 J = 1, LLMAX
      IF(IPAULI.EQ.0) THEN
      DO 222 I=1,NMAX
  222 ONEMIQ(I,J)=0.D0
      END IF
      IF (IPAULI.EQ.1) THEN
      NXEDE=NEDEN+4-NCM-NCM-LCM-LORB(J)
      DO 223 N1=1,NMAX
      IF(NXEDE-N1-N1) 224,225,225
  224 ONEMIQ(N1,J)=0.D0
      GOTO 223
  225 ONEMIQ(N1,J)=1.D0
  223 CONTINUE
      GOTO 221
      END IF
      IF(IPAULI.EQ.2) THEN
      CALL PAULOP(ONEMIQ(1,J),NPAMA1,NPAMA2,NMAX,LORB(J),NCM,LCM)
      END IF
  221 CONTINUE

      HBAROM = HBROVM / ( OSCLSP* OSCLSP)
      OSCREL = OSCLSP* SQTWO
C
      DO 21 J = 1,LLMAX
      DO 21 I = 1, NMAX
      QPAULI(I,J) = 1.0 - ONEMIQ(I,J)
      IF(QPAULI(I,J) .LT. 1.0D-10) QPAULI(I,J) = 0.0
   21 CONTINUE
C
      RETURN
      END
      DOUBLE PRECISION FUNCTION RNL(N,L,Z)
C
C  PROGRAM CALCULATES OSCILLATORFUNCTION USING KUMMER'S FUNCTION.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      RNL = 0.0
C
      Y = 0.5 * Z * Z
      IF(Y.GT.60.0) RETURN
C
      DL = L
      IF((DABS(Z).LT.1.0D-6) .AND. (L.EQ.0)) RNL = 1.0D0
      IF( DABS(Z).GT.1.0D-6)
     1RNL = (Z**L) * DEXP(-Y) * HYPKUM(N,DL+1.5,Z*Z)
C
      PI = 3.1415926535897932
      GAMFAA = 0.5 * DSQRT(PI)
      IF(L.EQ.0) GOTO 10
      DO 5 LL = 1, L
      DFLL = LL - 1
      GAMFAA = GAMFAA * (DFLL + 1.5)
    5 CONTINUE
C
   10 CONTINUE
C
      GAMFAB = GAMFAA
      IF(N.EQ.0) GOTO 20
      DFLL = DL + 0.5
C
      DO 15 NN = 1, N
      DFNN = NN
      GAMFAB = GAMFAB * ((DFNN + DFLL) / DFNN)
   15 CONTINUE
C
   20 CONTINUE
C
      RNL = RNL * (DSQRT(2.0 * GAMFAB) / GAMFAA)
C
      RETURN
      END
      DOUBLE PRECISION FUNCTION HYPKUM(N,B,Z)
C
C  KUMMER'S FUNCTION IS CALCULATED ACCORDING TO THEDEXPANSION 13.1.2
C  OF ABRAMOWITZ - STEGUN. A(THERE) EQUALS (-N).
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      IF(N.LT.0) WRITE (6,1) N,B,Z
    1 FORMAT(' ERROR EXIT IN HYPKUM ', I5, 2E20.5)
C
      HYPKUM = 1.0
      IF(N.EQ.0) RETURN
C
      NMAX = N
      AF = - N
      BF = B
      ZF = Z
C
      SUM = 1.0
      TERM = 1.0
C
      DO 2 NF = 1, NMAX
      DFNF = NF
      XADD = DFNF - 1.0
      TERM = TERM * ((AF + XADD) / (BF + XADD)) * (ZF / DFNF)
      IF(DABS(TERM).LT.1.0D-12) GOTO 3
      SUM = SUM + TERM
    2 CONTINUE
C
    3 CONTINUE
      HYPKUM = SUM
C
      RETURN
      END
      SUBROUTINE GENGAM
C
C  PROGRAM CALCULATES THE COMBINATION OF GAMMAFUNCTIONS WHICH ARE NEEDED
C  FOR SCALING IN METHOD2 OF TRFVEC
C
C        GAMCOM(N+1,LL) = 2.0 *DSQRT(GAMMA(N+L+1.5)/(GAMMA(N+1)*
C                         (OSCREL**3)*(N+0.5L+0.75)**L)))
C
C  WHEREBY
C
C        L = LORB(LL).
C
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/CONS/PI,PIOTWO,PIOFR,SQTWO,
     1            HBROVM, HBAROM, OSCLSP, OSCREL, OMEGEN,
     2            QPAULI(25,2)
      COMMON/METH/NMETH1,NMAX,NMAXT, LMAX,INDMAX,IWIED,IINTER
      COMMON/QUNU/ISPIN,JTOTAL,
     1            LORB(2),NORB(2),LCM, NCM
C
      COMMON/OSCD/OSCARR(12,72,2), GAMCOM(25,2)
C
      DO 30 LL = 1,LMAX
C
      NMAX = NORB(LL)
      L=LORB(LL)
      XL = L
C
      TERM = 0.5 * DSQRT(PI)
      IF(L.EQ.0) GOTO 15
C
      DO 10 LLAUF = 1,L
      TERM = TERM * (DBLE(LLAUF) + 0.5)
   10 CONTINUE
C
C  IN TERM GAMMA(L+1.5) IS STORED.
C
   15 CONTINUE
      GAMCOM(1,LL) =DSQRT(TERM/(((0.5*XL + 0.75)**L) * (OSCREL**3)))
     1               * 2.0
C
      DO 20 NPLUSO = 2, NMAX
      XN = NPLUSO - 1
      TERM = ((XN+XL+0.5)*TERM)/XN
      GAMCOM(NPLUSO,LL) = 2.0 *DSQRT(TERM/( (OSCREL**3) * (XN+0.5*XL+
     1                    0.75)**L))
   20 CONTINUE
C
C
   30 CONTINUE
C
      RETURN
      END
      SUBROUTINE GENOSC
C
C  ALL VALUES OF THE OSCILLATOR FUNCTIONS NEEDED FOR METHOD1 OF TRFVEC
C  ARE CALCULATED AND STORED IN THE FOLLOWING COMBINATION
C
C        OSCARR(N+1,K,I) = RNL(N,LI,XK) (-)**N *DSQRT(OSCREL**3)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/CONS/PI,PIOTWO,PIOFR,SQTWO,
     1            HBROVM, HBAROM, OSCLSP, OSCREL, OMEGEN,
     2            QPAULI(25,2)
      COMMON/MESH/
     1            TXMESH(72), TWEIGH(72),
     2            SCALE, NDIM,NDIMT
      COMMON/METH/NMETH1,NMAX,NMAXT, LMAX,INDMAX,IWIED,IINTER
      COMMON/QUNU/ISPIN,JTOTAL,
     1            LORB(2),NORB(2),LCM, NCM
C
      COMMON/OSCD/OSCARR(12,72,2), GAMCOM(25,2)
C
      DO 30 LL = 1,LMAX
C
      FAC = -DSQRT(OSCREL**3)
C
      DO 10 NPLUSO = 1, NMETH1
      N = NPLUSO - 1
      FAC = - FAC
C
      DO 10 K = 1,NDIM
      XK = TXMESH(K) * OSCREL
      OSCARR(NPLUSO,K,LL) = RNL(N,LORB(LL),XK) * FAC
   10 CONTINUE
C
   30 CONTINUE
C
      RETURN
      END
      SUBROUTINE TRFMAT(POTMAT,IND)
C
C  PROGRAM TRANSFORMS AN OPERATOR GIVEN IN MOMENTUM REPRESENTATION INTO
C  OSCILLATOR REPRESENTATION.THE OPERATOR MIGHT BE A POTENTIAL,
C  A G-MATRIX, A REFERENCE MATRIX. IT IS CALLED V. IT IS ASSUMED THAT
C  THE OPERATOR V TO BE TRANSFORMED IS GIVEN ONLY AT A FINITE NUMBER OF
C  MESHPOINTS K.
C
C             I J
C        <K1|V    |K2>     STORED IN POTMAT(K1,K2,INDEX)
C             L1L2
C
C             I J
C      <N1L1|V    |N2L2>   STORED IN POTMAT(N1,N2,INDEX)
C             L1L2
C
C  THE ACTUAL TRANSFORMATION IS CARRIED OUT IN SUBPROGRAM TRFVEC
C
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/CONS/PI,PIOTWO,PIOFR,SQTWO,
     1            HBROVM, HBAROM, OSCLSP, OSCREL, OMEGEN,
     2            QPAULI(25,2)
      COMMON/MESH/
     1            TXMESH(72), TWEIGH(72),
     2            SCALE, NDIM,NDIMT
      COMMON/QUNU/ISPIN,JTOTAL,
     1            LORB(2),NORB(2),LCM, NCM
C
      COMMON/DTFU/VECKSP( 72),NOSC,LOSC,IOP
      COMMON/OSCD/OSCARR(12,72,2), GAMCOM(25,2)
C
      DIMENSION POTMAT(72,72)
      DIMENSION VECOSC( 25)
C
C
      I = 2
      IF(IND.EQ.1)  I = 1
      NMAX2 = NORB(I)
C
      DO 30 K1 = 1, NDIM
C
      DO 10 K2 = 1,NDIM
      VECKSP(K2) = POTMAT(K1,K2)
   10 CONTINUE
C
      CALL TRFVEC(VECOSC,I,0, 0)
C
      DO 20 N2 = 1,NMAX2
      POTMAT(K1,N2)     = VECOSC(N2)
   20 CONTINUE
C
   30 CONTINUE
C
C
      I = 1
      IF(IND.EQ.3) I = 2
      NMAX1 = NORB(I)
C
      DO 70 N2 = 1,NMAX2
C
      DO 50 K1 = 1,NDIM
      VECKSP(K1) = POTMAT(K1,N2)
   50 CONTINUE
C
      NPROC = 1
      IF(IND.EQ.2) NPROC = 0
      CALL TRFVEC(VECOSC,I,N2,NPROC)
C
      DO 60 N1 = 1, NMAX1
      POTMAT(N1,N2)     = (2.0 * HBROVM / PI) * VECOSC(N1)
   60 CONTINUE
C
   70 CONTINUE
C
C
      IF(IND.EQ.2) GOTO 100
      DO 90 N1 = 1, NMAX1
      DO 90 N2 = 1, NMAX2
      IF(N1.GT.N2) POTMAT(N1, N2) = POTMAT(N2, N1)
   90 CONTINUE
  100 CONTINUE
C
C     DO 120 N1 = 1, NMAX1
C     WRITE (6,110) IND, N1, (POTMAT(N1,N2), N2 = 1, NMAX2)
C 110 FORMAT(' VNN ',2I3,9E12.5,/,(' VNN ',6X,9E12.5))
C 120 CONTINUE
      RETURN
      END
      SUBROUTINE TRFVEC(VECOSC,I,NNUP,IPROC)
C
C  THE TRANSFORMATION IS CARRIED OUT ACCORDING TO TWO METHODS.
C
C  METHOD1  THE OSCILLATOR WAVEFUNCTIONS ARE CALCULATED AT THE MESH-
C           POINTS AND THE TRANSFORMATION IS DONE ACCORDING TO A DOUBLE
C           GAUSS-INTEGRATION. METHOD1 IS USED FOR SMALL RADIAL QUANTUM
C           NUMBERS ONLY, MAXIMUM NMETH1.
C  METHOD2  IT USES THE ASYMPTOTIC EXPRESSION OF THE OSCILLATOR WAVE-
C           MATRIXELEMENT. METHOD2 IS USED FOR LARGE RADIAL QUANTUM
C           OSCILLATOR MATRIXELEMENTS BY AN APPROPRIATE MOMENTUM
C           FUNCTIONS FOR LARGE RADIAL QUANTUM NUMBERS AND REPLACES
C           NUMBERS ONLY.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/CONS/PI,PIOTWO,PIOFR,SQTWO,
     1            HBROVM, HBAROM, OSCLSP, OSCREL, OMEGEN,
     2            QPAULI(25,2)
      COMMON/MESH/
     1            TXMESH(72), TWEIGH(72),
     2            SCALE, NDIM,NDIMT
      COMMON/METH/NMETH1,NMAX,NMAXT,LLMAX,INDMAX,IWIED,IINTER
      COMMON/QUNU/ISPIN,JTOTAL,
     1            LORB(2),NORB(2),LCM, NCM
C
      COMMON/DTFU/VECKSP( 72),NOSC,LOSC,IOP
      COMMON/OSCD/OSCARR(12,72,2), GAMCOM(25,2)
C
      DIMENSION VECOSC( 25)
C
C
C  TRANSFORMATION ACCORDING TO METHOD1 FOR SMALL RADIAL QUANTUM
C  NUMBERS.
C
      NORBBI = NORB(I)
      DO 5 N = 1, NORBBI
      VECOSC(N) = 0.0
    5 CONTINUE
      IF(IPROC.EQ.1) NORBBI = NNUP
      NUP = NMETH1
      IF(NORBBI .LT.NUP) NUP = NORBBI
C
      DO 20 N = 1,NUP
      SUM = 0.0
      DO 10 K = 1,NDIM
      XKSQ = TXMESH(K) * TXMESH(K)
      SUM = SUM + VECKSP(K) * OSCARR(N,K,I) * XKSQ * TWEIGH(K)
   10 CONTINUE
      VECOSC(N) = SUM
   20 CONTINUE
      IF(NORBBI .LE.NUP) RETURN
      NUP = NORBBI
      NSTART = NMETH1 + 1
      IOP = 1
C
      DO 120 N = NSTART, NUP
      XKN =DSQRT(DBLE(4*N+2*LORB(I) - 1)) / OSCREL
      IF((XKN.GT.TXMESH(1)) .AND. (XKN.LT.TXMESH(NDIM)) ) GOTO 80
      WRITE (6,70) N,I, LORB(I), XKN
   70 FORMAT(' XK OUTSIDE MESHPOINTS ',3I5,E12.5)
C
   80 CONTINUE
C
      VECOSC(N) = GAMCOM(N,I) * FUNINT(XKN)
C
  120 CONTINUE
      RETURN
      END
      DOUBLE PRECISION FUNCTION FUNINT(X)
C
C  INTERPOLATION PROCEDURE FOR THE POTENTIALMATRIXELEMENTS IN K SPACE
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/CONS/PI,PIOTWO,PIOFR,SQTWO,
     1            HBROVM, HBAROM, OSCLSP, OSCREL, OMEGEN,
     2            QPAULI(25,2)
      COMMON/MESH/
     1            TXMESH(72), TWEIGH(72),
     2            SCALE, NDIM,NDIMT
      COMMON/QUNU/ISPIN,JTOTAL,
     1            LORB(2),NORB(2),LCM, NCM
C
      COMMON/DTFU/VECKSP( 72),NOSC,LOSC,IOP
      DIMENSION Q(72),AU(72)
C
      Z = X
      CALL SPLS3(TXMESH,VECKSP,NDIM,Z,RESULT,1,Q,AU,1,0)
      FUNINT = RESULT
      ZOSC = Z*OSCREL
      IF(IOP.EQ.0) FUNINT = RESULT * RNL(NOSC, LOSC, ZOSC) * Z * Z
C
      RETURN
      END
      SUBROUTINE CORR2
C
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL IFAIL
C
      COMMON/CONS/PI,PIOTWO,PIOFR,SQTWO,
     1            HBROVM, HBAROM, OSCLSP, OSCREL, OMEGEN,
     2            QPAULI(25,2)
      COMMON/METH/NMETH1,NMAX,NMAXT, LMAX,INDMAX,IWIED,IINTER
      COMMON/QUNU/ISPIN,JTOTAL,
     1            LORB(2),NORB(2),LCM, NCM
      COMMON/STORE/WORKVC(10440),VECDRM(144)
      COMMON/PROPA/PROPAG(25,25,2)
C
      DIMENSION XKININ(25,25),XKERNL(25,25,2),WORKMT(50,100),INVECT(50)
      EQUIVALENCE (WORKVC(1),XKININ(1,1))
      EQUIVALENCE (WORKVC(2000),XKERNL(1,1,1))
      EQUIVALENCE (WORKVC(5440), WORKMT(1,1))
      EQUIVALENCE (VECDRM(1),INVECT(1))
C
      IDXKIN = 25
C
      OMEGTM = OMEGEN - 0.5 * HBAROM * (DBLE(2 * NCM + LCM - 2 ) +1.5)
C
C
      DO 121 LL = 1, LMAX
      LREL = LORB(LL)
C
      DO 10 N1 = 1, NMAX
      DO 10 N2 = 1, NMAX
      XKININ(N1,N2) = 0.0
      IF(N1.EQ.N2) XKININ(N1,N2) = XKININ(N1,N2) + OMEGTM
      IF((N1.NE.N2) .AND. (N1.NE.(N2+1)) .AND. (N1.NE.(N2-1))) GOTO 10
      XKININ(N1,N2) = XKININ(N1,N2) - HBAROM * XKIN(N1 - 1,N2-1,LREL)
   10 CONTINUE
      CALL SYMIN2(XKININ,NMAX,IFAIL,IDXKIN)
      IF(IFAIL) WRITE (6,11)
   11 FORMAT(' WARNING IN INVERSION ')
C
      DO 12 N1 = 1, NMAX
      DO 12 N2 = 1, NMAX
      XKERNL(N1,N2,LL) = XKININ(N1,N2)
   12 CONTINUE
C
C
      DO 100 N1 = 1, NMAX
      DO 100 N2 = 1, NMAX
      XKININ(N1,N2) = 0.0
      IF(N1.EQ.N2) XKININ(N1,N2) = XKININ(N1,N2) + OMEGEN - 0.5 *
     1             HBAROM *(DBLE(2*NCM+LCM-2) + 1.5) * QPAULI(N1,LL)*
     2             QPAULI(N2,LL)
      IF((N1.NE.N2) .AND. (N1.NE.(N2+1)) .AND. (N1.NE.(N2-1))) GOTO 100
      XKININ(N1,N2) = XKININ(N1,N2) - HBAROM * XKIN(N1 - 1,N2-1,LREL) *
     1                QPAULI(N1,LL) * QPAULI(N2,LL)
  100 CONTINUE
      CALL SYMIN2(XKININ,NMAX,IFAIL,IDXKIN)
      IF(IFAIL) WRITE (6,110)
  110 FORMAT(' WARNING IN INVERSION ')
      DO 120 N1 = 1,NMAX
      DO 115 N2 = 1, NMAX
      XXKKL            = QPAULI(N1,LL) * QPAULI(N2,LL)* XKININ(N1,N2)
      PROPAG(N1,N2,LL)=XXKKL
      XKERNL(N1,N2,LL)=XXKKL-XKERNL(N1,N2,LL)
  115 CONTINUE
C
  120 CONTINUE
  121 CONTINUE
C
C
      INDEND = LMAX * LMAX
      DO 1124 IND = 1, INDEND
C
      LL = 1
      IF(IND.GT.2) LL = 2
C
C
      DO 130 N1 = 1, NMAX
      NN1 = N1
      IF( (IND.EQ.2) .OR. (IND.EQ.4) ) NN1 = N1 + NMAX
      DO 125 N2 = 1, NMAX
      NN2 = N2 + NMAX
      IF(IND.LT.3) NN2 = N2
C
      SUM = 0.0
      DO 124 NN = 1,NMAX
      NNN = NN + NMAXT + NMAX
      IF(IND.LT.3) NNN = NN + NMAXT
      SUM = SUM + WORKMT(NN1,NNN)      * XKERNL(NN,N2,LL)
  124 CONTINUE
C
      WORKMT(NN1,NN2) = - SUM
      IF(NN1.EQ.NN2) WORKMT(NN1,NN2) = 1.0 - SUM
C
  125 CONTINUE
  130 CONTINUE
C
C
 1124 CONTINUE
C
C
      NMAXT2 = NMAXT + NMAXT
C
C  THE G MATRIX IS CALCULATED BY MATRIX INVERSION
C  THE RESULT IS STORED IN WORKMT(N1,N2+NDIM)
C
      CALL SYSLI0(NMAXT,NMAXT2,WORKMT,INVECT)
C
      RETURN
      END
      SUBROUTINE GENTOS
C
C  THE MATRIXELEMENTS OF THE TRANSITIONMATRIX ARE GENERATED IN MOMENTUM-
C  REPRESENTATION FOR
C
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL IFAIL
C
      COMMON/CONS/PI,PIOTWO,PIOFR,SQTWO,
     1            HBROVM, HBAROM, OSCLSP, OSCREL, OMEGEN,
     2            QPAULI(25,2)
      COMMON/MESH/
     1            TXMESH(72), TWEIGH(72),
     2            SCALE, NDIM,NDIMT
      COMMON/METH/NMETH1,NMAX,NMAXT, LMAX,INDMAX,IWIED,IINTER
      COMMON/QUNU/ISPIN,JTOTAL,
     1            LORB(2),NORB(2),LCM, NCM
      COMMON/STORE/WORKVC(10440),VECDRM(144)
C
      DIMENSION TMCOMB(72),HLFVEC(144)
C
      OMEGTM = OMEGEN - 0.5 * HBAROM * (DBLE(2 * NCM + LCM - 2 ) +1.5)
C
      DO 10 K = 1, NDIM
      TMCOMB(K) =DSQRT(TWEIGH(K)) * TXMESH(K)
   10 CONTINUE
C
      DO 50 K2 = 1, NDIMT
C
      IRECOR = NDIMT + K2
      IF(IWIED.EQ.2)
     1READ(8,REC=IRECOR) (VECDRM(K1),K1=1,NDIMT)
C
      KK2 = K2
      IF(K2.GT.NDIM) KK2 = K2 -NDIM
      XKSQ2 = TXMESH(KK2) * TXMESH(KK2)
      ENDEN2 = 1.0 / (OMEGTM - HBROVM * XKSQ2)
C
      DO 49 K1 = 1, K2
C
      KK1 = K1
      IF(K1.GT.NDIM) KK1 = K1 -NDIM
      XKSQ1 = TXMESH(KK1) * TXMESH(KK1)
      ENDEN1 = 1.0 / (OMEGTM - HBROVM * XKSQ1)
C
      KVEC = K2 + (K1 - 1) * NDIMT - (K1*(K1-1))/2
      IF(IWIED.NE.2)
     1TERM = WORKVC(KVEC)*HBROVM / PIOTWO
      IF(IWIED.EQ.2)
     1TERM = VECDRM(K1) * HBROVM / PIOTWO
      WORK = - ENDEN1 * TMCOMB(KK1) * TERM * TMCOMB(KK2) * ENDEN2
      IF(K1.EQ.K2) WORK = WORK + ENDEN1
      WORKVC(KVEC) = WORK
C
   49 CONTINUE
C
   50 CONTINUE
C
      IRECOR = NDIMT + 1
C
C
      NDIMT2 =(NDIMT*(NDIMT+1))/2
C
C  THE T MATRIX IS CALCULATED BY MATRIX INVERSION
C
      CALL MINVEC(WORKVC,NDIMT,IFAIL)
      IF(IFAIL) WRITE(6,51)
   51 FORMAT(' WARNING IN INVERSION ')
C
C
      NDIMT2 =(NDIMT*(NDIMT+1))/2
C
C
      DO 60 K2 = 1, NDIMT
C
      IRECOR = NDIMT + K2
      READ(8,REC=IRECOR) (VECDRM(K1),K1=1,NDIMT)
C
      DO 59 K1 = 1,NDIMT
C
      HLFVEC(K1) = 0.0
      KK1 = K1
      IF(K1.GT.NDIM) KK1 = K1 - NDIM
C
      DO 58 K = 1, NDIMT
C
      KK = K
      IF(K.GT.NDIM) KK = K - NDIM
C
      NK1 = K1
      NK2 = K
      IF(K.GE.K1) GOTO 57
      NK1 = K
      NK2 = K1
   57 CONTINUE
      KVEC = NK2 + (NK1-1) * NDIMT - (NK1*(NK1-1))/2
      TERM = WORKVC(KVEC)
C
      HLFVEC(K1) = HLFVEC(K1) + TERM         * VECDRM(K) * TMCOMB(KK)/
     1             (OMEGTM - HBROVM * TXMESH(KK) * TXMESH(KK))
C
   58 CONTINUE
C
      HLFVEC(K1) = HLFVEC(K1) /  TMCOMB(KK1)
C
   59 CONTINUE
C
C  61 FORMAT(5H GKK ,I5,10E12.5/(5H GKK ,5X,10E12.5))
      WRITE(8,REC=K2) (HLFVEC(K1),K1=1,NDIMT)
C
   60 CONTINUE
C
C
      RETURN
      END
      SUBROUTINE PAULOP(ONEMIQ,NPAMA1,NPAMA2,NR1,L,NCM1,LC)
C
C     EVALUATES PAULI OPERATOR IN ANGLE AVERAGED APPROXIMATION
C     SEE E.G. SAUER NUCL. PHYS. A150 467 EQ.5
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION ONEMIQ(25)
      DD=1.D0
      NC=NCM1-1
      ICAL=1
      DO 30 III=1,NR1
      IF(ICAL.EQ.0) THEN
       ONEMIQ(III)=0.D0
       GOTO 30
      ENDIF
      N=III-1
      NTO=2*N+L+2*NC+LC
      LRMI=IABS(L-LC)
      LRMA=L+LC
      IPAR=1-2*MOD(L+LC,2)
      NUL=0
      SUM=0.D0
      DO 1 LR=LRMI,LRMA
      DO 1 L1=NUL,NTO
      DO 2 L2=NUL,NTO
      IF(1-2*MOD(L1+L2,2).NE.IPAR) GOTO 2
      L1MI=IABS(L1-L2)
      L1MA=L1+L2
      IF(LR.GT.L1MA.OR.LR.LT.L1MI) GOTO 2
      N12=NTO-L1-L2
      IF(N12.LT.0) GOTO 2
      N12=N12/2
      DO 3 N1=NUL,N12
      NA1=2*N1+L1
      N2=N12-N1
      NA2=2*N2+L2
      IF(NA1.LE.NPAMA1.OR.NA2.LE.NPAMA1) GOTO 3
      IF(NA1.LE.NPAMA2.AND.NA2.LE.NPAMA2) GOTO 3
      XX=GMOSH(N,L,NC,LC,N1,L1,N2,L2,LR,DD)
      SUM=SUM+XX*XX*(2.*LR+1)
    3 CONTINUE
    2 CONTINUE
    1 CONTINUE
      SUM=SUM/(2*L+1)/(2*LC+1)
      IF(SUM.GT.0.99D0) ICAL=0
      ONEMIQ(III)=1.D0-SUM
  30  CONTINUE
      RETURN
      END
      DOUBLE PRECISION FUNCTION GMOSH(N,L,NC,LC,N1,L1,N2,L2,LR,D)
C     GENERALIZED TRANSFORMATION BRACKETS
C     FOR TRANSFORMATION OF OSCILLATOR STATES FROM C.M. TO LAB SYSTEM
C     REF  M.SOTONA AND M.GMITRO  COMP.PHYS.COMM 3(1972)53
C     D=MASS1/MASS2 RATIO OF MASSES
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON /MOSHST/ZERO,HALF,EIN,F(50),G(50),W(50),IORD
C   F(I)=LOG(GAMMA(I-1))
C   G(I)=LOG(GAMMA(I+0.5)/SQRT(PI))
C   W(I)=LOG(2(I-1)+1)
      IF(IORD-10) 5,6,5
    5 IORD=10
      F(1)=ZERO
      G(1)=DLOG(HALF)
      W(1)=ZERO
      DO 10 I=2,50
      A=I-1
      F(I)=F(I-1)+DLOG(A)
      G(I)=G(I-1)+DLOG(A+HALF)
   10 W(I)=DLOG(A+A+EIN)
    6 GMOSH=ZERO
      IF(N+N+NC+NC+L+LC-N1-N1-N2-N2-L1-L2) 500,12,500
   12 IF(L+LC-LR) 500,13,13
   13 IF(L1+L2-LR) 500,14,14
   14 IF(IABS(L-LC)-LR) 15,15,500
   15 IF(IABS(L1-L2)-LR) 16,16,500
   16 DL=DLOG(D)
      D1L=DLOG(D+EIN)
C
      BB=F(N1+1)+F(N2+1)+F(N+1)-F(NC+1)+G(N1+L1+1)+G(N2+L2+1)
     1  -G(N+L+1)-G(NC+LC+1)
      BA=W(L1+1)+W(L2+1)+W(LC+1)+W(L+1)+F(L1+L2-LR+1)+F(L+LC+LR+2)
     1  +F(L+LC-LR+1)+F(LC+LR-L+1)+F(LR+L-LC+1)-F(L1+L2+LR+2)
     2  -F(L1+LR-L2+1)-F(L2+LR-L1+1)-DBLE(L)*D1L
      IP=LR+N+N1+N2
      P=1+2*(IP/2*2-IP)
      ANORM=P*DEXP(HALF*(BB+BA))
C
      Y=ZERO
      J1F=L+1
      DO 21 J1=1,J1F
      J2=L+2-J1
      K1I=IABS(L1-J1+1)+1
      K1F=L1+J1
      DO 22 K1=K1I,K1F,2
      M1F=N1-(J1+K1-L1)/2+2
      IF(M1F-1) 22,50,50
   50 K2I=MAX0(IABS(L2-J2+1),IABS(LC-K1+1))+1
      K2F=MIN0(L2+J2,LC+K1)
      IF(K2I-K2F) 23,23,22
   23 DO 24 K2=K2I,K2F,2
      M2F=N2-(J2+K2-L2)/2+2
      IF(M2F-1) 24,51,51
C
   51 IP=J2-1+(L1+K1+J1+L2+K2+J2)/2
      P=1+2*(IP/2*2-IP)
      BC=HALF*(DBLE(K1+J2-2)*DL-DBLE(K1+K2-2)*D1L)
     1  +F(K1+L1-J1+1)+F(K1+K2-LC-1)+F(K2+L2-J2+1)
     2  -F(K1+L1+J1)-F(K1+K2+LC)-F(K2+L2+J2)+W(K1)+W(K2)
     3  +F((K1+L1+J1)/2)+F((K1+K2+LC)/2)+F((K2+L2+J2)/2)
     4  -F((K1+L1-J1)/2+1)-F((L1+J1-K1)/2+1)-F((J1+K1-L1)/2)
     5  -F((K1+K2-LC)/2)-F((K2+LC-K1)/2+1)-F((LC+K1-K2)/2+1)
     6  -F((K2+L2-J2)/2+1)-F((L2+J2-K2)/2+1)-F((J2+K2-L2)/2)
      CFAC=P*DEXP(BC)
C
      SXY=ZERO
      IXF=MIN0(K1+K1,K1+K2-LC)-1
      DO 30 IX=1,IXF
      IYI=MAX0(1,IX+J1+L2-K1-LR)
      IYF=MIN0(L2+L2+1,L1+L2-LR+1,L2+LC+IX-K1-J2+2)
      IF(IYI-IYF) 31,31,30
   31 DO 32 IY=IYI,IYF
      IP=IX+IY
      P=1+2*(IP/2*2-IP)
      BXY=F(K1+K1-IX)+F(L2+L2-IY+2)+F(K2+LC-K1+IX)+F(L1+LR-L2+IY)
     1   -F(IX)-F(IY)-F(K1+K2-LC-IX)-F(L1+L2-LR-IY+2)
     2   -F(K1-L2+LR-J1+IY-IX+1)-F(L2-K1+LC-J2+IX-IY+3)
      SXY=SXY+P*DEXP(BXY)
   32 CONTINUE
   30 CONTINUE
      S=CFAC*SXY
C
      SM=ZERO
      DO 40 M1=1,M1F
      M2I=MAX0(1,NC-M1-(K1+K2-LC)/2+3)
      IF(M2I-M2F) 41,41,40
   41 DO 42 M2=M2I,M2F
      IP=M1+M2
      P=1+2*(IP/2*2-IP)
      BM=DBLE(M1-1)*DL-DBLE(M1+M2-2)*D1L+G(1)
     1  +G(M1+M2+(K1+K2+LC)/2-2)-G(K1+M1-1)-G(K2+M2-1)
     2  +F(M1+M2+(K1+K2-LC)/2-2)-F(M1)-F(M2)
     3  -F(N1-M1-(J1+K1-L1)/2+3)-F(N2-M2-(J2+K2-L2)/2+3)
     4  -F(M1+M2-NC+(K1+K2-LC)/2-2)
      SM=SM+P*DEXP(BM)
   42 CONTINUE
   40 CONTINUE
      Y=Y+S*SM
   24 CONTINUE
   22 CONTINUE
   21 CONTINUE
      GMOSH=ANORM*Y
  500 RETURN
      END
      BLOCK DATA
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON /REIDIN/ VPIN(15,8),APIN(6,8),NSPIN(15,8),NAIN(8)
      COMMON /MESHIN/ TXMIN(24),WXMIN(24)
      COMMON /MOSHST/ZERO,HALF,EIN,F(50),G(50),W(50),IORD
      DOUBLE PRECISION UF,PIH
      LOGICAL INDX
      COMMON /OBCON/ UF,PIH,INDX
      DATA UF,PIH/197.315D0,1.570796326794897D0/
      DATA INDX/.FALSE./
      DATA IORD/0/
      DATA ZERO,HALF,EIN/0.0D0,0.5D0,1.0D0/
C
C     INITIALIZE DATA FOR REID SOFT CORE POTENTIAL
C
      DATA NAIN /5,3,5,3,6,5,4,4/
      DATA NSPIN /1,0,3,1,0,0,1,1,1,0,0,2,1,1,1,1,1,1,12*0,2,3,1,1,2,
     1        10*0,1,1,1,12*0,2,3,1,1,2,1,9*0,3,2,1,1,2,10*0,
     2        1,0,3,0,0,1,1,0,2,1,1,0,3*0,4*1,11*0/
      DATA VPIN  /-10.463,0.0,-10.463,105.468,0.0,0.0,-3187.8,708.91,
     1        351.77,0.0,0.0,31.389,9924.3,-2713.1,-1673.5,
     2        31.389,-634.39,2163.4,12*0.0,
     3        31.389,-31.389,-220.12,871.0,62.778,10*0.0,
     4        -10.463,-1650.6,6484.2,12*0.0,
     5        -10.463,-10.463,27.133,-790.74,41.852,20662.0,9*0.0,
     6        10.463,-10.463,-135.25,472.81,-20.926,10*0.0,
     7        3.487667,0.0,3.487677,0.0,0.0,-34.925,-933.48,0.0,
     8        -10.463,4152.1,-2074.1,0.0,3*0.0,
     9        -10.463,-12.322,-1112.6,6484.2,11*0.0/
      DATA APIN /1.0,2.0,4.0,4.0,6.0,0.0,1.0,2.0,3.0,3*0.0,1.0,1.0,2.0,
     1       3.0,4.0,0.0,1.0,4.0,7.0,3*0.0,1.0,1.0,2.0,4.0,4.0,7.0,
     2       1.0,1.0,2.0,3.0,4.0,0.0,1.0,3.0,4.0,6.0,2*0.0,1.0,2.0,
     3       4.0,7.0,2*0.0/
C
C     INITIALIZE DATA FOR MESH POINTS IN MOMENTUM SPACE
C
      DATA TXMIN /  -.9987710072524261D+00 ,  -.9935301722663508D+00 ,
     1          -.9841245837228269D+00 ,  -.9705915925462473D+00 ,
     2          -.9529877031604309D+00 ,  -.9313866907065543D+00 ,
     3          -.9058791367155697D+00 ,  -.8765720202742479D+00 ,
     4          -.8435882616243935D+00 ,  -.8070662040294426D+00 ,
     5          -.7671590325157402D+00 ,  -.7240341309238147D+00 ,
     6          -.6778723796326639D+00 ,  -.6288673967765136D+00 ,
     7          -.5772247260839727D+00 ,  -.5231609747222330D+00 ,
     8          -.4669029047509584D+00 ,  -.4086864819907167D+00 ,
     9          -.3487558862921607D+00 ,  -.2873624873554556D+00 ,
     1          -.2247637903946891D+00 ,  -.1612223560688917D+00 ,
     2          -.9700469920946270D-01 ,  -.3238017096286936D-01 /
      DATA WXMIN /   .3153346052305839D-02 ,   .7327553901276262D-02 ,
     1           .1147723457923454D-01 ,   .1557931572294385D-01 ,
     2           .1961616045735553D-01 ,   .2357076083932438D-01 ,
     3           .2742650970835695D-01 ,   .3116722783279809D-01 ,
     4           .3477722256477044D-01 ,   .3824135106583071D-01 ,
     5           .4154508294346475D-01 ,   .4467456085669428D-01 ,
     6           .4761665849249047D-01 ,   .5035903555385447D-01 ,
     7           .5289018948519367D-01 ,   .5519950369998416D-01 ,
     8           .5727729210040322D-01 ,   .5911483969839564D-01 ,
     9           .6070443916589388D-01 ,   .6203942315989266D-01 ,
     1           .6311419228625403D-01 ,   .6392423858464819D-01 ,
     2           .6446616443595007D-01 ,   .6473769681268392D-01 /
      END
      SUBROUTINE GNMESH
C
C  GENERATE INTEGRATION MESHPOINTS IN K-SPACE
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/OUTC/IPRI(4)
      COMMON /MESHIN/ TXMIN(24),WXMIN(24)
      COMMON/CONS/PI,PIOTWO,PIOFR,SQTWO,
     1            HBROVM, HBAROM, OSCLSP, OSCREL, OMEGEN,
     2            QPAULI(25,2)
      COMMON/MESH/
     1            TXMESH(72), TWEIGH(72),
     2            SCALE, NDIM,NDIMT
C
      NDIM=48
      SCALE=1.D0
      DO 12 I = 1, NDIM
      IF(I.LE.24) THEN
       XMESH=TXMIN(I)
       WEIGHT=WXMIN(I)
      ELSE
       XMESH=-TXMIN(49-I)
       WEIGHT=WXMIN(49-I)
      ENDIF
      XXTAN =DTAN(PIOFR * (1.0 + XMESH))
      TXMESH(I) = SCALE * XXTAN
      TWEIGH(I) = SCALE * PIOFR * ( 1.0 + XXTAN * XXTAN ) * WEIGHT
   12 CONTINUE
C
      IF(IPRI(3).GT.0) WRITE (6,13) NDIM, SCALE, ( I,TXMESH(I),
     1             TWEIGH(I), I = 1,NDIM)
   13 FORMAT(1H1,///,
     1       24H INTEGRATION MESHPOINTS ,/,I5,E12.5,/,(I5, 2E12.5))
      RETURN
      END
      SUBROUTINE PRERED(JREID,IREID,L1,L2)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C     PREPARE DATA BEFORE CALLING REID FOR THE PARTIAL WAVE DEFINED BY
C    JREID := TOTAL ANGULAR MOMENTUM J
C    IREID := SPIN OF INTERACTING NUCLEONS S
C    L1,L2 := ORBITAL ANGUALR MOMENTUM, FOR COUPLED CHANNELS L1<L2
C
      COMMON /REIDIN/ VPIN(15,8),APIN(6,8),NSPIN(15,8),NAIN(8)
      COMMON/REIDDT/ SKK,SKP,VL,VV,
     1               AA,AA2,AP(10),AIQ(10),AIQQ(10),ANG(7,10,10),
     2               V(3,10),V1(3,10),V2(3,10),VP(30),
     3               CS,CT(11,11),C(10),
     4               LN,LNP,J,NS,NA,NSS
      DIMENSION NSP(30)
      J = JREID
      IF(J.GT.2) THEN
       WRITE(6,100) JREID,IREID,L1,L2
       STOP
      ENDIF
 100  FORMAT(' ***  REID POTENTIAL IS DEFINED FOR J<3 ONLY, STOP ***')
      NS = IREID
      LN = L1
      LNP = L2
      ISOP=MOD(L1+NS+1,2)
      ICA=ISOP*4+L1+J
      IF(ICA.EQ.4.AND.ISOP.EQ.0) ICA=3
      LNP1 = LNP + 1
      LN1 = LN + 1
      LNP2 = LNP + 2
      CS = 1. / 15.
      IF ( LN ) 85, 86, 85
   85 DO 83 JLN = 1, LN
      BJLN = JLN
   83 CS = 2. * BJLN * CS / ( 2. * BJLN + 5. )
   86 C( 1 ) = 1.
      DO 84 IC = 2, LNP2
      AI = IC
      C( IC ) =(AI - 1. ) /(2. * AI - 1. ) * C ( IC - 1 )
   84 CONTINUE
      BLN = LN
      CT( 1, 1 ) = 2. * BLN + 3.
      CT( 2, 1 ) = -1.
      DO 220 JN = 2, 10
      BJN = JN
      CT( 1, JN ) = CT( 1, JN - 1 ) * ( BJN + BLN ) * ( 2. * BJN + 2. *
     1   BLN + 1. ) / ( ( 2. * BLN + 3. + 2. * BJN ) * ( BJN - 1. ) )
      CT( 2, JN ) =(CT ( 2, JN - 1 ) * ( BJN + BLN ) * ( 2. * BJN + 2. *
     1  BLN + 3. ) - CT ( 1, JN - 1 ) * ( ( BJN - 1. ) * ( 2. * BJN + 2.
     2   * BLN + 3. ) + ( BJN + BLN ) * ( 2. * BJN - 1. ) ))/ ( ( 2. *
     3  BLN + 3. + 2. * BJN ) * ( BJN - 1. ) )
      IF(JN.LT.3) GOTO 2221
C
      DO 221 JJ = 3, JN
      BJJ = JJ - 1
  221 CT( JJ, JN ) = ( CT( JJ, JN - 1 ) * ( BJN + BLN + BJJ ) * ( 2. *
     1  BJN + 2. * BLN + 2. * BJJ + 1. ) - CT( JJ - 1, JN - 1 ) * ( (
     2   BJN - BJJ ) * ( 2. * BJN + 2. * BLN + 2. * BJJ + 1. ) + ( BJN +
     3  BLN + BJJ + 1. ) * ( 2. * BJN - 2. * BJJ + 1. ) ) + CT( JJ - 2,
     4  JN - 1 ) * ( BJN - BJJ + 1. ) * ( 2. * BJN - 2. * BJJ + 1. ) ) /
     5  ( ( 2. * BLN + 3. + 2. * BJN ) * ( BJN - 1. ) )
 2221 CONTINUE
      CT( JN + 1, JN ) = ( - CT( JN, JN - 1 ) * ( 2. * BJN + BLN - 1. )
     1  + CT( JN - 1, JN - 1 ) ) / ( ( 2. * BLN + 3. + 2. * BJN ) * (
     2  BJN - 1. ) )
  220 CONTINUE
      AMU = 0.7
      AMU2 = AMU ** 3
      NA=NAIN(ICA)
      CALL ANGL
      DO 35 IL=1,NA
   35 AP(IL)=APIN(IL,ICA)*AMU
      NTV=NA
      IF(ICA.EQ.1.OR.ICA.EQ.7) NTV=3*NA
      DO 37 IL=1,NTV
      NSP(IL)=NSPIN(IL,ICA)
   37 VP(IL)=VPIN(IL,ICA)
C
      IF( LN - LNP ) 51, 52, 51
   52 DO 53 I = 1, NA
      AA = AP( I )
      AA2 = AA ** 2
      NSS = NSP( I )
      IF ( NSS - 2 ) 54, 55, 56
   54 V( 1, I ) = VP( I ) / AMU
      V( 2, I ) = 0.
      GO TO 53
   55 V( 1, I ) = 0.
      V( 2, I ) = VP( I ) / AMU2
      GO TO 53
   56 V( 1, I ) = VP( I ) * AA2 / AMU2
      V( 2, I ) = 3. * VP ( I )       / AMU2
   53 CONTINUE
      GO TO 87
   51 DO 64 I = 1, NA
      AA = AP( I )
      AA2 = AA ** 2
      V (1, I ) = 0.
      V (2, I ) = 0.
      V1(2, I ) = 0.
      V1(1, I ) = 0.
      DO 67 NV = 1, 3
      JK = 2 * NV - 1
      IK = 3 * I - 3 + NV
      NSS = NSP( IK )
      IF ( NSS - 2 ) 69, 70, 71
   69 V (1, I ) = V (1, I ) + VP( IK ) * ANG( JK, LN1, LN1  ) / AMU
      V1(1, I ) = V1(1, I ) + VP( IK ) * ANG( JK, LNP1,LNP1 ) / AMU
      GO TO 67
   70 V1(2, I ) = V1(2, I ) + VP( IK ) * ANG( JK, LNP1,LNP1 )/ AMU2
      V (2, I ) = V (2, I ) + VP( IK ) * ANG( JK, LN1, LN1) / AMU2
      GO TO 67
   71 V (1, I ) = V ( 1, I ) + VP( IK) * AA2 /AMU2*ANG(JK,LN1,LN1)
      V1(1, I ) = V1( 1, I ) + VP( IK) * AA2 /AMU2*ANG(JK,LNP1,LNP1)
      V (2, I ) = V(2,I) + 3. * VP(IK) / AMU2*ANG(JK,LN1, LN1 )
      V1(2, I )= V1( 2, I ) + 3. * VP(IK)/AMU2*ANG(JK, LNP1,LNP1 )
   67 CONTINUE
      NSS = NSP( 3 * I )
      IK = 3 * I
      IF ( NSS - 2 ) 79, 80, 81
   79 V2( 1, I ) = VP( IK ) / AMU * ANG( 5, LN1, LNP1 )
      V2( 3, I ) = 0.
      GO TO 82
   80 V2( 1, I ) = - VP( IK ) / 3. * AA2 * ANG( 5, LN1, LNP1 ) /AMU2
      V2( 3, I ) = VP( IK ) / ( 3. * AMU2 ) * ANG( 5, LN1, LNP1 )
      GO TO 82
   81 V2( 1, I ) = 0.
      V2( 3, I ) = VP( IK ) * ANG( 5, LN1, LNP1 ) / AMU2
   82 CONTINUE
   64 CONTINUE
   87 CONTINUE
      RETURN
      END
      SUBROUTINE ANGL
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/REIDDT/ SKK,SKP,VL,VV,
     1               AA,AA2,AP(10),AIQ(10),AIQQ(10),ANG(7,10,10),
     2               V(3,10),V1(3,10),V2(3,10),VP(30),
     3               CS,CT(11,11),C(10),
     4               LN,LNP,J,NS,NA,NSS
      BJ= J
      BNS= NS
      J1= J + 1
      J2= J + 2
      IF ( LN - LNP) 15, 14, 15
   14 LMIN1 = LN + 1
      LMAX1 = LN + 1
      GO TO 27
   15 LMIN1 = J
      LMAX1 = J2
   27 CONTINUE
      DO 531L1 = LMIN1, LMAX1, 2
      DO 531LP1 = LMIN1, LMAX1, 2
      BL1= L1
      BLP1= LP1
      IF (L1 - LP1) 103, 104, 103
  103 ANG( 1, L1, LP1)= 0.
      ANG (3, L1, LP1 )=0.
      GO TO 105
  104 ANG (1, L1, LP1 )= 1.
      ANG (3, L1, LP1 )=( BJ * ( BJ + 1.) - BL1 * ( BL1 - 1. ) - BNS *
     1   ( BNS + 1.) ) / 2.
  105 ANG( 2, L1, LP1) = ANG(1, L1, LP1)
      ANG( 4, L1, LP1) = ANG(3, L1, LP1)
      IF ( NS) 106, 107,106
  107 ANG( 5,L1, LP1)=0.
      ANG( 6,L1, LP1)=0.
      ANG( 7,L1, LP1)=0.
      GO TO 531
  106 DO 53 II=5,7
      IF(L1 - LP1 ) 203, 204, 203
  203 ANG( II, L1, LP1) = 6. *DSQRT  ( BJ * (BJ   + 1. )) / (2. * BJ+
     1     1. )
      GO TO 53
  204 IF ( L1 - J - 1 ) 215, 214, 216
  214 ANG( II, L1, LP1) = 2.
      GO TO 53
  215 ANG( II, L1, LP1) = - 2. * ( BJ - 1. ) / ( 2. * BJ + 1. )
      GO TO 53
  216 ANG ( II, L1, LP1 ) = -2. * ( BJ + 2. ) / ( 2. * BJ + 1. )
   53 CONTINUE
  531 CONTINUE
      RETURN
      END
      DOUBLE PRECISION FUNCTION REID(ISPIN,JTOTAL,XK1,L1,XK2,L2)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/REIDDT/ SKK,SKP,VL,VV,
     1               AA,AA2,AP(10),AIQ(10),AIQQ(10),ANG(7,10,10),
     2               V(3,10),V1(3,10),V2(3,10),VP(30),
     3               CS,CT(11,11),C(10),
     4               LN,LNP,J,NS,NA,NSS
C
      IF((J.NE.JTOTAL) .OR. (NS.NE.ISPIN)) WRITE (6, 5)J,JTOTAL,NS,ISPIN
    5 FORMAT(' ERROR EXIT IN REID ', 4I5)
C
      PLAMD = 41.467
      SKK = XK1
      SKP = XK2
C
      CALL ADDUP(L1,L2)
C
      REID = VL / PLAMD
C
C
      RETURN
C
      END
      SUBROUTINE ADDUP( K , KP )
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/REIDDT/ SKK,SKP,VL,VV,
     1               AA,AA2,AP(10),AIQ(10),AIQQ(10),ANG(7,10,10),
     2               V(3,10),V1(3,10),V2(3,10),VP(30),
     3               CS,CT(11,11),C(10),
     4               LN,LNP,J,NS,NA,NSS
      DIMENSION   VU( 3 )
      SKK2 = SKK * SKK
      SKP2 = SKP * SKP
      VL = 0.
      IF ( LN - LNP ) 1, 2, 1
    2 IF ( LN ) 50, 51, 50
   50 IF ( SKK ) 52, 53, 52
   53 VL = 0.
      GO TO 13
   52 IF ( SKP ) 51, 54, 51
   54 VL = 0.
      GO TO 13
   51 DO 3 I = 1, NA
      IF(VP ( I ))8, 3, 8
    8 AA = AP( I )
      AA2 = AA ** 2
      IF ( V( 2 , I ))9, 10,9
    9 LMIN1 = LN
      LMAX1 = LN + 2
      GO TO 11
   10 LMIN1 = LN + 1
      LMAX1 = LN + 1
   11 CALL QUFUNC( 0, LMIN1, LMAX1 )
      DO 12 JS = 1, 2
      IF ( V( JS, I ) ) 70, 12, 70
   70 NSS = JS
      CALL VLLK( K, KP )
      VL = VL + V( JS, I ) * VV
   12 CONTINUE
    3 CONTINUE
      GO TO 13
    1 DO 14 I = 1, NA
      AA = AP( I )
      AA2 = AA ** 2
      IF ( K - KP ) 15, 16, 15
   16 IF ( K ) 55, 56, 55
   55 IF ( SKK ) 57, 58, 57
   58 VL = 0.
      GO TO 13
   57 IF ( SKP ) 56, 59, 56
   59 VL = 0.
      GO TO 13
   56 IF ( K - LN ) 46, 46, 47
   46 VU( 1 ) = V( 1, I )
      VU( 2 ) = V( 2, I )
      GO TO 48
   47 VU( 1 ) = V1( 1, I )
      VU( 2 ) = V1 ( 2, I )
   48 IF ( VU( 2 ) ) 22, 23, 22
   23 IF ( VU( 1 ) ) 24, 14, 24
   24 LMIN1 = K + 1
      LMAX1 = K + 1
      GO TO 25
   22 LMIN1 = K
      LMAX1 = K + 2
   25 CALL QUFUNC( 0, LMIN1, LMAX1 )
      DO 27 JS = 1, 2
      IF ( VU( JS ) ) 26, 27, 26
   26 NSS = JS
      CALL VLLK( K, KP )
      VL = VL + VU( JS ) * VV
   27 CONTINUE
      GO TO 14
   15 IF ( LN ) 61, 60, 61
   61 IF ( SKK ) 62, 63, 62
   63 VL = 0.
      GO TO 13
   62 IF ( SKP ) 60, 63, 60
   60 IF ( V2 ( 1, I ) ) 33, 34, 33
   33 LMIN1 = 1
      IF ( K - KP ) 41, 42, 42
   41 ZP = ( 2. * SKP2 / ( SKK2 + AA2 ) ) ** ( LN + 2 )
      GO TO 43
   42 ZP = ( 2. * SKK2 / ( SKP2 + AA2 ) ) ** ( LN + 2 )
   43 IF ( ZP - .015 ) 64, 64, 45
   64 IF ( ZP ) 44, 63, 44
   44 JQ = 1
      LMIN1 = LN + 1
      GO TO 35
   45 JQ = 0
      GO TO 35
   34 IF ( V2( 3, I ) ) 49, 14, 49
   49 LMIN1 = LN + 1
      JQ = 0
   35 IF ( V2( 3, I ) ) 36, 37, 36
   36 LMAX1 = LN + 3
      JQ = 0
      GO TO 38
   37 LMAX1 = LN + 2
   38 CALL QUFUNC( JQ, LMIN1, LMAX1 )
      DO 39 KS = 1, 3, 2
      IF ( V2( KS, I ) ) 40, 39, 40
   40 NSS = KS
      CALL VLLK( K, KP )
      VL = VL + V2( KS, I ) * VV
   39 CONTINUE
   14 CONTINUE
   13 RETURN
      END
      SUBROUTINE VLLK( K, KP )
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/REIDDT/ SKK,SKP,VL,VV,
     1               AA,AA2,AP(10),AIQ(10),AIQQ(10),ANG(7,10,10),
     2               V(3,10),V1(3,10),V2(3,10),VP(30),
     3               CS,CT(11,11),C(10),
     4               LN,LNP,J,NS,NA,NSS
      SKK2 = SKK * SKK
      SKP2 = SKP * SKP
      LN1 = LN + 1
      BK = K
      BKP = KP
      IF ( K - KP ) 1, 2, 1
    2 IF ( NSS - 1 ) 3, 3, 4
    3 VV = AIQ( K + 1 )
      GO TO 25
    4 VV = SKK * SKP * ( AIQ( K ) - AIQ( K + 2 ) ) / ( 2. * BK + 1. )
      GO TO 25
    1 IF ( K - KP ) 5, 6, 6
    5 AK = SKK
      AKP = SKP
      AK2 = SKK2
      AKP2 = SKP2
      GO TO 7
    6 AK = SKP
      AKP = SKK
      AK2 = SKP2
      AKP2 = SKK2
    7 IF ( NSS - 2 ) 8, 10, 10
   10 VV = AK2 * AIQ( LNP + 1 ) + AKP2 * AIQ( LN + 1 ) - 2. * AK * AKP *
     1    AIQ( LN + 2 )
      GO TO 25
    8 BLN = LN
      B = AK2 + AA2
      BC = 2. * AKP2 / B
      BCLN = BC ** ( LN + 2 )
      IF ( BCLN - .03 ) 11, 11, 12
   12 IF ( AK - AKP ) 13, 26, 14
   13 ATN =DATAN ( AA /(AK + AKP ) ) -DATAN ( AA/ ( AK - AKP) ) -
     1  3.14159
      GO TO 15
   14 ATN =DATAN ( AA/ ( AK + AKP ) ) -DATAN  (AA /(AK - AKP ) )
      GO TO 15
   26 ATN =DATAN (-2.D0* AKP / AA )
   15 AIQQ( 1 ) = .5 / AKP2 * ( 3. + ( 3. * AA2 + AKP2 - 3. * AK2 ) *
     1    AIQ ( 1 ) + 3. * AA / AKP * ATN )
      IF ( LN ) 16, 18, 16
   16 DO 17 JJ = 2, LN1
      BJ = JJ
   17 AIQQ(JJ) = (2. * BJ + 1.) * AK /((2. * BJ - 1.) * AKP) *
     1  ( AIQQ(JJ - 1 ) + AIQ(JJ + 1 ) ) - AIQ(JJ )
   18 VV = AIQQ( LN + 1 )
      GO TO 25
   11 IF ( LN - 1 ) 21, 22, 22
   21 AKKPL = 1.
      GO TO 23
   22 AKKPL = ( AK * AKP ) ** LN
   23 IF ( BC - .075 ) 19, 19, 20
   19 GO TO 20
   20 AQ = CS * AKKPL * AKP2 * 2. * ( BLN + 1. ) / B**( LN + 3 )
      BQ = AA2
      TOT = 0.
      DO 27 JN = 1, 10
      JN1 = JN + 1
      CQ = 1.
      DO 28 JJ = 1, JN1
      JJM = JJ - 1
      TOT = TOT + CT( JJ, JN ) * CQ * BQ
   28 CQ = AK2 / AA2 * CQ
      BQ = - BQ * AA2 * .5 * BC / B
C
      ABQ =DABS ( BQ )
      ABQ = ABQ / AA2
      IF ( ABQ - .1 D-06 ) 29, 29, 27
   27 CONTINUE
   29 VV = AQ * TOT
   25 RETURN
      END
      SUBROUTINE QUFUNC( JQ, LMIN1, LMAX1 )
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/REIDDT/ SKK,SKP,VL,VV,
     1               AA,AA2,AP(10),AIQ(10),AIQQ(10),ANG(7,10,10),
     2               V(3,10),V1(3,10),V2(3,10),VP(30),
     3               CS,CT(11,11),C(10),
     4               LN,LNP,J,NS,NA,NSS
      SKK2 = SKK * SKK
      SKP2 = SKP * SKP
      X = SKK2 + SKP2 + AA2
      A = 2. * SKK * SKP / X
      Z = 0.0
      IF(DABS(A).GT.1.0D-6)  Z = 1.0D0 / A
      ZA = ( ( SKK + SKP ) ** 2 + AA2 ) / ( ( SKK - SKP ) ** 2 + AA2 )
      AMIN = 0.0
      IF(DABS(A).GT.1.0D-10) AMIN = A ** (LMIN1 - 1)
      IF ( JQ ) 7, 16, 7
   16 IF ( LMIN1 - 2 ) 17, 29, 19
   29 IF ( A - .17 ) 22, 22, 17
   17 IF ( A - .3 ) 15, 15, 2
    2 AIQ(1)=0.25 / (SKK * SKP) * DLOG(ZA)
      GO TO 21
   15 AQ = 1.
      BQ = 1.
      DO 30 IB = 2, 20, 2
      BIB = IB
      BQ = BQ * A ** 2 * ( BIB - 1. ) / ( BIB + 1. )
      AQ = AQ + BQ
      IF ( BQ -.1D-08 ) 31, 31, 30
   30 CONTINUE
   31 AIQ( 1 ) = AQ / X
   21 IF ( LMAX1 - 1 ) 7, 7, 18
   19 IF ( AMIN - .03 ) 26, 26, 17
   26 LL = LMIN1
      GO TO 5
   18 IF ( A - .3 ) 22, 22, 4
    4 AIQ( 2 )  =      Z * AIQ( 1 ) - 1. / ( 2. * SKK * SKP )
      GO TO 23
   22 AQ = 1.
      BQ = 1.
      DO 34 IB = 1, 10
      BIB = IB
      BIB = BIB - 1.
      BQ = BQ * A ** 2 * ( 2. * BIB + 3. ) * ( 2. * BIB + 2. ) / ( 2. *
     1   ( 2. * BIB + 5. ) * ( BIB + 1. ) )
      AQ = AQ + BQ
      IF ( BQ - .1 E -06) 35, 35, 34
   34 CONTINUE
   35 AIQ( 2 ) = C( 2 ) * AQ / X    * A
   23 IF ( LMAX1 - 2 ) 7, 7, 27
   27 LL = 3
    5 DO 8 K = LL,LMAX1
      BK = K
      BLL = BK - 1.
      BKP1 = A ** ( K - 1 )
      IF ( BKP1 - .03 ) 24, 24, 6
    6 AIQ( K ) = 1. / ( BK - 1. ) * ( ( 2. * BK - 3. ) * Z * AIQ ( K-1)
     1    - ( BK - 2. ) * AIQ( K - 2 ) )
      GO TO 8
   24 IF ( A )   25, 14, 25
   25 IF ( A - .23 ) 13, 13, 28
   13 GO TO 28
   14 AIQ( K ) = 0.
      GO TO 8
   28 AQ = 1.
      BQ = 1.
      DO 32 IB = 1, 10
      BIB = IB - 1
      BQ = BQ * A ** 2 * ( 2. * BIB + BLL + 2. ) * ( 2. * BIB + BLL + 1.
     1    ) / ( 2. * ( 2. * BIB + 2. * BLL + 3. ) * ( BIB + 1. ) )
      AQ = AQ + BQ
      IF ( BQ - .1 E -06 ) 33, 33, 32
   32 CONTINUE
   33 AIQ( K ) = C( K ) * AQ / X  * BKP1
    8 CONTINUE
    7 RETURN
      END
      SUBROUTINE MINVEC(A,NN,IFAIL)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL R, IFAIL
C
      DIMENSION A(1), P(144), Q(144), R(144)
C
      IFAIL = .FALSE.
      N = NN
      NP1 = N + 1
      DO   1 I = 1,N
    1 R(I) = .FALSE.
      DO 8 I = 1, N
      BIGA = 0.0
      JJ = 1
      DO 2 J = 1, N
      IF(R(J)) GOTO 2
      IF(R(J).OR. DABS(A(JJ )).LT.BIGA) GOTO 2
      BIGA =DABS(A(JJ))
      K = J
      KK = JJ
    2 JJ = JJ + NP1 - J
      IF(BIGA.EQ.0.0) GOTO 9
      R(K) = .TRUE.
      Q(K) = 1.0 / A(KK)
      P(K) = 1.0
      A(KK ) = 0.0
      IF((K-1).EQ.0) GOTO 4
      KM1 = K - 1
      JK = K
      DO 3 J = 1, KM1
      P(J) = A(JK)
      IF(.NOT.R(J)) A(JK) = - A(JK)
      Q(J) = A(JK)  * Q(K)
      A(JK) = 0.0
    3 JK = JK + N - J
      IF(K.EQ.N) GOTO 6
    4 KP1= K + 1
      KJ = KK
      DO 5 J =KP1, N
      KJ = KJ + 1
      Q(J) = - A(KJ)  * Q(K)
      IF(.NOT.R(J)) A(KJ ) = - A(KJ )
      P(J) = - A(KJ)
    5 A(KJ ) = 0.0
    6 JJ = 0
      DO 8 J = 1, N
      JK = JJ
      DO 7 K = J,N
      JK = JK + 1
      A(JK ) = A(JK ) + P(J) * Q(K)
    7 CONTINUE
    8 JJ = JJ + NP1 - J
      GOTO 10
    9 IFAIL =.TRUE.
   10 RETURN
      END
      DOUBLE PRECISION FUNCTION XKIN(N1,N2,L)
C
C  FUNCTION OF THE KINETIC ENERGY IN UNITS OF HBAR * OMEGA ACCORDING TO
C  J.P.ELLIOTT AND A.D.JACKSON N.P. A121 (1968) P.280.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      X = 0.0
C
      IF(N1.EQ.N2) X =DBLE(2*N1 + L) + 1.5
      IF(N1.EQ.(N2-1)) X =DSQRT(DBLE(N1+1) * (DBLE(N1 + L) +1.5 ))
      IF(N1.EQ.(N2+1)) X =DSQRT(DBLE(N1) *(DBLE(N1 + L) + 0.5 ))
C                                                                              #
      XKIN = 0.5 * X
C
      RETURN
      END
      SUBROUTINE SYMIN2(A,NN,IFAIL,ID)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL R, IFAIL
      DIMENSION A(ID,1), P(30), Q(30), R(30)
C
      IFAIL = .FALSE.
      N = NN
      DO   1 I = 1,N
    1 R(I) = .FALSE.
      DO 7 I = 1, N
      BIGA = 0.0
      DO 2 J = 1, N
      IF(R(J).OR.DABS(A(J,J)).LT.BIGA) GOTO 2
      BIGA =DABS(A(J,J))
      K = J
    2 CONTINUE
      IF(BIGA.EQ.0.0) GOTO 8
      R(K) = .TRUE.
      Q(K) = 1.0 / A(K,K)
      P(K) = 1.0
      A(K,K) = 0.0
      IF((K-1).EQ.0) GOTO 4
      KM1 = K - 1
      DO 3 J = 1, KM1
      P(J) = A(J,K)
      IF(.NOT.R(J)) A(J,K) =-A(J,K)
      Q(J) = A(J,K) * Q(K)
    3 A(J,K) = 0.0
      IF(K.EQ.N) GOTO 6
    4 J1 = K + 1
      DO 5 J = J1, N
      Q(J) = - A(K,J) * Q(K)
      IF(.NOT.R(J)) A(K,J) = - A(K,J)
      P(J) = - A(K,J)
    5 A(K,J) = 0.0
    6 DO 7 J = 1,N
      DO 7 K = J,N
      A(J,K) = A(J,K) + P(J) * Q(K)
      IF(J.NE.K) A(K,J) = A(J,K)
    7 CONTINUE
      GOTO 9
    8 IFAIL =.TRUE.
    9 RETURN
      END
      SUBROUTINE SYSLI0(LI,KO,PSM,IRA)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION PSM( 50,100), IRA(50)
C     IN MATRIX PSM EACH ROW IS A LINEAR EQUATION AND ITS SECOND SIDES *
 1006 FORMAT(18H0DIMENSION STUPIDE/2I6)
 1007 FORMAT(19H0MATRICE SINGULIERE/10E12.4)
C     PROTECTION TEST   *   *   *   *   *   *   *   *   *   *   *   *
      N=LI
      ITR=N-1
      IF(ITR)9,9,11
    9 WRITE(6,1006)N,NK
      GOTO36
   11 NK=KO
      NS=N+1
      IF(NS-NK)13,13,9
C     NORMALIZATION OF EACH EQUATION *   *   *   *   *   *   *    *   *
   13 D=1.
      DO1L=1,N
      PIV=PSM(L,1)
      API=DABS(PIV)
      DO3K=2,N
      P=PSM(L,K)
      AP=DABS(P)
      IF(API-AP)5,3,3
    5 PIV=P
      API=AP
    3 CONTINUE
      IF(1.D-16-API)7,32,32
    7 D=D*PIV
      PIV=1./PIV
      DO1K=1,NK
    1 PSM(L,K)=PSM(L,K)*PIV
C     N-1 STEP PROCESS TO CANCEL LOW LEFT PART OF THE MATRIX *    *   *
      DO2K=1,N
    2 IRA(K)=K
      DO4LK=1,ITR
C     SEARCH OF PIVOT IN THE SUBMATRIX FROM LK TO N  BOTH INCLUDED *   *
      PIV=DABS(PSM(LK,LK))
      LL=LK
      KK=LK
      DO6K=LK,N
      DO6L=LK,N
      P=DABS(PSM(L,K))
      IF(PIV-P)8,6,6
    8 LL=L
      KK=K
      PIV=P
    6 CONTINUE
      IF(1.D-06-PIV)12,32,32
C     ROW  EXCHANGE  *   *   *   *   *   *   *   *   *   *   *   *   *
   12 IF(LL-LK)16,14,16
   16 D=-D
      DO18K=LK,NK
      P=PSM(LK,K)
      PSM(LK,K)=PSM(LL,K)
   18 PSM(LL,K)=P
C     COLUMN EXCHANGE  *   *   *   *   *   *   *   *   *   *   *   *   *
   14 IF(KK-LK)17,15,17
   17 D=-D
      K=IRA(LK)
      IRA(LK)=IRA(KK)
      IRA(KK)=K
      DO19L=1,N
      P=PSM(L,LK)
      PSM(L,LK)=PSM(L,KK)
   19 PSM(L,KK)=P
C     SUBTRACT ROW LK FROM ROWS LKMI TO N  TO CANCEL LOW PART COLUMN LK
   15 PIV=-1./PSM(LK,LK)
      LKMI=LK+1
      DO20L=LKMI,N
   20 PSM(L,LK)=PSM(L,LK)*PIV
      DO22K=LKMI,NK
      P=PSM(LK,K)
      DO22L=LKMI,N
   22 PSM(L,K)=PSM(L,K)+PSM(L,LK)*P
      D=-D/PIV
    4 CONTINUE
      PIV=1./PSM(N,N)
      D=D/PIV
      IF(DABS(D)-1.D-16)32,32,34
   32 WRITE(6,1007)((PSM(IMP,JMP),JMP=1,NK),IMP=1,N),D
      GOTO36
C     BACKWARDS  TRIANGULAR SOLVING  *   *   *   *   *   *   *   *   *
   34 DO38K=NS,NK
      PSM(N,K)=PSM(N,K)*PIV
      LK=NS
      DO38LL=1,ITR
      LK=LK-1
      SUM=PSM(LK-1,K)
      DO40KL=LK,N
   40 SUM=SUM-PSM(LK-1,KL)*PSM(KL,K)
   38 PSM(LK-1,K)=SUM/PSM(LK-1,LK-1)
C     REORDERING  *   *   *   *   *   *   *   *   *   *   *   *   *   *
      DO44K=NS,NK
      DO42L=1,N
      LL=IRA(L)
   42 PSM(LL,1)=PSM(L,K)
      DO44L=1,N
   44 PSM(L,K)=PSM(L,1)
      PSM(1,1)=D
C     DETERMINANT *   *   *   *   *   *   *   *   *   *   *   *   *   *
   36 RETURN
      END
      SUBROUTINE SPLS3(X,Y,N,XI,FI,M,Q,AU,IGO,ISPL)
C
C     ******************************************************************
C
C     CUBIC SPLINE, STARTING WITH ZERO SECOND DERIVATIVES AT THE
C     BOUNDARIES OF THE APPROXIMATION INTERVAL.
C
C     IGO = 0      BUILD UP SPLINE ONLY.
C     IGO = 1      BUILD UP SPLINE AND INTERPOLATE FOR M POINTS.
C     IGO = 2      BUILD UP SPLINE AND COMPUTE DERIVATIVES AT M POINTS.
C
C     DOUBLE PRECISION VERSION.
C
C     ******************************************************************
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION X(2), Y(2), XI(1), Q(1), AU(1), FI(1)
C
      ZERO = 0.0D0
      THREE = 3.0D0
      SIX = 6.0D0
      FACT = 0.1666666666667D0
      IF (ISPL.NE.0)  GO TO 30
C
C
      AU(1) = ZERO
      AU(N) = ZERO
      Q(1) = ZERO
      HK = X(2) - X(1)
      YSAVE = (Y(2)-Y(1)) / HK
      AUX = ZERO
      NN = N - 1
      DO 10  K = 2,NN
      HX = X(K+1) - X(K-1)
      DIVQ = (HK*Q(K-1)+HX+HX)
      HK = X(K+1) - X(K)
      YK = (Y(K+1)-Y(K)) / HK
      Q(K) = - HK / DIVQ
      AU(K) = (SIX*(YK-YSAVE)-AUX) / DIVQ
      YSAVE = YK
      AUX = AU(K) * HK
   10 CONTINUE
C
      NN2 = NN + 2
      DO 20  KK = 2,NN
      K = NN2 - KK
   20 AU(K) = Q(K) * AU(K+1) + AU(K)
C
      IF (IGO.EQ.0)  RETURN
C
C     ******************************************************************
C
C     INTERPOLATION OR COMPUTATION OF DERIVATIVES.
C
C     IGO = 1      INTERPOLATE FOR M POINTS.
C     IGO = 2      COMPUTE DERIVATIVES AT M POINTS.
C
C     ******************************************************************
C
   30 DO 100  J = 1,M
      IF (X(1).GT.XI(J))  GO TO 110
      IF (XI(J).GT.X(N))  GO TO 120
      M1 = 1
      M2 = N
   50 M3 = (M2+M1)/2
      IF (XI(J).GE.X(M3))  GO TO 70
      M2 = M3
      GO TO 80
   70 M1 = M3
   80 IF (M1+1-M2.NE.0)  GO TO 50
   90 DIJ = X(M2) - XI(J)
      DIM1J = X(M1) - XI(J)
      HI = X(M2) - X(M1)
      HI2 = HI * HI
      IF (IGO.GE.2)  GO TO 95
      DIJ3 = DIJ * DIJ * DIJ
      DIM1J3 = DIM1J * DIM1J * DIM1J
      FI(J) = FACT * (AU(M1)*DIJ3-AU(M2)*DIM1J3+(SIX*Y(M1)-HI2*AU(M1))
     1        *DIJ-(SIX*Y(M2)-HI2*AU(M2))*DIM1J) / HI
      GO TO 100
   95 FI(J) = FACT * (THREE*(AU(M2)*DIM1J*DIM1J-AU(M1)*DIJ*DIJ)
     1       -SIX*(Y(M1)-Y(M2))+HI2*(AU(M1)-AU(M2))) / HI
      GOTO 100
  110 M1 = 1
      M2 = 2
      GO TO 90
C
  120 M1 = N - 1
      M2 = N
      GO TO 90
  100 CONTINUE
      RETURN
C
C
      END
