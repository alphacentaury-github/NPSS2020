Understand ModelSpace code 

There are classes/structures 

(1) Orbit : class Orbit contains information of an single particle level 

   Orbit.(n,l,j2,tz2) : quantum numbers of a level/orbit (w/o jz2!)

   Orbit.occ : =0 particle, =1 hole 
         note that there is no jz2 value. 
         Because the hole concept is not well defined for partially filled levels.
         I suppose that all levels are either fully occupied or unoccupied.  

   Orbit.cvq : =0 core, =1 valence, =2 qspace  
         Represent whether this orbit corresponds to core , valence, qspace.
         It is not clear what is the difference between reference, hole, core yet.  

   Orbit.index : index assigned to the orbit  
         each orbit is assigned to an unique index. 
         The assignment is done when modelspace is constructed. 

(2) Ket :  class Ket represent two orbits |pq>
           contruct using op and oq (Orbit p and Orbit q)
    Ket.(op, op) : orbits in the ket 
    Ket.(p,q)    : orbit index 
    Ket.Phase(int J) : return  \f$ (-1)^{(j_p+j_q+1+J)} \f$  
                       this is a phase factor of |qp> = phase*|pq> 
                       in J channel 
    Ket.delta_pq() : return dpq=1 if p==q , dpq=0 if p/=q
 

(3) TwoBodyChannel: class TwoBodyChannel organize Kets into channels 
                    kets in the channel have the same J, P, T 
                    To construct TwoBodyChannel, one first prepare ModelSpace 

    TwoBodyChannel.(J,parity,Tz) : J,P,T of channel  
                   channel index N is such that 
                      J = N%(tbjmax+1);
                      parity = (N/(tbjmax+1))%2;
                      Tz = (N/(2*(tbjmax+1))-1);  

                    i.e. (TwoBodyChannelIndex) = (t+1)*2*(TwoBodyJmax+1) + p*(TwoBodyJmax+1) + j 
 
    TwoBodyChannel.NumberKets : total number of kets in this channel      
    TwoBodyChannel.KetList    : vector of ket indices 
                        eg [2, 4, 7, ...] Used for looping over all the kets in the channel      
 
    TwoBodyChannel.KetMap : mapping of whole Ket index and local ket index in this channel
                  eg [ -1, -1, 0, -1, 1, -1, -1, 2 ...] 
                  Used for asking what is the local index of this ket. 
                 -1 means the ket doesn't participate in this channel  

    TwoBodyChannel.GetNumberKets() : return NumberKets
                    
    TwoBodyChannel.GetLocalIndex(int ketindex) or GetLocalIndex(int p, int q)
                 :  mapping modelspace ket index => local ket index
  
    TwoBodyChannel.GetKetIndex(int i) :
                 : local ket index => modelspace ket index

    TwoBodyChannel.GetKetIndexFromList( )
                  .GetKetIndex_[xy]()  x,y can be p,h,c,v,q 
                 : get Ketindex vector  

    TwoBodyChannel.GetKet(int i)  : get pointer to ket using local index


    TwoBodyChannel.KetIndex_pp
                  .KetIndex_hh 
                  .KetIndex_ph
                  .KetIndex_cc
                  .KetIndex_vc
                  .KetIndex_qc
                  .KetIndex_vv
                  .KetIndex_qv
                  .KetIndex_qq
                 : vector/list of ket index corresponding to pairs of 
                   p(particle), h(hole), c(core),v(valence), q(qspace) 

    TwoBodyChannel.Ket_occ_hh
                  .Ket_unocc_hh 
                  .Ket_occ_ph
                  .Ket_unocc_ph             
                  :vector of occupation number products (length is NumberKets )

(4) TwoBodyChannel_CC
                :cross-coupled two-body channel 
                  (allows <pp||nn> but no <pp||pn> i.e. same |T_z|)

(5) ModelSpace : collection of orbits, kets, channels
      let ms as a ModelSpace object 
 
      ms.hbar_omega
      ms.target_mass
      ms.target_Z
      ms.Aref
      ms.Zref
      ms.(Emax,E2max,E3max)
      ms.(Lmax2,Lmax3)    

      ms.norbits
      ms.Orbits : vector of all orbit in modelspace 
                  index of an orbit is (2*n+l)*(2*n+l+3) + 1-j2 + (tz2+1)/2
                  for example 
                  0 = "p0s1", 1 = "n0s1", 2= "p0p3", 3="n0p3" etc.
      ms.holes : vector of orbit index in reference slater determinant 
      ms.core  : vector of orbit index in core for decoupling 
      ms.valence : vector of orbit index in valence for decoupling 
      ms.qspace :
      ms.proton_orbits
      ms.neutron_orbits 

      ms.Kets   : vector of all Ket in modelspace 
      ms.KetIndex_pp 
                 _ph 
                 _hh 
                 _cc 
                 _vc
                 _qc
                 _vv 
                 _qv 
                 _qq 
      ms.Ket_occ_hh, Ket_unocc_hh,Ket_occ_ph,Ket_ unocc_ph 
      

      ms.OneBodyJmax
      ms.TwoBodyJmax
      ms.ThreeBodyJmax
      ms.OneBodyChannels 
      ms.nTwoCodyChannels
      ms.TwoBodyChannels : vector of all channels 
      ms.TwoBodyChannels_CC : vector of all C.C. channels 
      ms.PandyaLookUp : lookup table 
      ms.(SixJList, NineJList,MoshList) 
      ms.ValenceSpaces : predefined core/orbits list

      * Initialization of ModelSpace   
       (1) full initialization requires 

           Init(emax, hole_list, core_list, valence_list) 
           * one can simplify the initialization by using predefined strings. 
           * emax determine all s.p. orbits considered
           * hole_list determine what is the reference 
           * core_list/valence_list determine 
           *   the target Hamiltonian , how to decouple. 
           *   the target Hamiltotnian will be block-diagonal as
           *    core-core, core-valence coupling should be small in two-body operators  
           *               core-qspace, valence-qspace should be zero in
           *                              one-body and two-body operators        
           *      some hole can be in the valence space. 
           *    
           * if core_list is not given, assume core_list = hole_list 
           * note no orbit can be in both core and valence. 
           * reference string is interprested and infer hole_list  
              reference string is something like 'He4' 
           * if only one string is given, it is hole and core, no valence_list 
           * if two string is given, one is reference and the other is valence
           * valence string is interpreted as 
               -> '0hw-shell' case, call Get0hwSpace to generate core_list and valence_list 
               -> may be comma separated list of valence orbits  
               -> 'FCI' assumes no core and all orbits are valence (?) 
               -> can be a pre-defined ValenceSpace name 
                  which determines core_list and valence_list 
               -> in other cases, consider valence is actually represent a core
                  and there is no valence 
                  then infer core_list from  string 
                  i.e. if reference='He6' valence='He4' 
                   it actually means the core is 'He4' not valence space.  
                
       (2) Once emax, hole_list, core_list, valence_list is given                 
           construct all orbits and assign index, 
           construct all kets and assign KetIndex,   
           then  construct all TwoBodyChannels 


    
 




